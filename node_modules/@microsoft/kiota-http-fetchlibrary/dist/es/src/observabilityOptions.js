export const ObservabilityOptionKey = "ObservabilityOptionKey";
export class ObservabilityOptionsImpl {
    constructor(originalOptions) {
        this._originalOptions = originalOptions !== null && originalOptions !== void 0 ? originalOptions : {};
    }
    getKey() {
        return ObservabilityOptionKey;
    }
    get includeEUIIAttributes() {
        return this._originalOptions.includeEUIIAttributes;
    }
    set includeEUIIAttributes(value) {
        this._originalOptions.includeEUIIAttributes = value;
    }
    getTracerInstrumentationName() {
        return "@microsoft/kiota-http-fetchlibrary";
    }
}
/**
 * Gets the observability options from the request options
 * @param requestOptions The request options
 * @returns The observability options
 */
export function getObservabilityOptionsFromRequest(requestOptions) {
    if (requestOptions) {
        const observabilityOptions = requestOptions[ObservabilityOptionKey];
        if (observabilityOptions instanceof ObservabilityOptionsImpl) {
            return observabilityOptions;
        }
    }
    return undefined;
}
//# sourceMappingURL=observabilityOptions.js.map