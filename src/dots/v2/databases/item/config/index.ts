/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_advanced_configFromDiscriminatorValue, createMongo_advanced_configFromDiscriminatorValue, createMysql_advanced_configFromDiscriminatorValue, createOpensearch_advanced_configFromDiscriminatorValue, createPostgres_advanced_configFromDiscriminatorValue, createRedis_advanced_configFromDiscriminatorValue, createValkey_advanced_configFromDiscriminatorValue, deserializeIntoKafka_advanced_config, deserializeIntoMongo_advanced_config, deserializeIntoMysql_advanced_config, deserializeIntoOpensearch_advanced_config, deserializeIntoPostgres_advanced_config, deserializeIntoRedis_advanced_config, deserializeIntoValkey_advanced_config, serializeDatabase_config, serializeKafka_advanced_config, serializeMongo_advanced_config, serializeMysql_advanced_config, serializeOpensearch_advanced_config, serializePostgres_advanced_config, serializeRedis_advanced_config, serializeValkey_advanced_config, type Database_config, type ErrorEscaped, type Kafka_advanced_config, type Mongo_advanced_config, type Mysql_advanced_config, type Opensearch_advanced_config, type Postgres_advanced_config, type Redis_advanced_config, type Valkey_advanced_config } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConfigGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The config property
     */
    config?: Kafka_advanced_config | Mongo_advanced_config | Mysql_advanced_config | Opensearch_advanced_config | Postgres_advanced_config | Redis_advanced_config | Valkey_advanced_config | null;
}
export type ConfigGetResponse_config = Kafka_advanced_config | Mongo_advanced_config | Mysql_advanced_config | Opensearch_advanced_config | Postgres_advanced_config | Redis_advanced_config | Valkey_advanced_config;
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/config
 */
export interface ConfigRequestBuilder extends BaseRequestBuilder<ConfigRequestBuilder> {
    /**
     * Shows configuration parameters for an existing database cluster by sending a GET request to`/v2/databases/$DATABASE_ID/config`.The response is a JSON object with a `config` key, which is set to an objectcontaining any database configuration parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConfigGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConfigGetResponse | undefined>;
    /**
     * To update the configuration for an existing database cluster, send a PATCH request to`/v2/databases/$DATABASE_ID/config`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Database_config, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Shows configuration parameters for an existing database cluster by sending a GET request to`/v2/databases/$DATABASE_ID/config`.The response is a JSON object with a `config` key, which is set to an objectcontaining any database configuration parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the configuration for an existing database cluster, send a PATCH request to`/v2/databases/$DATABASE_ID/config`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Database_config, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Kafka_advanced_config | Mongo_advanced_config | Mysql_advanced_config | Opensearch_advanced_config | Postgres_advanced_config | Redis_advanced_config | Valkey_advanced_config}
 */
// @ts-ignore
export function createConfigGetResponse_configFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigGetResponse_config;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigGetResponse}
 */
// @ts-ignore
export function createConfigGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigGetResponse(configGetResponse: Partial<ConfigGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "config": n => { configGetResponse.config = n.getObjectValue<Kafka_advanced_config>(createKafka_advanced_configFromDiscriminatorValue) ?? n.getObjectValue<Mongo_advanced_config>(createMongo_advanced_configFromDiscriminatorValue) ?? n.getObjectValue<Mysql_advanced_config>(createMysql_advanced_configFromDiscriminatorValue) ?? n.getObjectValue<Opensearch_advanced_config>(createOpensearch_advanced_configFromDiscriminatorValue) ?? n.getObjectValue<Postgres_advanced_config>(createPostgres_advanced_configFromDiscriminatorValue) ?? n.getObjectValue<Redis_advanced_config>(createRedis_advanced_configFromDiscriminatorValue) ?? n.getObjectValue<Valkey_advanced_config>(createValkey_advanced_configFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigGetResponse_config(configGetResponse_config: Partial<Kafka_advanced_config | Mongo_advanced_config | Mysql_advanced_config | Opensearch_advanced_config | Postgres_advanced_config | Redis_advanced_config | Valkey_advanced_config> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoKafka_advanced_config(configGetResponse_config as Kafka_advanced_config),
        ...deserializeIntoMongo_advanced_config(configGetResponse_config as Mongo_advanced_config),
        ...deserializeIntoMysql_advanced_config(configGetResponse_config as Mysql_advanced_config),
        ...deserializeIntoOpensearch_advanced_config(configGetResponse_config as Opensearch_advanced_config),
        ...deserializeIntoPostgres_advanced_config(configGetResponse_config as Postgres_advanced_config),
        ...deserializeIntoRedis_advanced_config(configGetResponse_config as Redis_advanced_config),
        ...deserializeIntoValkey_advanced_config(configGetResponse_config as Valkey_advanced_config),
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigGetResponse(writer: SerializationWriter, configGetResponse: Partial<ConfigGetResponse> | undefined | null = {}) : void {
    if (configGetResponse) {
        writer.writeObjectValue<Kafka_advanced_config | Mongo_advanced_config | Mysql_advanced_config | Opensearch_advanced_config | Postgres_advanced_config | Redis_advanced_config | Valkey_advanced_config>("config", configGetResponse.config, serializeConfigGetResponse_config);
        writer.writeAdditionalData(configGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigGetResponse_config(writer: SerializationWriter, configGetResponse_config: Partial<Kafka_advanced_config | Mongo_advanced_config | Mysql_advanced_config | Opensearch_advanced_config | Postgres_advanced_config | Redis_advanced_config | Valkey_advanced_config> | undefined | null = {}) : void {
    serializeKafka_advanced_config(writer, configGetResponse_config as Kafka_advanced_config);
    serializeMongo_advanced_config(writer, configGetResponse_config as Mongo_advanced_config);
    serializeMysql_advanced_config(writer, configGetResponse_config as Mysql_advanced_config);
    serializeOpensearch_advanced_config(writer, configGetResponse_config as Opensearch_advanced_config);
    serializePostgres_advanced_config(writer, configGetResponse_config as Postgres_advanced_config);
    serializeRedis_advanced_config(writer, configGetResponse_config as Redis_advanced_config);
    serializeValkey_advanced_config(writer, configGetResponse_config as Valkey_advanced_config);
}
/**
 * Uri template for the request builder.
 */
export const ConfigRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/config";
/**
 * Metadata for all the requests in the request builder.
 */
export const ConfigRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createConfigGetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase_config,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
