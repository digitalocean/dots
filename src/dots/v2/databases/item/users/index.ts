/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_userFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoDatabase_user, serializeDatabase_user, type Database_user, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithUsernameItemRequestBuilder, WithUsernameItemRequestBuilderNavigationMetadata, WithUsernameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsersGetResponse}
 */
// @ts-ignore
export function createUsersGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUsersGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsersPostRequestBody}
 */
// @ts-ignore
export function createUsersPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUsersPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsersPostResponse}
 */
// @ts-ignore
export function createUsersPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUsersPostResponse;
}
/**
 * The deserialization information for the current model
 * @param UsersGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsersGetResponse(usersGetResponse: Partial<UsersGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "users": n => { usersGetResponse.users = n.getCollectionOfObjectValues<Database_user>(createDatabase_userFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param UsersPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsersPostRequestBody(usersPostRequestBody: Partial<UsersPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDatabase_user(usersPostRequestBody),
        "readonly": n => { usersPostRequestBody.readonly = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param UsersPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsersPostResponse(usersPostResponse: Partial<UsersPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "user": n => { usersPostResponse.user = n.getObjectValue<Database_user>(createDatabase_userFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UsersGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsersGetResponse(writer: SerializationWriter, usersGetResponse: Partial<UsersGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!usersGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Database_user>("users", usersGetResponse.users, serializeDatabase_user);
    writer.writeAdditionalData(usersGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UsersPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsersPostRequestBody(writer: SerializationWriter, usersPostRequestBody: Partial<UsersPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!usersPostRequestBody || isSerializingDerivedType) { return; }
    serializeDatabase_user(writer, usersPostRequestBody, isSerializingDerivedType)
    writer.writeBooleanValue("readonly", usersPostRequestBody.readonly);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UsersPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsersPostResponse(writer: SerializationWriter, usersPostResponse: Partial<UsersPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!usersPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Database_user>("user", usersPostResponse.user, serializeDatabase_user);
    writer.writeAdditionalData(usersPostResponse.additionalData);
}
export interface UsersGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The users property
     */
    users?: Database_user[] | null;
}
export interface UsersPostRequestBody extends Database_user, Parsable {
    /**
     * (To be deprecated: use settings.mongo_user_settings.role instead for access controls to MongoDB databases). For MongoDB clusters, set to `true` to create a read-only user.This option is not currently supported for other database engines.           
     */
    readonly?: boolean | null;
}
export interface UsersPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The user property
     */
    user?: Database_user | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/users
 */
export interface UsersRequestBuilder extends BaseRequestBuilder<UsersRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.users.item collection
     * @param username The name of the database user.
     * @returns {WithUsernameItemRequestBuilder}
     */
     byUsername(username: string) : WithUsernameItemRequestBuilder;
    /**
     * To list all of the users for your database cluster, send a GET request to`/v2/databases/$DATABASE_ID/users`.Note: User management is not supported for Caching or Valkey clusters.The result will be a JSON object with a `users` key. This will be set to an arrayof database user objects, each of which will contain the standard database user attributes.User passwords will not show without the `database:view_credentials` scope.For MySQL clusters, additional options will be contained in the mysql_settings object.For MongoDB clusters, additional information will be contained in the mongo_user_settings object
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UsersGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UsersGetResponse | undefined>;
    /**
     * To add a new database user, send a POST request to `/v2/databases/$DATABASE_ID/users`with the desired username.Note: User management is not supported for Caching or Valkey clusters.When adding a user to a MySQL cluster, additional options can be configured in the`mysql_settings` object.When adding a user to a Kafka cluster, additional options can be configured inthe `settings` object. When adding a user to a MongoDB cluster, additional options can be configured inthe `settings.mongo_user_settings` object.The response will be a JSON object with a key called `user`. The value of this will be anobject that contains the standard attributes associated with a database user includingits randomly generated password.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UsersPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: UsersPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UsersPostResponse | undefined>;
    /**
     * To list all of the users for your database cluster, send a GET request to`/v2/databases/$DATABASE_ID/users`.Note: User management is not supported for Caching or Valkey clusters.The result will be a JSON object with a `users` key. This will be set to an arrayof database user objects, each of which will contain the standard database user attributes.User passwords will not show without the `database:view_credentials` scope.For MySQL clusters, additional options will be contained in the mysql_settings object.For MongoDB clusters, additional information will be contained in the mongo_user_settings object
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To add a new database user, send a POST request to `/v2/databases/$DATABASE_ID/users`with the desired username.Note: User management is not supported for Caching or Valkey clusters.When adding a user to a MySQL cluster, additional options can be configured in the`mysql_settings` object.When adding a user to a Kafka cluster, additional options can be configured inthe `settings` object. When adding a user to a MongoDB cluster, additional options can be configured inthe `settings.mongo_user_settings` object.The response will be a JSON object with a key called `user`. The value of this will be anobject that contains the standard attributes associated with a database user includingits randomly generated password.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: UsersPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UsersRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/users";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UsersRequestBuilderNavigationMetadata: Record<Exclude<keyof UsersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byUsername: {
        requestsMetadata: WithUsernameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithUsernameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["username"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UsersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UsersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUsersGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: UsersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUsersPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUsersPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
