/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_userFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createUser_settingsFromDiscriminatorValue, serializeDatabase_user, serializeUser_settings } from '../../../../../models/index.js';
// @ts-ignore
import { Reset_authRequestBuilderRequestsMetadata } from './reset_auth/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithUsernameGetResponse}
 */
// @ts-ignore
export function createWithUsernameGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithUsernameGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithUsernamePutRequestBody}
 */
// @ts-ignore
export function createWithUsernamePutRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithUsernamePutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithUsernamePutResponse}
 */
// @ts-ignore
export function createWithUsernamePutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithUsernamePutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithUsernameGetResponse(withUsernameGetResponse = {}) {
    return {
        "user": n => { withUsernameGetResponse.user = n.getObjectValue(createDatabase_userFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithUsernamePutRequestBody(withUsernamePutRequestBody = {}) {
    return {
        "settings": n => { withUsernamePutRequestBody.settings = n.getObjectValue(createUser_settingsFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithUsernamePutResponse(withUsernamePutResponse = {}) {
    return {
        "user": n => { withUsernamePutResponse.user = n.getObjectValue(createDatabase_userFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithUsernameGetResponse(writer, withUsernameGetResponse = {}) {
    if (withUsernameGetResponse) {
        writer.writeObjectValue("user", withUsernameGetResponse.user, serializeDatabase_user);
        writer.writeAdditionalData(withUsernameGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithUsernamePutRequestBody(writer, withUsernamePutRequestBody = {}) {
    if (withUsernamePutRequestBody) {
        writer.writeObjectValue("settings", withUsernamePutRequestBody.settings, serializeUser_settings);
        writer.writeAdditionalData(withUsernamePutRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithUsernamePutResponse(writer, withUsernamePutResponse = {}) {
    if (withUsernamePutResponse) {
        writer.writeObjectValue("user", withUsernamePutResponse.user, serializeDatabase_user);
        writer.writeAdditionalData(withUsernamePutResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithUsernameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/users/{username}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithUsernameItemRequestBuilderNavigationMetadata = {
    reset_auth: {
        requestsMetadata: Reset_authRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithUsernameItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithUsernameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithUsernameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithUsernameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithUsernameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithUsernamePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithUsernamePutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
