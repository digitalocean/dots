/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_userFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMysql_settingsFromDiscriminatorValue, serializeDatabase_user, serializeMysql_settings, type Database_user, type ErrorEscaped, type Mysql_settings } from '../../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Reset_authPostRequestBody}
 */
// @ts-ignore
export function createReset_authPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReset_authPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Reset_authPostResponse}
 */
// @ts-ignore
export function createReset_authPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReset_authPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReset_authPostRequestBody(reset_authPostRequestBody: Partial<Reset_authPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "mysql_settings": n => { reset_authPostRequestBody.mysqlSettings = n.getObjectValue<Mysql_settings>(createMysql_settingsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReset_authPostResponse(reset_authPostResponse: Partial<Reset_authPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "user": n => { reset_authPostResponse.user = n.getObjectValue<Database_user>(createDatabase_userFromDiscriminatorValue); },
    }
}
export interface Reset_authPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The mysql_settings property
     */
    mysqlSettings?: Mysql_settings | null;
}
export interface Reset_authPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The user property
     */
    user?: Database_user | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/users/{username}/reset_auth
 */
export interface Reset_authRequestBuilder extends BaseRequestBuilder<Reset_authRequestBuilder> {
    /**
     * To reset the password for a database user, send a POST request to`/v2/databases/$DATABASE_ID/users/$USERNAME/reset_auth`.For `mysql` databases, the authentication method can be specifying byincluding a key in the JSON body called `mysql_settings` with the `auth_plugin`value specified.The response will be a JSON object with a `user` key. This will be set to anobject containing the standard database user attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Reset_authPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Reset_authPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Reset_authPostResponse | undefined>;
    /**
     * To reset the password for a database user, send a POST request to`/v2/databases/$DATABASE_ID/users/$USERNAME/reset_auth`.For `mysql` databases, the authentication method can be specifying byincluding a key in the JSON body called `mysql_settings` with the `auth_plugin`value specified.The response will be a JSON object with a `user` key. This will be set to anobject containing the standard database user attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Reset_authPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReset_authPostRequestBody(writer: SerializationWriter, reset_authPostRequestBody: Partial<Reset_authPostRequestBody> | undefined | null = {}) : void {
    if (reset_authPostRequestBody) {
        writer.writeObjectValue<Mysql_settings>("mysql_settings", reset_authPostRequestBody.mysqlSettings, serializeMysql_settings);
        writer.writeAdditionalData(reset_authPostRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReset_authPostResponse(writer: SerializationWriter, reset_authPostResponse: Partial<Reset_authPostResponse> | undefined | null = {}) : void {
    if (reset_authPostResponse) {
        writer.writeObjectValue<Database_user>("user", reset_authPostResponse.user, serializeDatabase_user);
        writer.writeAdditionalData(reset_authPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const Reset_authRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/users/{username}/reset_auth";
/**
 * Metadata for all the requests in the request builder.
 */
export const Reset_authRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: Reset_authRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createReset_authPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeReset_authPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
