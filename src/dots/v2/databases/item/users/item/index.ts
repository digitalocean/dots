/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_userFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createUser_settingsFromDiscriminatorValue, serializeDatabase_user, serializeUser_settings, type Database_user, type ErrorEscaped, type User_settings } from '../../../../../models/index.js';
// @ts-ignore
import { Reset_authRequestBuilderRequestsMetadata, type Reset_authRequestBuilder } from './reset_auth/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithUsernameGetResponse}
 */
// @ts-ignore
export function createWithUsernameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithUsernameGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithUsernamePutRequestBody}
 */
// @ts-ignore
export function createWithUsernamePutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithUsernamePutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithUsernamePutResponse}
 */
// @ts-ignore
export function createWithUsernamePutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithUsernamePutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithUsernameGetResponse(withUsernameGetResponse: Partial<WithUsernameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "user": n => { withUsernameGetResponse.user = n.getObjectValue<Database_user>(createDatabase_userFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithUsernamePutRequestBody(withUsernamePutRequestBody: Partial<WithUsernamePutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "settings": n => { withUsernamePutRequestBody.settings = n.getObjectValue<User_settings>(createUser_settingsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithUsernamePutResponse(withUsernamePutResponse: Partial<WithUsernamePutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "user": n => { withUsernamePutResponse.user = n.getObjectValue<Database_user>(createDatabase_userFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithUsernameGetResponse(writer: SerializationWriter, withUsernameGetResponse: Partial<WithUsernameGetResponse> | undefined | null = {}) : void {
    if (withUsernameGetResponse) {
        writer.writeObjectValue<Database_user>("user", withUsernameGetResponse.user, serializeDatabase_user);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithUsernamePutRequestBody(writer: SerializationWriter, withUsernamePutRequestBody: Partial<WithUsernamePutRequestBody> | undefined | null = {}) : void {
    if (withUsernamePutRequestBody) {
        writer.writeObjectValue<User_settings>("settings", withUsernamePutRequestBody.settings, serializeUser_settings);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithUsernamePutResponse(writer: SerializationWriter, withUsernamePutResponse: Partial<WithUsernamePutResponse> | undefined | null = {}) : void {
    if (withUsernamePutResponse) {
        writer.writeObjectValue<Database_user>("user", withUsernamePutResponse.user, serializeDatabase_user);
    }
}
export interface WithUsernameGetResponse extends Parsable {
    /**
     * The user property
     */
    user?: Database_user | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/users/{username}
 */
export interface WithUsernameItemRequestBuilder extends BaseRequestBuilder<WithUsernameItemRequestBuilder> {
    /**
     * The reset_auth property
     */
    get reset_auth(): Reset_authRequestBuilder;
    /**
     * To remove a specific database user, send a DELETE request to`/v2/databases/$DATABASE_ID/users/$USERNAME`.A status of 204 will be given. This indicates that the request was processedsuccessfully, but that no response body is needed.Note: User management is not supported for Redis or Valkey clusters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing database user, send a GET request to`/v2/databases/$DATABASE_ID/users/$USERNAME`.Note: User management is not supported for Redis or Valkey clusters.The response will be a JSON object with a `user` key. This will be set to an objectcontaining the standard database user attributes.For MySQL clusters, additional options will be contained in the `mysql_settings`object.For Kafka clusters, additional options will be contained in the `settings` object.For MongoDB clusters, additional information will be contained in the mongo_user_settings object
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithUsernameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithUsernameGetResponse | undefined>;
    /**
     * To update an existing database user, send a PUT request to `/v2/databases/$DATABASE_ID/users/$USERNAME`with the desired settings.**Note**: only `settings` can be updated via this type of request. If you wish to change the name of a user,you must recreate a new user.The response will be a JSON object with a key called `user`. The value of this will be anobject that contains the name of the update database user, along with the `settings` object thathas been updated.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithUsernamePutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: WithUsernamePutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithUsernamePutResponse | undefined>;
    /**
     * To remove a specific database user, send a DELETE request to`/v2/databases/$DATABASE_ID/users/$USERNAME`.A status of 204 will be given. This indicates that the request was processedsuccessfully, but that no response body is needed.Note: User management is not supported for Redis or Valkey clusters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing database user, send a GET request to`/v2/databases/$DATABASE_ID/users/$USERNAME`.Note: User management is not supported for Redis or Valkey clusters.The response will be a JSON object with a `user` key. This will be set to an objectcontaining the standard database user attributes.For MySQL clusters, additional options will be contained in the `mysql_settings`object.For Kafka clusters, additional options will be contained in the `settings` object.For MongoDB clusters, additional information will be contained in the mongo_user_settings object
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update an existing database user, send a PUT request to `/v2/databases/$DATABASE_ID/users/$USERNAME`with the desired settings.**Note**: only `settings` can be updated via this type of request. If you wish to change the name of a user,you must recreate a new user.The response will be a JSON object with a key called `user`. The value of this will be anobject that contains the name of the update database user, along with the `settings` object thathas been updated.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: WithUsernamePutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithUsernamePutRequestBody extends Parsable {
    /**
     * The settings property
     */
    settings?: User_settings | null;
}
export interface WithUsernamePutResponse extends Parsable {
    /**
     * The user property
     */
    user?: Database_user | null;
}
/**
 * Uri template for the request builder.
 */
export const WithUsernameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/users/{username}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithUsernameItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithUsernameItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    reset_auth: {
        requestsMetadata: Reset_authRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithUsernameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithUsernameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithUsernameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithUsernameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithUsernameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithUsernamePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithUsernamePutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
