/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_userFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoDatabase_user, serializeDatabase_user } from '../../../../models/index.js';
// @ts-ignore
import { WithUsernameItemRequestBuilderNavigationMetadata, WithUsernameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsersGetResponse}
 */
// @ts-ignore
export function createUsersGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoUsersGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsersPostRequestBody}
 */
// @ts-ignore
export function createUsersPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoUsersPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsersPostResponse}
 */
// @ts-ignore
export function createUsersPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoUsersPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsersGetResponse(usersGetResponse = {}) {
    return {
        "users": n => { usersGetResponse.users = n.getCollectionOfObjectValues(createDatabase_userFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsersPostRequestBody(usersPostRequestBody = {}) {
    return {
        ...deserializeIntoDatabase_user(usersPostRequestBody),
        "readonly": n => { usersPostRequestBody.readonly = n.getBooleanValue(); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsersPostResponse(usersPostResponse = {}) {
    return {
        "user": n => { usersPostResponse.user = n.getObjectValue(createDatabase_userFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsersGetResponse(writer, usersGetResponse = {}) {
    if (usersGetResponse) {
        writer.writeCollectionOfObjectValues("users", usersGetResponse.users, serializeDatabase_user);
        writer.writeAdditionalData(usersGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsersPostRequestBody(writer, usersPostRequestBody = {}) {
    if (usersPostRequestBody) {
        serializeDatabase_user(writer, usersPostRequestBody);
        writer.writeBooleanValue("readonly", usersPostRequestBody.readonly);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsersPostResponse(writer, usersPostResponse = {}) {
    if (usersPostResponse) {
        writer.writeObjectValue("user", usersPostResponse.user, serializeDatabase_user);
        writer.writeAdditionalData(usersPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const UsersRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/users";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UsersRequestBuilderNavigationMetadata = {
    byUsername: {
        requestsMetadata: WithUsernameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithUsernameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["username"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UsersRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: UsersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createUsersGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: UsersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createUsersPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUsersPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
