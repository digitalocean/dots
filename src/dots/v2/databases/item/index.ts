/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_cluster_readFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase_cluster_read, type Database_cluster_read, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { AutoscaleRequestBuilderRequestsMetadata, type AutoscaleRequestBuilder } from './autoscale/index.js';
// @ts-ignore
import { BackupsRequestBuilderRequestsMetadata, type BackupsRequestBuilder } from './backups/index.js';
// @ts-ignore
import { CaRequestBuilderRequestsMetadata, type CaRequestBuilder } from './ca/index.js';
// @ts-ignore
import { ConfigRequestBuilderRequestsMetadata, type ConfigRequestBuilder } from './config/index.js';
// @ts-ignore
import { DbsRequestBuilderNavigationMetadata, DbsRequestBuilderRequestsMetadata, type DbsRequestBuilder } from './dbs/index.js';
// @ts-ignore
import { EventsRequestBuilderRequestsMetadata, type EventsRequestBuilder } from './events/index.js';
// @ts-ignore
import { Eviction_policyRequestBuilderRequestsMetadata, type Eviction_policyRequestBuilder } from './eviction_policy/index.js';
// @ts-ignore
import { FirewallRequestBuilderRequestsMetadata, type FirewallRequestBuilder } from './firewall/index.js';
// @ts-ignore
import { IndexesRequestBuilderNavigationMetadata, IndexesRequestBuilderRequestsMetadata, type IndexesRequestBuilder } from './indexes/index.js';
// @ts-ignore
import { Install_updateRequestBuilderRequestsMetadata, type Install_updateRequestBuilder } from './install_update/index.js';
// @ts-ignore
import { LogsinkRequestBuilderNavigationMetadata, LogsinkRequestBuilderRequestsMetadata, type LogsinkRequestBuilder } from './logsink/index.js';
// @ts-ignore
import { MaintenanceRequestBuilderRequestsMetadata, type MaintenanceRequestBuilder } from './maintenance/index.js';
// @ts-ignore
import { MigrateRequestBuilderRequestsMetadata, type MigrateRequestBuilder } from './migrate/index.js';
// @ts-ignore
import { OnlineMigrationRequestBuilderNavigationMetadata, OnlineMigrationRequestBuilderRequestsMetadata, type OnlineMigrationRequestBuilder } from './onlineMigration/index.js';
// @ts-ignore
import { PoolsRequestBuilderNavigationMetadata, PoolsRequestBuilderRequestsMetadata, type PoolsRequestBuilder } from './pools/index.js';
// @ts-ignore
import { ReplicasRequestBuilderNavigationMetadata, ReplicasRequestBuilderRequestsMetadata, type ReplicasRequestBuilder } from './replicas/index.js';
// @ts-ignore
import { ResizeRequestBuilderRequestsMetadata, type ResizeRequestBuilder } from './resize/index.js';
// @ts-ignore
import { SchemaRegistryRequestBuilderNavigationMetadata, SchemaRegistryRequestBuilderRequestsMetadata, type SchemaRegistryRequestBuilder } from './schemaRegistry/index.js';
// @ts-ignore
import { Sql_modeRequestBuilderRequestsMetadata, type Sql_modeRequestBuilder } from './sql_mode/index.js';
// @ts-ignore
import { TopicsRequestBuilderNavigationMetadata, TopicsRequestBuilderRequestsMetadata, type TopicsRequestBuilder } from './topics/index.js';
// @ts-ignore
import { type UpgradeRequestBuilder, UpgradeRequestBuilderRequestsMetadata } from './upgrade/index.js';
// @ts-ignore
import { type UsersRequestBuilder, UsersRequestBuilderNavigationMetadata, UsersRequestBuilderRequestsMetadata } from './users/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDatabase_cluster_uuGetResponse}
 */
// @ts-ignore
export function createWithDatabase_cluster_uuGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDatabase_cluster_uuGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithDatabase_cluster_uuGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDatabase_cluster_uuGetResponse(withDatabase_cluster_uuGetResponse: Partial<WithDatabase_cluster_uuGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "database": n => { withDatabase_cluster_uuGetResponse.database = n.getObjectValue<Database_cluster_read>(createDatabase_cluster_readFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithDatabase_cluster_uuGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDatabase_cluster_uuGetResponse(writer: SerializationWriter, withDatabase_cluster_uuGetResponse: Partial<WithDatabase_cluster_uuGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withDatabase_cluster_uuGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Database_cluster_read>("database", withDatabase_cluster_uuGetResponse.database, serializeDatabase_cluster_read);
    writer.writeAdditionalData(withDatabase_cluster_uuGetResponse.additionalData);
}
export interface WithDatabase_cluster_uuGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The database property
     */
    database?: Database_cluster_read | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}
 */
export interface WithDatabase_cluster_uuItemRequestBuilder extends BaseRequestBuilder<WithDatabase_cluster_uuItemRequestBuilder> {
    /**
     * The autoscale property
     */
    get autoscale(): AutoscaleRequestBuilder;
    /**
     * The backups property
     */
    get backups(): BackupsRequestBuilder;
    /**
     * The ca property
     */
    get ca(): CaRequestBuilder;
    /**
     * The config property
     */
    get config(): ConfigRequestBuilder;
    /**
     * The dbs property
     */
    get dbs(): DbsRequestBuilder;
    /**
     * The events property
     */
    get events(): EventsRequestBuilder;
    /**
     * The eviction_policy property
     */
    get eviction_policy(): Eviction_policyRequestBuilder;
    /**
     * The firewall property
     */
    get firewall(): FirewallRequestBuilder;
    /**
     * The indexes property
     */
    get indexes(): IndexesRequestBuilder;
    /**
     * The install_update property
     */
    get install_update(): Install_updateRequestBuilder;
    /**
     * The logsink property
     */
    get logsink(): LogsinkRequestBuilder;
    /**
     * The maintenance property
     */
    get maintenance(): MaintenanceRequestBuilder;
    /**
     * The migrate property
     */
    get migrate(): MigrateRequestBuilder;
    /**
     * The onlineMigration property
     */
    get onlineMigration(): OnlineMigrationRequestBuilder;
    /**
     * The pools property
     */
    get pools(): PoolsRequestBuilder;
    /**
     * The replicas property
     */
    get replicas(): ReplicasRequestBuilder;
    /**
     * The resize property
     */
    get resize(): ResizeRequestBuilder;
    /**
     * The schemaRegistry property
     */
    get schemaRegistry(): SchemaRegistryRequestBuilder;
    /**
     * The sql_mode property
     */
    get sql_mode(): Sql_modeRequestBuilder;
    /**
     * The topics property
     */
    get topics(): TopicsRequestBuilder;
    /**
     * The upgrade property
     */
    get upgrade(): UpgradeRequestBuilder;
    /**
     * The users property
     */
    get users(): UsersRequestBuilder;
    /**
     * To destroy a specific database, send a DELETE request to `/v2/databases/$DATABASE_ID`.A status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing database cluster, send a GET request to `/v2/databases/$DATABASE_ID`.The response will be a JSON object with a database key. This will be set to an object containing the standard database cluster attributes.The embedded `connection` and `private_connection` objects will contain the information needed to access the database cluster. For multi-node clusters, the `standby_connection` and `standby_private_connection` objects contain the information needed to connect to the cluster's standby node(s).The embedded maintenance_window object will contain information about any scheduled maintenance for the database cluster.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDatabase_cluster_uuGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDatabase_cluster_uuGetResponse | undefined>;
    /**
     * To destroy a specific database, send a DELETE request to `/v2/databases/$DATABASE_ID`.A status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing database cluster, send a GET request to `/v2/databases/$DATABASE_ID`.The response will be a JSON object with a database key. This will be set to an object containing the standard database cluster attributes.The embedded `connection` and `private_connection` objects will contain the information needed to access the database cluster. For multi-node clusters, the `standby_connection` and `standby_private_connection` objects contain the information needed to connect to the cluster's standby node(s).The embedded maintenance_window object will contain information about any scheduled maintenance for the database cluster.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithDatabase_cluster_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithDatabase_cluster_uuItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithDatabase_cluster_uuItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    autoscale: {
        requestsMetadata: AutoscaleRequestBuilderRequestsMetadata,
    },
    backups: {
        requestsMetadata: BackupsRequestBuilderRequestsMetadata,
    },
    ca: {
        requestsMetadata: CaRequestBuilderRequestsMetadata,
    },
    config: {
        requestsMetadata: ConfigRequestBuilderRequestsMetadata,
    },
    dbs: {
        requestsMetadata: DbsRequestBuilderRequestsMetadata,
        navigationMetadata: DbsRequestBuilderNavigationMetadata,
    },
    events: {
        requestsMetadata: EventsRequestBuilderRequestsMetadata,
    },
    eviction_policy: {
        requestsMetadata: Eviction_policyRequestBuilderRequestsMetadata,
    },
    firewall: {
        requestsMetadata: FirewallRequestBuilderRequestsMetadata,
    },
    indexes: {
        requestsMetadata: IndexesRequestBuilderRequestsMetadata,
        navigationMetadata: IndexesRequestBuilderNavigationMetadata,
    },
    install_update: {
        requestsMetadata: Install_updateRequestBuilderRequestsMetadata,
    },
    logsink: {
        requestsMetadata: LogsinkRequestBuilderRequestsMetadata,
        navigationMetadata: LogsinkRequestBuilderNavigationMetadata,
    },
    maintenance: {
        requestsMetadata: MaintenanceRequestBuilderRequestsMetadata,
    },
    migrate: {
        requestsMetadata: MigrateRequestBuilderRequestsMetadata,
    },
    onlineMigration: {
        requestsMetadata: OnlineMigrationRequestBuilderRequestsMetadata,
        navigationMetadata: OnlineMigrationRequestBuilderNavigationMetadata,
    },
    pools: {
        requestsMetadata: PoolsRequestBuilderRequestsMetadata,
        navigationMetadata: PoolsRequestBuilderNavigationMetadata,
    },
    replicas: {
        requestsMetadata: ReplicasRequestBuilderRequestsMetadata,
        navigationMetadata: ReplicasRequestBuilderNavigationMetadata,
    },
    resize: {
        requestsMetadata: ResizeRequestBuilderRequestsMetadata,
    },
    schemaRegistry: {
        requestsMetadata: SchemaRegistryRequestBuilderRequestsMetadata,
        navigationMetadata: SchemaRegistryRequestBuilderNavigationMetadata,
    },
    sql_mode: {
        requestsMetadata: Sql_modeRequestBuilderRequestsMetadata,
    },
    topics: {
        requestsMetadata: TopicsRequestBuilderRequestsMetadata,
        navigationMetadata: TopicsRequestBuilderNavigationMetadata,
    },
    upgrade: {
        requestsMetadata: UpgradeRequestBuilderRequestsMetadata,
    },
    users: {
        requestsMetadata: UsersRequestBuilderRequestsMetadata,
        navigationMetadata: UsersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDatabase_cluster_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithDatabase_cluster_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDatabase_cluster_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDatabase_cluster_uuGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
