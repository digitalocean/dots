/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabaseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase } from '../../../../models/index.js';
// @ts-ignore
import { WithDatabase_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DbsGetResponse}
 */
// @ts-ignore
export function createDbsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDbsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DbsPostResponse}
 */
// @ts-ignore
export function createDbsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDbsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDbsGetResponse(dbsGetResponse = {}) {
    return {
        "dbs": n => { dbsGetResponse.dbs = n.getCollectionOfObjectValues(createDatabaseFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDbsPostResponse(dbsPostResponse = {}) {
    return {
        "db": n => { dbsPostResponse.db = n.getObjectValue(createDatabaseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDbsGetResponse(writer, dbsGetResponse = {}) {
    if (dbsGetResponse) {
        writer.writeCollectionOfObjectValues("dbs", dbsGetResponse.dbs, serializeDatabase);
        writer.writeAdditionalData(dbsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDbsPostResponse(writer, dbsPostResponse = {}) {
    if (dbsPostResponse) {
        writer.writeObjectValue("db", dbsPostResponse.db, serializeDatabase);
        writer.writeAdditionalData(dbsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const DbsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/dbs";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DbsRequestBuilderNavigationMetadata = {
    byDatabase_name: {
        requestsMetadata: WithDatabase_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["database_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DbsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: DbsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDbsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: DbsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDbsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
