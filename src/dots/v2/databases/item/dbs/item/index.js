/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabaseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDatabase_nameGetResponse}
 */
// @ts-ignore
export function createWithDatabase_nameGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithDatabase_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithDatabase_nameGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDatabase_nameGetResponse(withDatabase_nameGetResponse = {}) {
    return {
        "db": n => { withDatabase_nameGetResponse.db = n.getObjectValue(createDatabaseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithDatabase_nameGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDatabase_nameGetResponse(writer, withDatabase_nameGetResponse = {}, isSerializingDerivedType = false) {
    if (!withDatabase_nameGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("db", withDatabase_nameGetResponse.db, serializeDatabase);
    writer.writeAdditionalData(withDatabase_nameGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithDatabase_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/dbs/{database_name}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDatabase_nameItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithDatabase_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDatabase_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithDatabase_nameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
