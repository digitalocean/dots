/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabaseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase, type Database, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDatabase_nameGetResponse}
 */
// @ts-ignore
export function createWithDatabase_nameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDatabase_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDatabase_nameGetResponse(withDatabase_nameGetResponse: Partial<WithDatabase_nameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "db": n => { withDatabase_nameGetResponse.db = n.getObjectValue<Database>(createDatabaseFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDatabase_nameGetResponse(writer: SerializationWriter, withDatabase_nameGetResponse: Partial<WithDatabase_nameGetResponse> | undefined | null = {}) : void {
    if (withDatabase_nameGetResponse) {
        writer.writeObjectValue<Database>("db", withDatabase_nameGetResponse.db, serializeDatabase);
    }
}
export interface WithDatabase_nameGetResponse extends Parsable {
    /**
     * The db property
     */
    db?: Database | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/dbs/{database_name}
 */
export interface WithDatabase_nameItemRequestBuilder extends BaseRequestBuilder<WithDatabase_nameItemRequestBuilder> {
    /**
     * To delete a specific database, send a DELETE request to`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.A status of 204 will be given. This indicates that the request was processedsuccessfully, but that no response body is needed.Note: Database management is not supported for Redis or Valkey clusters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing database cluster, send a GET request to`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.Note: Database management is not supported for Redis or Valkey clusters.The response will be a JSON object with a `db` key. This will be set to an objectcontaining the standard database attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDatabase_nameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDatabase_nameGetResponse | undefined>;
    /**
     * To delete a specific database, send a DELETE request to`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.A status of 204 will be given. This indicates that the request was processedsuccessfully, but that no response body is needed.Note: Database management is not supported for Redis or Valkey clusters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing database cluster, send a GET request to`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.Note: Database management is not supported for Redis or Valkey clusters.The response will be a JSON object with a `db` key. This will be set to an objectcontaining the standard database attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithDatabase_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/dbs/{database_name}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDatabase_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithDatabase_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDatabase_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDatabase_nameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
