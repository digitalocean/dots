/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabaseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase, type Database, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithDatabase_nameItemRequestBuilder, WithDatabase_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DbsGetResponse}
 */
// @ts-ignore
export function createDbsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDbsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DbsPostResponse}
 */
// @ts-ignore
export function createDbsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDbsPostResponse;
}
export interface DbsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The dbs property
     */
    dbs?: Database[] | null;
}
export interface DbsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The db property
     */
    db?: Database | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/dbs
 */
export interface DbsRequestBuilder extends BaseRequestBuilder<DbsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.dbs.item collection
     * @param database_name The name of the database.
     * @returns {WithDatabase_nameItemRequestBuilder}
     */
     byDatabase_name(database_name: string) : WithDatabase_nameItemRequestBuilder;
    /**
     * To list all of the databases in a clusters, send a GET request to`/v2/databases/$DATABASE_ID/dbs`.The result will be a JSON object with a `dbs` key. This will be set to an arrayof database objects, each of which will contain the standard database attributes.Note: Database management is not supported for Redis or Valkey clusters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DbsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DbsGetResponse | undefined>;
    /**
     * To add a new database to an existing cluster, send a POST request to`/v2/databases/$DATABASE_ID/dbs`.Note: Database management is not supported for Redis or Valkey clusters.The response will be a JSON object with a key called `db`. The value of this will bean object that contains the standard attributes associated with a database.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DbsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Database, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DbsPostResponse | undefined>;
    /**
     * To list all of the databases in a clusters, send a GET request to`/v2/databases/$DATABASE_ID/dbs`.The result will be a JSON object with a `dbs` key. This will be set to an arrayof database objects, each of which will contain the standard database attributes.Note: Database management is not supported for Redis or Valkey clusters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To add a new database to an existing cluster, send a POST request to`/v2/databases/$DATABASE_ID/dbs`.Note: Database management is not supported for Redis or Valkey clusters.The response will be a JSON object with a key called `db`. The value of this will bean object that contains the standard attributes associated with a database.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Database, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The deserialization information for the current model
 * @param DbsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDbsGetResponse(dbsGetResponse: Partial<DbsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dbs": n => { dbsGetResponse.dbs = n.getCollectionOfObjectValues<Database>(createDatabaseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param DbsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDbsPostResponse(dbsPostResponse: Partial<DbsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "db": n => { dbsPostResponse.db = n.getObjectValue<Database>(createDatabaseFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param DbsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDbsGetResponse(writer: SerializationWriter, dbsGetResponse: Partial<DbsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dbsGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Database>("dbs", dbsGetResponse.dbs, serializeDatabase);
    writer.writeAdditionalData(dbsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param DbsPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDbsPostResponse(writer: SerializationWriter, dbsPostResponse: Partial<DbsPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dbsPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Database>("db", dbsPostResponse.db, serializeDatabase);
    writer.writeAdditionalData(dbsPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const DbsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/dbs";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DbsRequestBuilderNavigationMetadata: Record<Exclude<keyof DbsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDatabase_name: {
        requestsMetadata: WithDatabase_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["database_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DbsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DbsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDbsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: DbsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDbsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
