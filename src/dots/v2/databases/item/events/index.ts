/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createEvents_logsFromDiscriminatorValue, serializeEvents_logs, type ErrorEscaped, type Events_logs } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventsGetResponse}
 */
// @ts-ignore
export function createEventsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventsGetResponse(eventsGetResponse: Partial<EventsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "events": n => { eventsGetResponse.events = n.getCollectionOfObjectValues<Events_logs>(createEvents_logsFromDiscriminatorValue); },
    }
}
export interface EventsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The events property
     */
    events?: Events_logs[] | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/events
 */
export interface EventsRequestBuilder extends BaseRequestBuilder<EventsRequestBuilder> {
    /**
     * To list all of the cluster events, send a GET request to`/v2/databases/$DATABASE_ID/events`.The result will be a JSON object with a `events` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EventsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EventsGetResponse | undefined>;
    /**
     * To list all of the cluster events, send a GET request to`/v2/databases/$DATABASE_ID/events`.The result will be a JSON object with a `events` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventsGetResponse(writer: SerializationWriter, eventsGetResponse: Partial<EventsGetResponse> | undefined | null = {}) : void {
    if (eventsGetResponse) {
        writer.writeCollectionOfObjectValues<Events_logs>("events", eventsGetResponse.events, serializeEvents_logs);
        writer.writeAdditionalData(eventsGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const EventsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/events";
/**
 * Metadata for all the requests in the request builder.
 */
export const EventsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: EventsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
