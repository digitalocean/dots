/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBackupFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeBackup, type Backup, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BackupsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The backups property
     */
    backups?: Backup[] | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/backups
 */
export interface BackupsRequestBuilder extends BaseRequestBuilder<BackupsRequestBuilder> {
    /**
     * To list all of the available backups of a PostgreSQL or MySQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/backups`.**Note**: Backups are not supported for Redis clusters.The result will be a JSON object with a `backups key`. This will be set to an array of backup objects, each of which will contain the size of the backup and the timestamp at which it was created.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BackupsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BackupsGetResponse | undefined>;
    /**
     * To list all of the available backups of a PostgreSQL or MySQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/backups`.**Note**: Backups are not supported for Redis clusters.The result will be a JSON object with a `backups key`. This will be set to an array of backup objects, each of which will contain the size of the backup and the timestamp at which it was created.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BackupsGetResponse}
 */
// @ts-ignore
export function createBackupsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBackupsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBackupsGetResponse(backupsGetResponse: Partial<BackupsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backups": n => { backupsGetResponse.backups = n.getCollectionOfObjectValues<Backup>(createBackupFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBackupsGetResponse(writer: SerializationWriter, backupsGetResponse: Partial<BackupsGetResponse> | undefined | null = {}) : void {
    if (backupsGetResponse) {
        writer.writeCollectionOfObjectValues<Backup>("backups", backupsGetResponse.backups, serializeBackup);
        writer.writeAdditionalData(backupsGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const BackupsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/backups";
/**
 * Metadata for all the requests in the request builder.
 */
export const BackupsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BackupsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBackupsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
