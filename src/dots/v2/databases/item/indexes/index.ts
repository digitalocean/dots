/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createOpensearch_indexFromDiscriminatorValue, serializeOpensearch_index, type ErrorEscaped, type Opensearch_index } from '../../../../models/index.js';
// @ts-ignore
import { type WithIndex_nameItemRequestBuilder, WithIndex_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndexesGetResponse}
 */
// @ts-ignore
export function createIndexesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndexesGetResponse;
}
/**
 * The deserialization information for the current model
 * @param IndexesGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIndexesGetResponse(indexesGetResponse: Partial<IndexesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "indexes": n => { indexesGetResponse.indexes = n.getCollectionOfObjectValues<Opensearch_index>(createOpensearch_indexFromDiscriminatorValue); },
    }
}
export interface IndexesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The indexes property
     */
    indexes?: Opensearch_index[] | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/indexes
 */
export interface IndexesRequestBuilder extends BaseRequestBuilder<IndexesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.indexes.item collection
     * @param index_name The name of the OpenSearch index.
     * @returns {WithIndex_nameItemRequestBuilder}
     */
     byIndex_name(index_name: string) : WithIndex_nameItemRequestBuilder;
    /**
     * To list all of a OpenSearch cluster's indexes, send a GET request to`/v2/databases/$DATABASE_ID/indexes`.The result will be a JSON object with a `indexes` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<IndexesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<IndexesGetResponse | undefined>;
    /**
     * To list all of a OpenSearch cluster's indexes, send a GET request to`/v2/databases/$DATABASE_ID/indexes`.The result will be a JSON object with a `indexes` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param IndexesGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIndexesGetResponse(writer: SerializationWriter, indexesGetResponse: Partial<IndexesGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!indexesGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Opensearch_index>("indexes", indexesGetResponse.indexes, serializeOpensearch_index);
    writer.writeAdditionalData(indexesGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const IndexesRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/indexes";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const IndexesRequestBuilderNavigationMetadata: Record<Exclude<keyof IndexesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byIndex_name: {
        requestsMetadata: WithIndex_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["index_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IndexesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: IndexesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createIndexesGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
