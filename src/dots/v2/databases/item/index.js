/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_cluster_readFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase_cluster_read } from '../../../models/index.js';
// @ts-ignore
import { BackupsRequestBuilderRequestsMetadata } from './backups/index.js';
// @ts-ignore
import { CaRequestBuilderRequestsMetadata } from './ca/index.js';
// @ts-ignore
import { ConfigRequestBuilderRequestsMetadata } from './config/index.js';
// @ts-ignore
import { DbsRequestBuilderNavigationMetadata, DbsRequestBuilderRequestsMetadata } from './dbs/index.js';
// @ts-ignore
import { EventsRequestBuilderRequestsMetadata } from './events/index.js';
// @ts-ignore
import { Eviction_policyRequestBuilderRequestsMetadata } from './eviction_policy/index.js';
// @ts-ignore
import { FirewallRequestBuilderRequestsMetadata } from './firewall/index.js';
// @ts-ignore
import { IndexesRequestBuilderNavigationMetadata, IndexesRequestBuilderRequestsMetadata } from './indexes/index.js';
// @ts-ignore
import { Install_updateRequestBuilderRequestsMetadata } from './install_update/index.js';
// @ts-ignore
import { LogsinkRequestBuilderNavigationMetadata, LogsinkRequestBuilderRequestsMetadata } from './logsink/index.js';
// @ts-ignore
import { MaintenanceRequestBuilderRequestsMetadata } from './maintenance/index.js';
// @ts-ignore
import { MigrateRequestBuilderRequestsMetadata } from './migrate/index.js';
// @ts-ignore
import { OnlineMigrationRequestBuilderNavigationMetadata, OnlineMigrationRequestBuilderRequestsMetadata } from './onlineMigration/index.js';
// @ts-ignore
import { PoolsRequestBuilderNavigationMetadata, PoolsRequestBuilderRequestsMetadata } from './pools/index.js';
// @ts-ignore
import { ReplicasRequestBuilderNavigationMetadata, ReplicasRequestBuilderRequestsMetadata } from './replicas/index.js';
// @ts-ignore
import { ResizeRequestBuilderRequestsMetadata } from './resize/index.js';
// @ts-ignore
import { SchemaRegistryRequestBuilderNavigationMetadata, SchemaRegistryRequestBuilderRequestsMetadata } from './schemaRegistry/index.js';
// @ts-ignore
import { Sql_modeRequestBuilderRequestsMetadata } from './sql_mode/index.js';
// @ts-ignore
import { TopicsRequestBuilderNavigationMetadata, TopicsRequestBuilderRequestsMetadata } from './topics/index.js';
// @ts-ignore
import { UpgradeRequestBuilderRequestsMetadata } from './upgrade/index.js';
// @ts-ignore
import { UsersRequestBuilderNavigationMetadata, UsersRequestBuilderRequestsMetadata } from './users/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDatabase_cluster_uuGetResponse}
 */
// @ts-ignore
export function createWithDatabase_cluster_uuGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithDatabase_cluster_uuGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDatabase_cluster_uuGetResponse(withDatabase_cluster_uuGetResponse = {}) {
    return {
        "database": n => { withDatabase_cluster_uuGetResponse.database = n.getObjectValue(createDatabase_cluster_readFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDatabase_cluster_uuGetResponse(writer, withDatabase_cluster_uuGetResponse = {}) {
    if (withDatabase_cluster_uuGetResponse) {
        writer.writeObjectValue("database", withDatabase_cluster_uuGetResponse.database, serializeDatabase_cluster_read);
        writer.writeAdditionalData(withDatabase_cluster_uuGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithDatabase_cluster_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithDatabase_cluster_uuItemRequestBuilderNavigationMetadata = {
    backups: {
        requestsMetadata: BackupsRequestBuilderRequestsMetadata,
    },
    ca: {
        requestsMetadata: CaRequestBuilderRequestsMetadata,
    },
    config: {
        requestsMetadata: ConfigRequestBuilderRequestsMetadata,
    },
    dbs: {
        requestsMetadata: DbsRequestBuilderRequestsMetadata,
        navigationMetadata: DbsRequestBuilderNavigationMetadata,
    },
    events: {
        requestsMetadata: EventsRequestBuilderRequestsMetadata,
    },
    eviction_policy: {
        requestsMetadata: Eviction_policyRequestBuilderRequestsMetadata,
    },
    firewall: {
        requestsMetadata: FirewallRequestBuilderRequestsMetadata,
    },
    indexes: {
        requestsMetadata: IndexesRequestBuilderRequestsMetadata,
        navigationMetadata: IndexesRequestBuilderNavigationMetadata,
    },
    install_update: {
        requestsMetadata: Install_updateRequestBuilderRequestsMetadata,
    },
    logsink: {
        requestsMetadata: LogsinkRequestBuilderRequestsMetadata,
        navigationMetadata: LogsinkRequestBuilderNavigationMetadata,
    },
    maintenance: {
        requestsMetadata: MaintenanceRequestBuilderRequestsMetadata,
    },
    migrate: {
        requestsMetadata: MigrateRequestBuilderRequestsMetadata,
    },
    onlineMigration: {
        requestsMetadata: OnlineMigrationRequestBuilderRequestsMetadata,
        navigationMetadata: OnlineMigrationRequestBuilderNavigationMetadata,
    },
    pools: {
        requestsMetadata: PoolsRequestBuilderRequestsMetadata,
        navigationMetadata: PoolsRequestBuilderNavigationMetadata,
    },
    replicas: {
        requestsMetadata: ReplicasRequestBuilderRequestsMetadata,
        navigationMetadata: ReplicasRequestBuilderNavigationMetadata,
    },
    resize: {
        requestsMetadata: ResizeRequestBuilderRequestsMetadata,
    },
    schemaRegistry: {
        requestsMetadata: SchemaRegistryRequestBuilderRequestsMetadata,
        navigationMetadata: SchemaRegistryRequestBuilderNavigationMetadata,
    },
    sql_mode: {
        requestsMetadata: Sql_modeRequestBuilderRequestsMetadata,
    },
    topics: {
        requestsMetadata: TopicsRequestBuilderRequestsMetadata,
        navigationMetadata: TopicsRequestBuilderNavigationMetadata,
    },
    upgrade: {
        requestsMetadata: UpgradeRequestBuilderRequestsMetadata,
    },
    users: {
        requestsMetadata: UsersRequestBuilderRequestsMetadata,
        navigationMetadata: UsersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDatabase_cluster_uuItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithDatabase_cluster_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDatabase_cluster_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithDatabase_cluster_uuGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
