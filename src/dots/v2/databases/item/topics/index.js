/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_topic_verboseFromDiscriminatorValue, createKafka_topicFromDiscriminatorValue, serializeKafka_topic, serializeKafka_topic_create, serializeKafka_topic_verbose } from '../../../../models/index.js';
// @ts-ignore
import { WithTopic_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopicsGetResponse}
 */
// @ts-ignore
export function createTopicsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoTopicsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopicsPostResponse}
 */
// @ts-ignore
export function createTopicsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoTopicsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopicsGetResponse(topicsGetResponse = {}) {
    return {
        "topics": n => { topicsGetResponse.topics = n.getCollectionOfObjectValues(createKafka_topicFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopicsPostResponse(topicsPostResponse = {}) {
    return {
        "topic": n => { topicsPostResponse.topic = n.getObjectValue(createKafka_topic_verboseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopicsGetResponse(writer, topicsGetResponse = {}) {
    if (topicsGetResponse) {
        writer.writeCollectionOfObjectValues("topics", topicsGetResponse.topics, serializeKafka_topic);
        writer.writeAdditionalData(topicsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopicsPostResponse(writer, topicsPostResponse = {}) {
    if (topicsPostResponse) {
        writer.writeObjectValue("topic", topicsPostResponse.topic, serializeKafka_topic_verbose);
        writer.writeAdditionalData(topicsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const TopicsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/topics";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TopicsRequestBuilderNavigationMetadata = {
    byTopic_name: {
        requestsMetadata: WithTopic_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["topic_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TopicsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: TopicsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createTopicsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: TopicsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createTopicsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKafka_topic_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
