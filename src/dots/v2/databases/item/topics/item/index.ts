/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_topic_verboseFromDiscriminatorValue, serializeKafka_topic_update, serializeKafka_topic_verbose, type ErrorEscaped, type Kafka_topic_update, type Kafka_topic_verbose } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithTopic_nameGetResponse}
 */
// @ts-ignore
export function createWithTopic_nameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithTopic_nameGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithTopic_namePutResponse}
 */
// @ts-ignore
export function createWithTopic_namePutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithTopic_namePutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithTopic_nameGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithTopic_nameGetResponse(withTopic_nameGetResponse: Partial<WithTopic_nameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "topic": n => { withTopic_nameGetResponse.topic = n.getObjectValue<Kafka_topic_verbose>(createKafka_topic_verboseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithTopic_namePutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithTopic_namePutResponse(withTopic_namePutResponse: Partial<WithTopic_namePutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "topic": n => { withTopic_namePutResponse.topic = n.getObjectValue<Kafka_topic_verbose>(createKafka_topic_verboseFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithTopic_nameGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithTopic_nameGetResponse(writer: SerializationWriter, withTopic_nameGetResponse: Partial<WithTopic_nameGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withTopic_nameGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Kafka_topic_verbose>("topic", withTopic_nameGetResponse.topic, serializeKafka_topic_verbose);
    writer.writeAdditionalData(withTopic_nameGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithTopic_namePutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithTopic_namePutResponse(writer: SerializationWriter, withTopic_namePutResponse: Partial<WithTopic_namePutResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withTopic_namePutResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Kafka_topic_verbose>("topic", withTopic_namePutResponse.topic, serializeKafka_topic_verbose);
    writer.writeAdditionalData(withTopic_namePutResponse.additionalData);
}
export interface WithTopic_nameGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The topic property
     */
    topic?: Kafka_topic_verbose | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/topics/{topic_name}
 */
export interface WithTopic_nameItemRequestBuilder extends BaseRequestBuilder<WithTopic_nameItemRequestBuilder> {
    /**
     * To delete a single topic within a Kafka cluster, send a DELETE requestto `/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.A status of 204 will be given. This indicates that the request wasprocessed successfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To retrieve a given topic by name from the set of a Kafka cluster's topics,send a GET request to `/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.The result will be a JSON object with a `topic` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithTopic_nameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithTopic_nameGetResponse | undefined>;
    /**
     * To update a topic attached to a Kafka cluster, send a PUT request to`/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.The result will be a JSON object with a `topic` key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithTopic_namePutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Kafka_topic_update, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithTopic_namePutResponse | undefined>;
    /**
     * To delete a single topic within a Kafka cluster, send a DELETE requestto `/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.A status of 204 will be given. This indicates that the request wasprocessed successfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve a given topic by name from the set of a Kafka cluster's topics,send a GET request to `/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.The result will be a JSON object with a `topic` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update a topic attached to a Kafka cluster, send a PUT request to`/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.The result will be a JSON object with a `topic` key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Kafka_topic_update, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithTopic_namePutResponse extends AdditionalDataHolder, Parsable {
    /**
     * The topic property
     */
    topic?: Kafka_topic_verbose | null;
}
/**
 * Uri template for the request builder.
 */
export const WithTopic_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/topics/{topic_name}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithTopic_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithTopic_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithTopic_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithTopic_nameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithTopic_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithTopic_namePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKafka_topic_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
