/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_topic_verboseFromDiscriminatorValue, serializeKafka_topic_update, serializeKafka_topic_verbose } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithTopic_nameGetResponse}
 */
// @ts-ignore
export function createWithTopic_nameGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithTopic_nameGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithTopic_namePutResponse}
 */
// @ts-ignore
export function createWithTopic_namePutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithTopic_namePutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithTopic_nameGetResponse(withTopic_nameGetResponse = {}) {
    return {
        "topic": n => { withTopic_nameGetResponse.topic = n.getObjectValue(createKafka_topic_verboseFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithTopic_namePutResponse(withTopic_namePutResponse = {}) {
    return {
        "topic": n => { withTopic_namePutResponse.topic = n.getObjectValue(createKafka_topic_verboseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithTopic_nameGetResponse(writer, withTopic_nameGetResponse = {}) {
    if (withTopic_nameGetResponse) {
        writer.writeObjectValue("topic", withTopic_nameGetResponse.topic, serializeKafka_topic_verbose);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithTopic_namePutResponse(writer, withTopic_namePutResponse = {}) {
    if (withTopic_namePutResponse) {
        writer.writeObjectValue("topic", withTopic_namePutResponse.topic, serializeKafka_topic_verbose);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithTopic_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/topics/{topic_name}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithTopic_nameItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithTopic_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithTopic_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithTopic_nameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithTopic_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithTopic_namePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKafka_topic_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
