/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_topic_verboseFromDiscriminatorValue, createKafka_topicFromDiscriminatorValue, serializeKafka_topic, serializeKafka_topic_create, serializeKafka_topic_verbose, type ErrorEscaped, type Kafka_topic, type Kafka_topic_create, type Kafka_topic_verbose } from '../../../../models/index.js';
// @ts-ignore
import { type WithTopic_nameItemRequestBuilder, WithTopic_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopicsGetResponse}
 */
// @ts-ignore
export function createTopicsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTopicsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TopicsPostResponse}
 */
// @ts-ignore
export function createTopicsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTopicsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopicsGetResponse(topicsGetResponse: Partial<TopicsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "topics": n => { topicsGetResponse.topics = n.getCollectionOfObjectValues<Kafka_topic>(createKafka_topicFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTopicsPostResponse(topicsPostResponse: Partial<TopicsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "topic": n => { topicsPostResponse.topic = n.getObjectValue<Kafka_topic_verbose>(createKafka_topic_verboseFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopicsGetResponse(writer: SerializationWriter, topicsGetResponse: Partial<TopicsGetResponse> | undefined | null = {}) : void {
    if (topicsGetResponse) {
        writer.writeCollectionOfObjectValues<Kafka_topic>("topics", topicsGetResponse.topics, serializeKafka_topic);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTopicsPostResponse(writer: SerializationWriter, topicsPostResponse: Partial<TopicsPostResponse> | undefined | null = {}) : void {
    if (topicsPostResponse) {
        writer.writeObjectValue<Kafka_topic_verbose>("topic", topicsPostResponse.topic, serializeKafka_topic_verbose);
    }
}
export interface TopicsGetResponse extends Parsable {
    /**
     * The topics property
     */
    topics?: Kafka_topic[] | null;
}
export interface TopicsPostResponse extends Parsable {
    /**
     * The topic property
     */
    topic?: Kafka_topic_verbose | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/topics
 */
export interface TopicsRequestBuilder extends BaseRequestBuilder<TopicsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.databases.item.topics.item collection
     * @param topic_name The name used to identify the Kafka topic.
     * @returns {WithTopic_nameItemRequestBuilder}
     */
     byTopic_name(topic_name: string) : WithTopic_nameItemRequestBuilder;
    /**
     * To list all of a Kafka cluster's topics, send a GET request to`/v2/databases/$DATABASE_ID/topics`.The result will be a JSON object with a `topics` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TopicsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TopicsGetResponse | undefined>;
    /**
     * To create a topic attached to a Kafka cluster, send a POST request to`/v2/databases/$DATABASE_ID/topics`.The result will be a JSON object with a `topic` key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TopicsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Kafka_topic_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TopicsPostResponse | undefined>;
    /**
     * To list all of a Kafka cluster's topics, send a GET request to`/v2/databases/$DATABASE_ID/topics`.The result will be a JSON object with a `topics` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create a topic attached to a Kafka cluster, send a POST request to`/v2/databases/$DATABASE_ID/topics`.The result will be a JSON object with a `topic` key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Kafka_topic_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TopicsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/topics";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TopicsRequestBuilderNavigationMetadata: Record<Exclude<keyof TopicsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTopic_name: {
        requestsMetadata: WithTopic_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["topic_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TopicsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TopicsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTopicsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: TopicsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTopicsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKafka_topic_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
