/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_schema_verboseFromDiscriminatorValue, serializeDatabase_kafka_schema_create, serializeKafka_schema_verbose, type Database_kafka_schema_create, type ErrorEscaped, type Kafka_schema_verbose } from '../../../../models/index.js';
// @ts-ignore
import { ConfigRequestBuilderNavigationMetadata, ConfigRequestBuilderRequestsMetadata, type ConfigRequestBuilder } from './config/index.js';
// @ts-ignore
import { type WithSubject_nameItemRequestBuilder, WithSubject_nameItemRequestBuilderNavigationMetadata, WithSubject_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SchemaRegistryGetResponse}
 */
// @ts-ignore
export function createSchemaRegistryGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSchemaRegistryGetResponse;
}
/**
 * The deserialization information for the current model
 * @param SchemaRegistryGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSchemaRegistryGetResponse(schemaRegistryGetResponse: Partial<SchemaRegistryGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "subjects": n => { schemaRegistryGetResponse.subjects = n.getCollectionOfObjectValues<Kafka_schema_verbose>(createKafka_schema_verboseFromDiscriminatorValue); },
    }
}
export interface SchemaRegistryGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The subjects property
     */
    subjects?: Kafka_schema_verbose[] | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/schema-registry
 */
export interface SchemaRegistryRequestBuilder extends BaseRequestBuilder<SchemaRegistryRequestBuilder> {
    /**
     * The config property
     */
    get config(): ConfigRequestBuilder;
    /**
     * Gets an item from the ApiSdk.v2.databases.item.schemaRegistry.item collection
     * @param subject_name The name of the Kafka schema subject.
     * @returns {WithSubject_nameItemRequestBuilder}
     */
     bySubject_name(subject_name: string) : WithSubject_nameItemRequestBuilder;
    /**
     * To list all schemas for a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SchemaRegistryGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SchemaRegistryGetResponse | undefined>;
    /**
     * To create a Kafka schema for a database cluster, send a POST request to`/v2/databases/$DATABASE_ID/schema-registry`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Kafka_schema_verbose>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Database_kafka_schema_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Kafka_schema_verbose | undefined>;
    /**
     * To list all schemas for a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create a Kafka schema for a database cluster, send a POST request to`/v2/databases/$DATABASE_ID/schema-registry`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Database_kafka_schema_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SchemaRegistryGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSchemaRegistryGetResponse(writer: SerializationWriter, schemaRegistryGetResponse: Partial<SchemaRegistryGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!schemaRegistryGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Kafka_schema_verbose>("subjects", schemaRegistryGetResponse.subjects, serializeKafka_schema_verbose);
    writer.writeAdditionalData(schemaRegistryGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const SchemaRegistryRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SchemaRegistryRequestBuilderNavigationMetadata: Record<Exclude<keyof SchemaRegistryRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubject_name: {
        requestsMetadata: WithSubject_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithSubject_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["subject_name"],
    },
    config: {
        requestsMetadata: ConfigRequestBuilderRequestsMetadata,
        navigationMetadata: ConfigRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SchemaRegistryRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SchemaRegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSchemaRegistryGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: SchemaRegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKafka_schema_verboseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase_kafka_schema_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
