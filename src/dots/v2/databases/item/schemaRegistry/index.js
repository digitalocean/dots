/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_schema_verboseFromDiscriminatorValue, serializeDatabase_kafka_schema_create, serializeKafka_schema_verbose } from '../../../../models/index.js';
// @ts-ignore
import { WithSubject_nameItemRequestBuilderNavigationMetadata, WithSubject_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SchemaRegistryGetResponse}
 */
// @ts-ignore
export function createSchemaRegistryGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoSchemaRegistryGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSchemaRegistryGetResponse(schemaRegistryGetResponse = {}) {
    return {
        "subjects": n => { schemaRegistryGetResponse.subjects = n.getCollectionOfObjectValues(createKafka_schema_verboseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSchemaRegistryGetResponse(writer, schemaRegistryGetResponse = {}) {
    if (schemaRegistryGetResponse) {
        writer.writeCollectionOfObjectValues("subjects", schemaRegistryGetResponse.subjects, serializeKafka_schema_verbose);
        writer.writeAdditionalData(schemaRegistryGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const SchemaRegistryRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SchemaRegistryRequestBuilderNavigationMetadata = {
    bySubject_name: {
        requestsMetadata: WithSubject_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithSubject_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["subject_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SchemaRegistryRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: SchemaRegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createSchemaRegistryGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: SchemaRegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createKafka_schema_verboseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase_kafka_schema_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
