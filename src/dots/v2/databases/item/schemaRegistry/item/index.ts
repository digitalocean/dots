/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKafka_schema_version_verboseFromDiscriminatorValue, type ErrorEscaped, type Kafka_schema_version_verbose } from '../../../../../models/index.js';
// @ts-ignore
import { type VersionsRequestBuilder, VersionsRequestBuilderNavigationMetadata } from './versions/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/schema-registry/{subject_name}
 */
export interface WithSubject_nameItemRequestBuilder extends BaseRequestBuilder<WithSubject_nameItemRequestBuilder> {
    /**
     * The versions property
     */
    get versions(): VersionsRequestBuilder;
    /**
     * To delete a specific schema by subject name for a Kafka cluster, send a DELETE request to`/v2/databases/$DATABASE_ID/schema-registry/$SUBJECT_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get a specific schema by subject name for a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry/$SUBJECT_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Kafka_schema_version_verbose>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Kafka_schema_version_verbose | undefined>;
    /**
     * To delete a specific schema by subject name for a Kafka cluster, send a DELETE request to`/v2/databases/$DATABASE_ID/schema-registry/$SUBJECT_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get a specific schema by subject name for a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry/$SUBJECT_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithSubject_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry/{subject_name}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithSubject_nameItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithSubject_nameItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    versions: {
        navigationMetadata: VersionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithSubject_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithSubject_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithSubject_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKafka_schema_version_verboseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
