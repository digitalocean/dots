/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue } from '../../../../../models/index.js';
// @ts-ignore
import { WithSubject_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigGetResponse}
 */
// @ts-ignore
export function createConfigGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoConfigGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigPutRequestBody}
 */
// @ts-ignore
export function createConfigPutRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoConfigPutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigPutResponse}
 */
// @ts-ignore
export function createConfigPutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoConfigPutResponse;
}
/**
 * The deserialization information for the current model
 * @param ConfigGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigGetResponse(configGetResponse = {}) {
    return {
        "compatibility_level": n => { configGetResponse.compatibilityLevel = n.getEnumValue(ConfigGetResponse_compatibility_levelObject); },
    };
}
/**
 * The deserialization information for the current model
 * @param ConfigPutRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigPutRequestBody(configPutRequestBody = {}) {
    return {
        "compatibility_level": n => { configPutRequestBody.compatibilityLevel = n.getEnumValue(ConfigPutRequestBody_compatibility_levelObject); },
    };
}
/**
 * The deserialization information for the current model
 * @param ConfigPutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigPutResponse(configPutResponse = {}) {
    return {
        "compatibility_level": n => { configPutResponse.compatibilityLevel = n.getEnumValue(ConfigPutResponse_compatibility_levelObject); },
    };
}
/**
 * Serializes information the current object
 * @param ConfigGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigGetResponse(writer, configGetResponse = {}, isSerializingDerivedType = false) {
    if (!configGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("compatibility_level", configGetResponse.compatibilityLevel);
    writer.writeAdditionalData(configGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param ConfigPutRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigPutRequestBody(writer, configPutRequestBody = {}, isSerializingDerivedType = false) {
    if (!configPutRequestBody || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("compatibility_level", configPutRequestBody.compatibilityLevel);
    writer.writeAdditionalData(configPutRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param ConfigPutResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigPutResponse(writer, configPutResponse = {}, isSerializingDerivedType = false) {
    if (!configPutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("compatibility_level", configPutResponse.compatibilityLevel);
    writer.writeAdditionalData(configPutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ConfigRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry/config";
/**
 * The compatibility level of the schema registry.
 */
export const ConfigGetResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
};
/**
 * The compatibility level of the schema registry.
 */
export const ConfigPutRequestBody_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
};
/**
 * The compatibility level of the schema registry.
 */
export const ConfigPutResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConfigRequestBuilderNavigationMetadata = {
    bySubject_name: {
        requestsMetadata: WithSubject_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["subject_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConfigRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createConfigGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createConfigPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConfigPutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
