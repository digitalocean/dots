/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue } from '../../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSubject_nameGetResponse}
 */
// @ts-ignore
export function createWithSubject_nameGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithSubject_nameGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSubject_namePutRequestBody}
 */
// @ts-ignore
export function createWithSubject_namePutRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithSubject_namePutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSubject_namePutResponse}
 */
// @ts-ignore
export function createWithSubject_namePutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithSubject_namePutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithSubject_nameGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSubject_nameGetResponse(withSubject_nameGetResponse = {}) {
    return {
        "compatibility_level": n => { withSubject_nameGetResponse.compatibilityLevel = n.getEnumValue(WithSubject_nameGetResponse_compatibility_levelObject); },
        "subject_name": n => { withSubject_nameGetResponse.subjectName = n.getStringValue(); },
    };
}
/**
 * The deserialization information for the current model
 * @param WithSubject_namePutRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSubject_namePutRequestBody(withSubject_namePutRequestBody = {}) {
    return {
        "compatibility_level": n => { withSubject_namePutRequestBody.compatibilityLevel = n.getEnumValue(WithSubject_namePutRequestBody_compatibility_levelObject); },
    };
}
/**
 * The deserialization information for the current model
 * @param WithSubject_namePutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSubject_namePutResponse(withSubject_namePutResponse = {}) {
    return {
        "compatibility_level": n => { withSubject_namePutResponse.compatibilityLevel = n.getEnumValue(WithSubject_namePutResponse_compatibility_levelObject); },
        "subject_name": n => { withSubject_namePutResponse.subjectName = n.getStringValue(); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSubject_nameGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSubject_nameGetResponse(writer, withSubject_nameGetResponse = {}, isSerializingDerivedType = false) {
    if (!withSubject_nameGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("compatibility_level", withSubject_nameGetResponse.compatibilityLevel);
    writer.writeStringValue("subject_name", withSubject_nameGetResponse.subjectName);
    writer.writeAdditionalData(withSubject_nameGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSubject_namePutRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSubject_namePutRequestBody(writer, withSubject_namePutRequestBody = {}, isSerializingDerivedType = false) {
    if (!withSubject_namePutRequestBody || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("compatibility_level", withSubject_namePutRequestBody.compatibilityLevel);
    writer.writeAdditionalData(withSubject_namePutRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSubject_namePutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSubject_namePutResponse(writer, withSubject_namePutResponse = {}, isSerializingDerivedType = false) {
    if (!withSubject_namePutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("compatibility_level", withSubject_namePutResponse.compatibilityLevel);
    writer.writeStringValue("subject_name", withSubject_namePutResponse.subjectName);
    writer.writeAdditionalData(withSubject_namePutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithSubject_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry/config/{subject_name}";
/**
 * The compatibility level of the schema registry.
 */
export const WithSubject_nameGetResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithSubject_nameItemRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: WithSubject_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithSubject_nameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithSubject_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithSubject_namePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithSubject_namePutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * The compatibility level of the schema registry.
 */
export const WithSubject_namePutRequestBody_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
};
/**
 * The compatibility level of the schema registry.
 */
export const WithSubject_namePutResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
};
/* tslint:enable */
/* eslint-enable */
