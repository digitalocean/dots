/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSubject_nameGetResponse}
 */
// @ts-ignore
export function createWithSubject_nameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSubject_nameGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSubject_namePutRequestBody}
 */
// @ts-ignore
export function createWithSubject_namePutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSubject_namePutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSubject_namePutResponse}
 */
// @ts-ignore
export function createWithSubject_namePutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSubject_namePutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithSubject_nameGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSubject_nameGetResponse(withSubject_nameGetResponse: Partial<WithSubject_nameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "compatibility_level": n => { withSubject_nameGetResponse.compatibilityLevel = n.getEnumValue<WithSubject_nameGetResponse_compatibility_level>(WithSubject_nameGetResponse_compatibility_levelObject); },
        "subject_name": n => { withSubject_nameGetResponse.subjectName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithSubject_namePutRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSubject_namePutRequestBody(withSubject_namePutRequestBody: Partial<WithSubject_namePutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "compatibility_level": n => { withSubject_namePutRequestBody.compatibilityLevel = n.getEnumValue<WithSubject_namePutRequestBody_compatibility_level>(WithSubject_namePutRequestBody_compatibility_levelObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithSubject_namePutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSubject_namePutResponse(withSubject_namePutResponse: Partial<WithSubject_namePutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "compatibility_level": n => { withSubject_namePutResponse.compatibilityLevel = n.getEnumValue<WithSubject_namePutResponse_compatibility_level>(WithSubject_namePutResponse_compatibility_levelObject); },
        "subject_name": n => { withSubject_namePutResponse.subjectName = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSubject_nameGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSubject_nameGetResponse(writer: SerializationWriter, withSubject_nameGetResponse: Partial<WithSubject_nameGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withSubject_nameGetResponse || isSerializingDerivedType) { return; }
    writer.writeEnumValue<WithSubject_nameGetResponse_compatibility_level>("compatibility_level", withSubject_nameGetResponse.compatibilityLevel);
    writer.writeStringValue("subject_name", withSubject_nameGetResponse.subjectName);
    writer.writeAdditionalData(withSubject_nameGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSubject_namePutRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSubject_namePutRequestBody(writer: SerializationWriter, withSubject_namePutRequestBody: Partial<WithSubject_namePutRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withSubject_namePutRequestBody || isSerializingDerivedType) { return; }
    writer.writeEnumValue<WithSubject_namePutRequestBody_compatibility_level>("compatibility_level", withSubject_namePutRequestBody.compatibilityLevel);
    writer.writeAdditionalData(withSubject_namePutRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSubject_namePutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSubject_namePutResponse(writer: SerializationWriter, withSubject_namePutResponse: Partial<WithSubject_namePutResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withSubject_namePutResponse || isSerializingDerivedType) { return; }
    writer.writeEnumValue<WithSubject_namePutResponse_compatibility_level>("compatibility_level", withSubject_namePutResponse.compatibilityLevel);
    writer.writeStringValue("subject_name", withSubject_namePutResponse.subjectName);
    writer.writeAdditionalData(withSubject_namePutResponse.additionalData);
}
export interface WithSubject_nameGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The compatibility level of the schema registry.
     */
    compatibilityLevel?: WithSubject_nameGetResponse_compatibility_level | null;
    /**
     * The name of the schema subject.
     */
    subjectName?: string | null;
}
export type WithSubject_nameGetResponse_compatibility_level = (typeof WithSubject_nameGetResponse_compatibility_levelObject)[keyof typeof WithSubject_nameGetResponse_compatibility_levelObject];
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/schema-registry/config/{subject_name}
 */
export interface WithSubject_nameItemRequestBuilder extends BaseRequestBuilder<WithSubject_nameItemRequestBuilder> {
    /**
     * To retrieve the Schema Registry configuration for a Subject of a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry/config/$SUBJECT_NAME`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithSubject_nameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithSubject_nameGetResponse | undefined>;
    /**
     * To update the Schema Registry configuration for a Subject of a Kafka cluster, send a PUT request to`/v2/databases/$DATABASE_ID/schema-registry/config/$SUBJECT_NAME`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithSubject_namePutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: WithSubject_namePutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithSubject_namePutResponse | undefined>;
    /**
     * To retrieve the Schema Registry configuration for a Subject of a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry/config/$SUBJECT_NAME`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the Schema Registry configuration for a Subject of a Kafka cluster, send a PUT request to`/v2/databases/$DATABASE_ID/schema-registry/config/$SUBJECT_NAME`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: WithSubject_namePutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithSubject_namePutRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The compatibility level of the schema registry.
     */
    compatibilityLevel?: WithSubject_namePutRequestBody_compatibility_level | null;
}
export type WithSubject_namePutRequestBody_compatibility_level = (typeof WithSubject_namePutRequestBody_compatibility_levelObject)[keyof typeof WithSubject_namePutRequestBody_compatibility_levelObject];
export interface WithSubject_namePutResponse extends AdditionalDataHolder, Parsable {
    /**
     * The compatibility level of the schema registry.
     */
    compatibilityLevel?: WithSubject_namePutResponse_compatibility_level | null;
    /**
     * The name of the schema subject.
     */
    subjectName?: string | null;
}
export type WithSubject_namePutResponse_compatibility_level = (typeof WithSubject_namePutResponse_compatibility_levelObject)[keyof typeof WithSubject_namePutResponse_compatibility_levelObject];
/**
 * Uri template for the request builder.
 */
export const WithSubject_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry/config/{subject_name}";
/**
 * The compatibility level of the schema registry.
 */
export const WithSubject_nameGetResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const WithSubject_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithSubject_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithSubject_nameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithSubject_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithSubject_namePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithSubject_namePutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * The compatibility level of the schema registry.
 */
export const WithSubject_namePutRequestBody_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
} as const;
/**
 * The compatibility level of the schema registry.
 */
export const WithSubject_namePutResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
} as const;
/* tslint:enable */
/* eslint-enable */
