/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type WithSubject_nameItemRequestBuilder, WithSubject_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConfigGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The compatibility level of the schema registry.
     */
    compatibilityLevel?: ConfigGetResponse_compatibility_level | null;
}
export type ConfigGetResponse_compatibility_level = (typeof ConfigGetResponse_compatibility_levelObject)[keyof typeof ConfigGetResponse_compatibility_levelObject];
export interface ConfigPutRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The compatibility level of the schema registry.
     */
    compatibilityLevel?: ConfigPutRequestBody_compatibility_level | null;
}
export type ConfigPutRequestBody_compatibility_level = (typeof ConfigPutRequestBody_compatibility_levelObject)[keyof typeof ConfigPutRequestBody_compatibility_levelObject];
export interface ConfigPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * The compatibility level of the schema registry.
     */
    compatibilityLevel?: ConfigPutResponse_compatibility_level | null;
}
export type ConfigPutResponse_compatibility_level = (typeof ConfigPutResponse_compatibility_levelObject)[keyof typeof ConfigPutResponse_compatibility_levelObject];
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/schema-registry/config
 */
export interface ConfigRequestBuilder extends BaseRequestBuilder<ConfigRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.schemaRegistry.config.item collection
     * @param subject_name The name of the Kafka schema subject.
     * @returns {WithSubject_nameItemRequestBuilder}
     */
     bySubject_name(subject_name: string) : WithSubject_nameItemRequestBuilder;
    /**
     * To retrieve the Schema Registry configuration for a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry/config`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConfigGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConfigGetResponse | undefined>;
    /**
     * To update the Schema Registry configuration for a Kafka cluster, send a PUT request to`/v2/databases/$DATABASE_ID/schema-registry/config`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConfigPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: ConfigPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConfigPutResponse | undefined>;
    /**
     * To retrieve the Schema Registry configuration for a Kafka cluster, send a GET request to`/v2/databases/$DATABASE_ID/schema-registry/config`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the Schema Registry configuration for a Kafka cluster, send a PUT request to`/v2/databases/$DATABASE_ID/schema-registry/config`.The response is a JSON object with a `compatibility_level` key, which is set to an objectcontaining any database configuration parameters.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: ConfigPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigGetResponse}
 */
// @ts-ignore
export function createConfigGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigPutRequestBody}
 */
// @ts-ignore
export function createConfigPutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigPutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfigPutResponse}
 */
// @ts-ignore
export function createConfigPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfigPutResponse;
}
/**
 * The deserialization information for the current model
 * @param ConfigGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigGetResponse(configGetResponse: Partial<ConfigGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "compatibility_level": n => { configGetResponse.compatibilityLevel = n.getEnumValue<ConfigGetResponse_compatibility_level>(ConfigGetResponse_compatibility_levelObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ConfigPutRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigPutRequestBody(configPutRequestBody: Partial<ConfigPutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "compatibility_level": n => { configPutRequestBody.compatibilityLevel = n.getEnumValue<ConfigPutRequestBody_compatibility_level>(ConfigPutRequestBody_compatibility_levelObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ConfigPutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfigPutResponse(configPutResponse: Partial<ConfigPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "compatibility_level": n => { configPutResponse.compatibilityLevel = n.getEnumValue<ConfigPutResponse_compatibility_level>(ConfigPutResponse_compatibility_levelObject); },
    }
}
/**
 * Serializes information the current object
 * @param ConfigGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigGetResponse(writer: SerializationWriter, configGetResponse: Partial<ConfigGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!configGetResponse || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ConfigGetResponse_compatibility_level>("compatibility_level", configGetResponse.compatibilityLevel);
    writer.writeAdditionalData(configGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param ConfigPutRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigPutRequestBody(writer: SerializationWriter, configPutRequestBody: Partial<ConfigPutRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!configPutRequestBody || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ConfigPutRequestBody_compatibility_level>("compatibility_level", configPutRequestBody.compatibilityLevel);
    writer.writeAdditionalData(configPutRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param ConfigPutResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfigPutResponse(writer: SerializationWriter, configPutResponse: Partial<ConfigPutResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!configPutResponse || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ConfigPutResponse_compatibility_level>("compatibility_level", configPutResponse.compatibilityLevel);
    writer.writeAdditionalData(configPutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ConfigRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/schema-registry/config";
/**
 * The compatibility level of the schema registry.
 */
export const ConfigGetResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
} as const;
/**
 * The compatibility level of the schema registry.
 */
export const ConfigPutRequestBody_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
} as const;
/**
 * The compatibility level of the schema registry.
 */
export const ConfigPutResponse_compatibility_levelObject = {
    NONE: "NONE",
    BACKWARD: "BACKWARD",
    BACKWARD_TRANSITIVE: "BACKWARD_TRANSITIVE",
    FORWARD: "FORWARD",
    FORWARD_TRANSITIVE: "FORWARD_TRANSITIVE",
    FULL: "FULL",
    FULL_TRANSITIVE: "FULL_TRANSITIVE",
} as const;
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConfigRequestBuilderNavigationMetadata: Record<Exclude<keyof ConfigRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubject_name: {
        requestsMetadata: WithSubject_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["subject_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConfigRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createConfigGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createConfigPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConfigPutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
