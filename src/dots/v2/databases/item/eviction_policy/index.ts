/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, Eviction_policy_model, Eviction_policy_modelObject, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Eviction_policyGetResponse}
 */
// @ts-ignore
export function createEviction_policyGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEviction_policyGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Eviction_policyPutRequestBody}
 */
// @ts-ignore
export function createEviction_policyPutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEviction_policyPutRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEviction_policyGetResponse(eviction_policyGetResponse: Partial<Eviction_policyGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "eviction_policy": n => { eviction_policyGetResponse.evictionPolicy = n.getEnumValue<Eviction_policy_model>(Eviction_policy_modelObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEviction_policyPutRequestBody(eviction_policyPutRequestBody: Partial<Eviction_policyPutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "eviction_policy": n => { eviction_policyPutRequestBody.evictionPolicy = n.getEnumValue<Eviction_policy_model>(Eviction_policy_modelObject); },
    }
}
export interface Eviction_policyGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A string specifying the desired eviction policy for the Redis cluster.- `noeviction`: Don't evict any data, returns error when memory limit is reached.- `allkeys_lru:` Evict any key, least recently used (LRU) first.- `allkeys_random`: Evict keys in a random order.- `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.- `volatile_random`: Evict keys with expiration only in a random order.- `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
     */
    evictionPolicy?: Eviction_policy_model | null;
}
export interface Eviction_policyPutRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A string specifying the desired eviction policy for the Redis cluster.- `noeviction`: Don't evict any data, returns error when memory limit is reached.- `allkeys_lru:` Evict any key, least recently used (LRU) first.- `allkeys_random`: Evict keys in a random order.- `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.- `volatile_random`: Evict keys with expiration only in a random order.- `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.
     */
    evictionPolicy?: Eviction_policy_model | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/eviction_policy
 */
export interface Eviction_policyRequestBuilder extends BaseRequestBuilder<Eviction_policyRequestBuilder> {
    /**
     * To retrieve the configured eviction policy for an existing Redis cluster, send a GET request to `/v2/databases/$DATABASE_ID/eviction_policy`.The response will be a JSON object with an `eviction_policy` key. This will be set to a string representing the eviction policy.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Eviction_policyGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Eviction_policyGetResponse | undefined>;
    /**
     * To configure an eviction policy for an existing Redis cluster, send a PUT request to `/v2/databases/$DATABASE_ID/eviction_policy` specifying the desired policy.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Eviction_policyPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To retrieve the configured eviction policy for an existing Redis cluster, send a GET request to `/v2/databases/$DATABASE_ID/eviction_policy`.The response will be a JSON object with an `eviction_policy` key. This will be set to a string representing the eviction policy.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To configure an eviction policy for an existing Redis cluster, send a PUT request to `/v2/databases/$DATABASE_ID/eviction_policy` specifying the desired policy.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Eviction_policyPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEviction_policyGetResponse(writer: SerializationWriter, eviction_policyGetResponse: Partial<Eviction_policyGetResponse> | undefined | null = {}) : void {
    if (eviction_policyGetResponse) {
        writer.writeEnumValue<Eviction_policy_model>("eviction_policy", eviction_policyGetResponse.evictionPolicy);
        writer.writeAdditionalData(eviction_policyGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEviction_policyPutRequestBody(writer: SerializationWriter, eviction_policyPutRequestBody: Partial<Eviction_policyPutRequestBody> | undefined | null = {}) : void {
    if (eviction_policyPutRequestBody) {
        writer.writeEnumValue<Eviction_policy_model>("eviction_policy", eviction_policyPutRequestBody.evictionPolicy);
        writer.writeAdditionalData(eviction_policyPutRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const Eviction_policyRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/eviction_policy";
/**
 * Metadata for all the requests in the request builder.
 */
export const Eviction_policyRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Eviction_policyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEviction_policyGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: Eviction_policyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEviction_policyPutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
