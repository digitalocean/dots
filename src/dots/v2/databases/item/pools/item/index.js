/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConnection_poolFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeConnection_pool, serializeConnection_pool_update } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithPool_nameGetResponse}
 */
// @ts-ignore
export function createWithPool_nameGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithPool_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithPool_nameGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithPool_nameGetResponse(withPool_nameGetResponse = {}) {
    return {
        "pool": n => { withPool_nameGetResponse.pool = n.getObjectValue(createConnection_poolFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithPool_nameGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithPool_nameGetResponse(writer, withPool_nameGetResponse = {}, isSerializingDerivedType = false) {
    if (!withPool_nameGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("pool", withPool_nameGetResponse.pool, serializeConnection_pool);
    writer.writeAdditionalData(withPool_nameGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithPool_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/pools/{pool_name}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithPool_nameItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithPool_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithPool_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithPool_nameGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithPool_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConnection_pool_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
