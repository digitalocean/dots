/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConnection_poolFromDiscriminatorValue, createConnection_poolsFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeConnection_pool } from '../../../../models/index.js';
// @ts-ignore
import { WithPool_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PoolsPostResponse}
 */
// @ts-ignore
export function createPoolsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoPoolsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPoolsPostResponse(poolsPostResponse = {}) {
    return {
        "pool": n => { poolsPostResponse.pool = n.getObjectValue(createConnection_poolFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePoolsPostResponse(writer, poolsPostResponse = {}) {
    if (poolsPostResponse) {
        writer.writeObjectValue("pool", poolsPostResponse.pool, serializeConnection_pool);
    }
}
/**
 * Uri template for the request builder.
 */
export const PoolsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/pools";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PoolsRequestBuilderNavigationMetadata = {
    byPool_name: {
        requestsMetadata: WithPool_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["pool_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PoolsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: PoolsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createConnection_poolsFromDiscriminatorValue,
    },
    post: {
        uriTemplate: PoolsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createPoolsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConnection_pool,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
