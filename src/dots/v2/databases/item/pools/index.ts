/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createConnection_poolFromDiscriminatorValue, createConnection_poolsFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeConnection_pool, type Connection_pool, type Connection_pools, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithPool_nameItemRequestBuilder, WithPool_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PoolsPostResponse}
 */
// @ts-ignore
export function createPoolsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPoolsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPoolsPostResponse(poolsPostResponse: Partial<PoolsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pool": n => { poolsPostResponse.pool = n.getObjectValue<Connection_pool>(createConnection_poolFromDiscriminatorValue); },
    }
}
export interface PoolsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The pool property
     */
    pool?: Connection_pool | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/pools
 */
export interface PoolsRequestBuilder extends BaseRequestBuilder<PoolsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.pools.item collection
     * @param pool_name The name used to identify the connection pool.
     * @returns {WithPool_nameItemRequestBuilder}
     */
     byPool_name(pool_name: string) : WithPool_nameItemRequestBuilder;
    /**
     * To list all of the connection pools available to a PostgreSQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/pools`.The result will be a JSON object with a `pools` key. This will be set to an array of connection pool objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Connection_pools>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Connection_pools | undefined>;
    /**
     * For PostgreSQL database clusters, connection pools can be used to allow adatabase to share its idle connections. The popular PostgreSQL connectionpooling utility PgBouncer is used to provide this service. [See here for more information](https://docs.digitalocean.com/products/databases/postgresql/how-to/manage-connection-pools/)about how and why to use PgBouncer connection pooling includingdetails about the available transaction modes.To add a new connection pool to a PostgreSQL database cluster, send a POSTrequest to `/v2/databases/$DATABASE_ID/pools` specifying a name for the pool,the user to connect with, the database to connect to, as well as its desiredsize and transaction mode.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PoolsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Connection_pool, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PoolsPostResponse | undefined>;
    /**
     * To list all of the connection pools available to a PostgreSQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/pools`.The result will be a JSON object with a `pools` key. This will be set to an array of connection pool objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * For PostgreSQL database clusters, connection pools can be used to allow adatabase to share its idle connections. The popular PostgreSQL connectionpooling utility PgBouncer is used to provide this service. [See here for more information](https://docs.digitalocean.com/products/databases/postgresql/how-to/manage-connection-pools/)about how and why to use PgBouncer connection pooling includingdetails about the available transaction modes.To add a new connection pool to a PostgreSQL database cluster, send a POSTrequest to `/v2/databases/$DATABASE_ID/pools` specifying a name for the pool,the user to connect with, the database to connect to, as well as its desiredsize and transaction mode.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Connection_pool, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePoolsPostResponse(writer: SerializationWriter, poolsPostResponse: Partial<PoolsPostResponse> | undefined | null = {}) : void {
    if (poolsPostResponse) {
        writer.writeObjectValue<Connection_pool>("pool", poolsPostResponse.pool, serializeConnection_pool);
        writer.writeAdditionalData(poolsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const PoolsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/pools";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PoolsRequestBuilderNavigationMetadata: Record<Exclude<keyof PoolsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPool_name: {
        requestsMetadata: WithPool_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["pool_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PoolsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PoolsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createConnection_poolsFromDiscriminatorValue,
    },
    post: {
        uriTemplate: PoolsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPoolsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConnection_pool,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
