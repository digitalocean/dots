/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCaFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeCa, type Ca, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CaGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ca property
     */
    ca?: Ca | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/ca
 */
export interface CaRequestBuilder extends BaseRequestBuilder<CaRequestBuilder> {
    /**
     * To retrieve the public certificate used to secure the connection to the database cluster send a GET request to`/v2/databases/$DATABASE_ID/ca`.The response will be a JSON object with a `ca` key. This will be set to an objectcontaining the base64 encoding of the public key certificate.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CaGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CaGetResponse | undefined>;
    /**
     * To retrieve the public certificate used to secure the connection to the database cluster send a GET request to`/v2/databases/$DATABASE_ID/ca`.The response will be a JSON object with a `ca` key. This will be set to an objectcontaining the base64 encoding of the public key certificate.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CaGetResponse}
 */
// @ts-ignore
export function createCaGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCaGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCaGetResponse(caGetResponse: Partial<CaGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ca": n => { caGetResponse.ca = n.getObjectValue<Ca>(createCaFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCaGetResponse(writer: SerializationWriter, caGetResponse: Partial<CaGetResponse> | undefined | null = {}) : void {
    if (caGetResponse) {
        writer.writeObjectValue<Ca>("ca", caGetResponse.ca, serializeCa);
        writer.writeAdditionalData(caGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const CaRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/ca";
/**
 * Metadata for all the requests in the request builder.
 */
export const CaRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCaGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
