/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_replica_readFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase_replica, serializeDatabase_replica_read } from '../../../../models/index.js';
// @ts-ignore
import { WithReplica_nameItemRequestBuilderNavigationMetadata, WithReplica_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicasGetResponse}
 */
// @ts-ignore
export function createReplicasGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoReplicasGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicasPostResponse}
 */
// @ts-ignore
export function createReplicasPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoReplicasPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicasGetResponse(replicasGetResponse = {}) {
    return {
        "replicas": n => { replicasGetResponse.replicas = n.getCollectionOfObjectValues(createDatabase_replica_readFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicasPostResponse(replicasPostResponse = {}) {
    return {
        "replica": n => { replicasPostResponse.replica = n.getObjectValue(createDatabase_replica_readFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicasGetResponse(writer, replicasGetResponse = {}) {
    if (replicasGetResponse) {
        writer.writeCollectionOfObjectValues("replicas", replicasGetResponse.replicas, serializeDatabase_replica_read);
        writer.writeAdditionalData(replicasGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicasPostResponse(writer, replicasPostResponse = {}) {
    if (replicasPostResponse) {
        writer.writeObjectValue("replica", replicasPostResponse.replica, serializeDatabase_replica_read);
        writer.writeAdditionalData(replicasPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const ReplicasRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/replicas";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ReplicasRequestBuilderNavigationMetadata = {
    byReplica_name: {
        requestsMetadata: WithReplica_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithReplica_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["replica_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ReplicasRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: ReplicasRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createReplicasGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ReplicasRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createReplicasPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase_replica,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
