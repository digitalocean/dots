/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_replicaFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase_replica, type Database_replica, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { PromoteRequestBuilderRequestsMetadata, type PromoteRequestBuilder } from './promote/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithReplica_nameGetResponse}
 */
// @ts-ignore
export function createWithReplica_nameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithReplica_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithReplica_nameGetResponse(withReplica_nameGetResponse: Partial<WithReplica_nameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "replica": n => { withReplica_nameGetResponse.replica = n.getObjectValue<Database_replica>(createDatabase_replicaFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithReplica_nameGetResponse(writer: SerializationWriter, withReplica_nameGetResponse: Partial<WithReplica_nameGetResponse> | undefined | null = {}) : void {
    if (withReplica_nameGetResponse) {
        writer.writeObjectValue<Database_replica>("replica", withReplica_nameGetResponse.replica, serializeDatabase_replica);
        writer.writeAdditionalData(withReplica_nameGetResponse.additionalData);
    }
}
export interface WithReplica_nameGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The replica property
     */
    replica?: Database_replica | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/replicas/{replica_name}
 */
export interface WithReplica_nameItemRequestBuilder extends BaseRequestBuilder<WithReplica_nameItemRequestBuilder> {
    /**
     * The promote property
     */
    get promote(): PromoteRequestBuilder;
    /**
     * To destroy a specific read-only replica, send a DELETE request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.**Note**: Read-only replicas are not supported for Redis clusters.A status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing database replica, send a GET request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.**Note**: Read-only replicas are not supported for Redis clusters.The response will be a JSON object with a `replica key`. This will be set to an object containing the standard database replica attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithReplica_nameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithReplica_nameGetResponse | undefined>;
    /**
     * To destroy a specific read-only replica, send a DELETE request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.**Note**: Read-only replicas are not supported for Redis clusters.A status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing database replica, send a GET request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.**Note**: Read-only replicas are not supported for Redis clusters.The response will be a JSON object with a `replica key`. This will be set to an object containing the standard database replica attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithReplica_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/replicas/{replica_name}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithReplica_nameItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithReplica_nameItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    promote: {
        requestsMetadata: PromoteRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithReplica_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithReplica_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithReplica_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithReplica_nameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
