/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_replica_readFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase_replica, serializeDatabase_replica_read, type Database_replica, type Database_replica_read, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithReplica_nameItemRequestBuilder, WithReplica_nameItemRequestBuilderNavigationMetadata, WithReplica_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicasGetResponse}
 */
// @ts-ignore
export function createReplicasGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicasGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReplicasPostResponse}
 */
// @ts-ignore
export function createReplicasPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReplicasPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicasGetResponse(replicasGetResponse: Partial<ReplicasGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "replicas": n => { replicasGetResponse.replicas = n.getCollectionOfObjectValues<Database_replica_read>(createDatabase_replica_readFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoReplicasPostResponse(replicasPostResponse: Partial<ReplicasPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "replica": n => { replicasPostResponse.replica = n.getObjectValue<Database_replica_read>(createDatabase_replica_readFromDiscriminatorValue); },
    }
}
export interface ReplicasGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The replicas property
     */
    replicas?: Database_replica_read[] | null;
}
export interface ReplicasPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The replica property
     */
    replica?: Database_replica_read | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/replicas
 */
export interface ReplicasRequestBuilder extends BaseRequestBuilder<ReplicasRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.replicas.item collection
     * @param replica_name The name of the database replica.
     * @returns {WithReplica_nameItemRequestBuilder}
     */
     byReplica_name(replica_name: string) : WithReplica_nameItemRequestBuilder;
    /**
     * To list all of the read-only replicas associated with a database cluster, send a GET request to `/v2/databases/$DATABASE_ID/replicas`.**Note**: Read-only replicas are not supported for Redis or Valkey clusters.The result will be a JSON object with a `replicas` key. This will be set to an array of database replica objects, each of which will contain the standard database replica attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ReplicasGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ReplicasGetResponse | undefined>;
    /**
     * To create a read-only replica for a PostgreSQL or MySQL database cluster, send a POST request to `/v2/databases/$DATABASE_ID/replicas` specifying the name it should be given, the size of the node to be used, and the region where it will be located.**Note**: Read-only replicas are not supported for Redis or Valkey clusters.The response will be a JSON object with a key called `replica`. The value of this will be an object that contains the standard attributes associated with a database replica. The initial value of the read-only replica's `status` attribute will be `forking`. When the replica is ready to receive traffic, this will transition to `active`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ReplicasPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Database_replica, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ReplicasPostResponse | undefined>;
    /**
     * To list all of the read-only replicas associated with a database cluster, send a GET request to `/v2/databases/$DATABASE_ID/replicas`.**Note**: Read-only replicas are not supported for Redis or Valkey clusters.The result will be a JSON object with a `replicas` key. This will be set to an array of database replica objects, each of which will contain the standard database replica attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create a read-only replica for a PostgreSQL or MySQL database cluster, send a POST request to `/v2/databases/$DATABASE_ID/replicas` specifying the name it should be given, the size of the node to be used, and the region where it will be located.**Note**: Read-only replicas are not supported for Redis or Valkey clusters.The response will be a JSON object with a key called `replica`. The value of this will be an object that contains the standard attributes associated with a database replica. The initial value of the read-only replica's `status` attribute will be `forking`. When the replica is ready to receive traffic, this will transition to `active`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Database_replica, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicasGetResponse(writer: SerializationWriter, replicasGetResponse: Partial<ReplicasGetResponse> | undefined | null = {}) : void {
    if (replicasGetResponse) {
        writer.writeCollectionOfObjectValues<Database_replica_read>("replicas", replicasGetResponse.replicas, serializeDatabase_replica_read);
        writer.writeAdditionalData(replicasGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeReplicasPostResponse(writer: SerializationWriter, replicasPostResponse: Partial<ReplicasPostResponse> | undefined | null = {}) : void {
    if (replicasPostResponse) {
        writer.writeObjectValue<Database_replica_read>("replica", replicasPostResponse.replica, serializeDatabase_replica_read);
        writer.writeAdditionalData(replicasPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const ReplicasRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/replicas";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ReplicasRequestBuilderNavigationMetadata: Record<Exclude<keyof ReplicasRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byReplica_name: {
        requestsMetadata: WithReplica_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithReplica_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["replica_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ReplicasRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ReplicasRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createReplicasGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ReplicasRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createReplicasPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase_replica,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
