/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MigratePutRequestBody}
 */
// @ts-ignore
export function createMigratePutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMigratePutRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMigratePutRequestBody(migratePutRequestBody: Partial<MigratePutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "region": n => { migratePutRequestBody.region = n.getStringValue(); },
    }
}
export interface MigratePutRequestBody extends Parsable {
    /**
     * A slug identifier for the region to which the database cluster will be migrated.
     */
    region?: string | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/migrate
 */
export interface MigrateRequestBuilder extends BaseRequestBuilder<MigrateRequestBuilder> {
    /**
     * To migrate a database cluster to a new region, send a `PUT` request to`/v2/databases/$DATABASE_ID/migrate`. The body of the request must specify a`region` attribute.A successful request will receive a 202 Accepted status code with no body inresponse. Querying the database cluster will show that its `status` attributewill now be set to `migrating`. This will transition back to `online` when themigration has completed.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: MigratePutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To migrate a database cluster to a new region, send a `PUT` request to`/v2/databases/$DATABASE_ID/migrate`. The body of the request must specify a`region` attribute.A successful request will receive a 202 Accepted status code with no body inresponse. Querying the database cluster will show that its `status` attributewill now be set to `migrating`. This will transition back to `online` when themigration has completed.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: MigratePutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMigratePutRequestBody(writer: SerializationWriter, migratePutRequestBody: Partial<MigratePutRequestBody> | undefined | null = {}) : void {
    if (migratePutRequestBody) {
        writer.writeStringValue("region", migratePutRequestBody.region);
    }
}
/**
 * Uri template for the request builder.
 */
export const MigrateRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/migrate";
/**
 * Metadata for all the requests in the request builder.
 */
export const MigrateRequestBuilderRequestsMetadata: RequestsMetadata = {
    put: {
        uriTemplate: MigrateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMigratePutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
