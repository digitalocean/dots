/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createFirewall_ruleFromDiscriminatorValue, serializeFirewall_rule, type ErrorEscaped, type Firewall_rule } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FirewallGetResponse}
 */
// @ts-ignore
export function createFirewallGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFirewallGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FirewallPutRequestBody}
 */
// @ts-ignore
export function createFirewallPutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFirewallPutRequestBody;
}
/**
 * The deserialization information for the current model
 * @param FirewallGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFirewallGetResponse(firewallGetResponse: Partial<FirewallGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "rules": n => { firewallGetResponse.rules = n.getCollectionOfObjectValues<Firewall_rule>(createFirewall_ruleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param FirewallPutRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFirewallPutRequestBody(firewallPutRequestBody: Partial<FirewallPutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "rules": n => { firewallPutRequestBody.rules = n.getCollectionOfObjectValues<Firewall_rule>(createFirewall_ruleFromDiscriminatorValue); },
    }
}
export interface FirewallGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The rules property
     */
    rules?: Firewall_rule[] | null;
}
export interface FirewallPutRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The rules property
     */
    rules?: Firewall_rule[] | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/firewall
 */
export interface FirewallRequestBuilder extends BaseRequestBuilder<FirewallRequestBuilder> {
    /**
     * To list all of a database cluster's firewall rules (known as "trusted sources" in the control panel), send a GET request to `/v2/databases/$DATABASE_ID/firewall`.The result will be a JSON object with a `rules` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FirewallGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FirewallGetResponse | undefined>;
    /**
     * To update a database cluster's firewall rules (known as "trusted sources" in the control panel), send a PUT request to `/v2/databases/$DATABASE_ID/firewall` specifying which resources should be able to open connections to the database. You may limit connections to specific Droplets, Kubernetes clusters, or IP addresses. When a tag is provided, any Droplet or Kubernetes node with that tag applied to it will have access. The firewall is limited to 100 rules (or trusted sources). When possible, we recommend [placing your databases into a VPC network](https://docs.digitalocean.com/products/networking/vpc/) to limit access to them instead of using a firewall.A successful
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: FirewallPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To list all of a database cluster's firewall rules (known as "trusted sources" in the control panel), send a GET request to `/v2/databases/$DATABASE_ID/firewall`.The result will be a JSON object with a `rules` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update a database cluster's firewall rules (known as "trusted sources" in the control panel), send a PUT request to `/v2/databases/$DATABASE_ID/firewall` specifying which resources should be able to open connections to the database. You may limit connections to specific Droplets, Kubernetes clusters, or IP addresses. When a tag is provided, any Droplet or Kubernetes node with that tag applied to it will have access. The firewall is limited to 100 rules (or trusted sources). When possible, we recommend [placing your databases into a VPC network](https://docs.digitalocean.com/products/networking/vpc/) to limit access to them instead of using a firewall.A successful
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: FirewallPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param FirewallGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFirewallGetResponse(writer: SerializationWriter, firewallGetResponse: Partial<FirewallGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!firewallGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Firewall_rule>("rules", firewallGetResponse.rules, serializeFirewall_rule);
    writer.writeAdditionalData(firewallGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param FirewallPutRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFirewallPutRequestBody(writer: SerializationWriter, firewallPutRequestBody: Partial<FirewallPutRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!firewallPutRequestBody || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Firewall_rule>("rules", firewallPutRequestBody.rules, serializeFirewall_rule);
    writer.writeAdditionalData(firewallPutRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const FirewallRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/firewall";
/**
 * Metadata for all the requests in the request builder.
 */
export const FirewallRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FirewallRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFirewallGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: FirewallRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeFirewallPutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
