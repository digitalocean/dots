/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createLogsink_verboseFromDiscriminatorValue, serializeLogsink_update, serializeLogsink_verbose } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithLogsink_GetResponse}
 */
// @ts-ignore
export function createWithLogsink_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithLogsink_GetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithLogsink_GetResponse(withLogsink_GetResponse = {}) {
    return {
        "sink": n => { withLogsink_GetResponse.sink = n.getObjectValue(createLogsink_verboseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithLogsink_GetResponse(writer, withLogsink_GetResponse = {}) {
    if (withLogsink_GetResponse) {
        writer.writeObjectValue("sink", withLogsink_GetResponse.sink, serializeLogsink_verbose);
        writer.writeAdditionalData(withLogsink_GetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithLogsink_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/logsink/{logsink_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithLogsink_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithLogsink_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory: "ArrayBuffer",
    },
    get: {
        uriTemplate: WithLogsink_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithLogsink_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithLogsink_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory: "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeLogsink_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
