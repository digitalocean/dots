/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createLogsink_verboseFromDiscriminatorValue, serializeLogsink_create, serializeLogsink_verbose, type ErrorEscaped, type Logsink_create, type Logsink_verbose } from '../../../../models/index.js';
// @ts-ignore
import { type WithLogsink_ItemRequestBuilder, WithLogsink_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LogsinkGetResponse}
 */
// @ts-ignore
export function createLogsinkGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLogsinkGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LogsinkPostResponse}
 */
// @ts-ignore
export function createLogsinkPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLogsinkPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLogsinkGetResponse(logsinkGetResponse: Partial<LogsinkGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "sinks": n => { logsinkGetResponse.sinks = n.getCollectionOfObjectValues<Logsink_verbose>(createLogsink_verboseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLogsinkPostResponse(logsinkPostResponse: Partial<LogsinkPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "sink": n => { logsinkPostResponse.sink = n.getObjectValue<Logsink_verbose>(createLogsink_verboseFromDiscriminatorValue); },
    }
}
export interface LogsinkGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The sinks property
     */
    sinks?: Logsink_verbose[] | null;
}
export interface LogsinkPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The sink property
     */
    sink?: Logsink_verbose | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/{database_cluster_uuid}/logsink
 */
export interface LogsinkRequestBuilder extends BaseRequestBuilder<LogsinkRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.databases.item.logsink.item collection
     * @param logsink_id A unique identifier for a logsink of a database cluster
     * @returns {WithLogsink_ItemRequestBuilder}
     */
     byLogsink_id(logsink_id: string) : WithLogsink_ItemRequestBuilder;
    /**
     * To list logsinks for a database cluster, send a GET request to`/v2/databases/$DATABASE_ID/logsink`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<LogsinkGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LogsinkGetResponse | undefined>;
    /**
     * To create logsink for a database cluster, send a POST request to`/v2/databases/$DATABASE_ID/logsink`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<LogsinkPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Logsink_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LogsinkPostResponse | undefined>;
    /**
     * To list logsinks for a database cluster, send a GET request to`/v2/databases/$DATABASE_ID/logsink`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create logsink for a database cluster, send a POST request to`/v2/databases/$DATABASE_ID/logsink`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Logsink_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLogsinkGetResponse(writer: SerializationWriter, logsinkGetResponse: Partial<LogsinkGetResponse> | undefined | null = {}) : void {
    if (logsinkGetResponse) {
        writer.writeCollectionOfObjectValues<Logsink_verbose>("sinks", logsinkGetResponse.sinks, serializeLogsink_verbose);
        writer.writeAdditionalData(logsinkGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLogsinkPostResponse(writer: SerializationWriter, logsinkPostResponse: Partial<LogsinkPostResponse> | undefined | null = {}) : void {
    if (logsinkPostResponse) {
        writer.writeObjectValue<Logsink_verbose>("sink", logsinkPostResponse.sink, serializeLogsink_verbose);
        writer.writeAdditionalData(logsinkPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const LogsinkRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/logsink";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const LogsinkRequestBuilderNavigationMetadata: Record<Exclude<keyof LogsinkRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byLogsink_id: {
        requestsMetadata: WithLogsink_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["logsink_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LogsinkRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: LogsinkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createLogsinkGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: LogsinkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createLogsinkPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeLogsink_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
