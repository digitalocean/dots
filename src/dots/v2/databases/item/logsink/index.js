/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createLogsink_verboseFromDiscriminatorValue, serializeLogsink_create, serializeLogsink_verbose } from '../../../../models/index.js';
// @ts-ignore
import { WithLogsink_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LogsinkGetResponse}
 */
// @ts-ignore
export function createLogsinkGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoLogsinkGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LogsinkPostResponse}
 */
// @ts-ignore
export function createLogsinkPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoLogsinkPostResponse;
}
/**
 * The deserialization information for the current model
 * @param LogsinkGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLogsinkGetResponse(logsinkGetResponse = {}) {
    return {
        "sinks": n => { logsinkGetResponse.sinks = n.getCollectionOfObjectValues(createLogsink_verboseFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param LogsinkPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLogsinkPostResponse(logsinkPostResponse = {}) {
    return {
        "sink": n => { logsinkPostResponse.sink = n.getObjectValue(createLogsink_verboseFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param LogsinkGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLogsinkGetResponse(writer, logsinkGetResponse = {}, isSerializingDerivedType = false) {
    if (!logsinkGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeCollectionOfObjectValues("sinks", logsinkGetResponse.sinks, serializeLogsink_verbose);
    writer.writeAdditionalData(logsinkGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param LogsinkPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLogsinkPostResponse(writer, logsinkPostResponse = {}, isSerializingDerivedType = false) {
    if (!logsinkPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("sink", logsinkPostResponse.sink, serializeLogsink_verbose);
    writer.writeAdditionalData(logsinkPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const LogsinkRequestBuilderUriTemplate = "{+baseurl}/v2/databases/{database_cluster_uuid}/logsink";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const LogsinkRequestBuilderNavigationMetadata = {
    byLogsink_id: {
        requestsMetadata: WithLogsink_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["logsink_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LogsinkRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: LogsinkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createLogsinkGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: LogsinkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createLogsinkPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeLogsink_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
