/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_backupFromDiscriminatorValue, createDatabase_clusterFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoDatabase_cluster, serializeDatabase_backup, serializeDatabase_cluster } from '../../models/index.js';
// @ts-ignore
import { WithDatabase_cluster_uuItemRequestBuilderNavigationMetadata, WithDatabase_cluster_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { MetricsRequestBuilderNavigationMetadata } from './metrics/index.js';
// @ts-ignore
import { OptionsRequestBuilderRequestsMetadata } from './options/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DatabasesGetResponse}
 */
// @ts-ignore
export function createDatabasesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDatabasesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DatabasesPostRequestBody}
 */
// @ts-ignore
export function createDatabasesPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoDatabasesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DatabasesPostResponse}
 */
// @ts-ignore
export function createDatabasesPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDatabasesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDatabasesGetResponse(databasesGetResponse = {}) {
    return {
        "databases": n => { databasesGetResponse.databases = n.getCollectionOfObjectValues(createDatabase_clusterFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDatabasesPostRequestBody(databasesPostRequestBody = {}) {
    return {
        ...deserializeIntoDatabase_cluster(databasesPostRequestBody),
        "backup_restore": n => { databasesPostRequestBody.backupRestore = n.getObjectValue(createDatabase_backupFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDatabasesPostResponse(databasesPostResponse = {}) {
    return {
        "database": n => { databasesPostResponse.database = n.getObjectValue(createDatabase_clusterFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDatabasesGetResponse(writer, databasesGetResponse = {}) {
    if (databasesGetResponse) {
        writer.writeCollectionOfObjectValues("databases", databasesGetResponse.databases, serializeDatabase_cluster);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDatabasesPostRequestBody(writer, databasesPostRequestBody = {}) {
    if (databasesPostRequestBody) {
        serializeDatabase_cluster(writer, databasesPostRequestBody);
        writer.writeObjectValue("backup_restore", databasesPostRequestBody.backupRestore, serializeDatabase_backup);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDatabasesPostResponse(writer, databasesPostResponse = {}) {
    if (databasesPostResponse) {
        writer.writeObjectValue("database", databasesPostResponse.database, serializeDatabase_cluster);
    }
}
/**
 * Uri template for the request builder.
 */
export const DatabasesRequestBuilderUriTemplate = "{+baseurl}/v2/databases{?tag_name*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DatabasesRequestBuilderGetQueryParametersMapper = {
    "tagName": "tag_name",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DatabasesRequestBuilderNavigationMetadata = {
    byDatabase_cluster_uuid: {
        requestsMetadata: WithDatabase_cluster_uuItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithDatabase_cluster_uuItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["database_cluster_uuid"],
    },
    metrics: {
        navigationMetadata: MetricsRequestBuilderNavigationMetadata,
    },
    optionsPath: {
        requestsMetadata: OptionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DatabasesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: DatabasesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDatabasesGetResponseFromDiscriminatorValue,
        queryParametersMapper: DatabasesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DatabasesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDatabasesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabasesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
