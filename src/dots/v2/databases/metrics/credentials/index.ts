/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDatabase_metrics_credentialsFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDatabase_metrics_credentials, type Database_metrics_credentials, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CredentialsGetResponse}
 */
// @ts-ignore
export function createCredentialsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCredentialsGetResponse;
}
export interface CredentialsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The credentials property
     */
    credentials?: Database_metrics_credentials | null;
}
/**
 * Builds and executes requests for operations under /v2/databases/metrics/credentials
 */
export interface CredentialsRequestBuilder extends BaseRequestBuilder<CredentialsRequestBuilder> {
    /**
     * To show the credentials for all database clusters' metrics endpoints, send a GET request to `/v2/databases/metrics/credentials`. The result will be a JSON object with a `credentials` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CredentialsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CredentialsGetResponse | undefined>;
    /**
     * To update the credentials for all database clusters' metrics endpoints, send a PUT request to `/v2/databases/metrics/credentials`. A successful request will receive a 204 No Content status code  with no body in response.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Database_metrics_credentials, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show the credentials for all database clusters' metrics endpoints, send a GET request to `/v2/databases/metrics/credentials`. The result will be a JSON object with a `credentials` key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the credentials for all database clusters' metrics endpoints, send a PUT request to `/v2/databases/metrics/credentials`. A successful request will receive a 204 No Content status code  with no body in response.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Database_metrics_credentials, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The deserialization information for the current model
 * @param CredentialsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCredentialsGetResponse(credentialsGetResponse: Partial<CredentialsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "credentials": n => { credentialsGetResponse.credentials = n.getObjectValue<Database_metrics_credentials>(createDatabase_metrics_credentialsFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param CredentialsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCredentialsGetResponse(writer: SerializationWriter, credentialsGetResponse: Partial<CredentialsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!credentialsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Database_metrics_credentials>("credentials", credentialsGetResponse.credentials, serializeDatabase_metrics_credentials);
    writer.writeAdditionalData(credentialsGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CredentialsRequestBuilderUriTemplate = "{+baseurl}/v2/databases/metrics/credentials";
/**
 * Metadata for all the requests in the request builder.
 */
export const CredentialsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CredentialsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCredentialsGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: CredentialsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDatabase_metrics_credentials,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
