/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKeyFromDiscriminatorValue, serializeKey, type ErrorEscaped, type Key } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAccess_keyGetResponse}
 */
// @ts-ignore
export function createWithAccess_keyGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAccess_keyGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAccess_keyPatchResponse}
 */
// @ts-ignore
export function createWithAccess_keyPatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAccess_keyPatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAccess_keyPutResponse}
 */
// @ts-ignore
export function createWithAccess_keyPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAccess_keyPutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAccess_keyGetResponse(withAccess_keyGetResponse: Partial<WithAccess_keyGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "keys": n => { withAccess_keyGetResponse.keys = n.getCollectionOfObjectValues<Key>(createKeyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAccess_keyPatchResponse(withAccess_keyPatchResponse: Partial<WithAccess_keyPatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { withAccess_keyPatchResponse.key = n.getObjectValue<Key>(createKeyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAccess_keyPutResponse(withAccess_keyPutResponse: Partial<WithAccess_keyPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { withAccess_keyPutResponse.key = n.getObjectValue<Key>(createKeyFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAccess_keyGetResponse(writer: SerializationWriter, withAccess_keyGetResponse: Partial<WithAccess_keyGetResponse> | undefined | null = {}) : void {
    if (withAccess_keyGetResponse) {
        writer.writeCollectionOfObjectValues<Key>("keys", withAccess_keyGetResponse.keys, serializeKey);
        writer.writeAdditionalData(withAccess_keyGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAccess_keyPatchResponse(writer: SerializationWriter, withAccess_keyPatchResponse: Partial<WithAccess_keyPatchResponse> | undefined | null = {}) : void {
    if (withAccess_keyPatchResponse) {
        writer.writeObjectValue<Key>("key", withAccess_keyPatchResponse.key, serializeKey);
        writer.writeAdditionalData(withAccess_keyPatchResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAccess_keyPutResponse(writer: SerializationWriter, withAccess_keyPutResponse: Partial<WithAccess_keyPutResponse> | undefined | null = {}) : void {
    if (withAccess_keyPutResponse) {
        writer.writeObjectValue<Key>("key", withAccess_keyPutResponse.key, serializeKey);
        writer.writeAdditionalData(withAccess_keyPutResponse.additionalData);
    }
}
export interface WithAccess_keyGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The keys property
     */
    keys?: Key[] | null;
}
/**
 * Builds and executes requests for operations under /v2/spaces/keys/{access_key}
 */
export interface WithAccess_keyItemRequestBuilder extends BaseRequestBuilder<WithAccess_keyItemRequestBuilder> {
    /**
     * To delete a Spaces Access Key, send a DELETE request to `/v2/spaces/keys/$ACCESS_KEY`.A successful request will return a `204 No Content` status code.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get a Spaces Access Key, send a GET request to `/v2/spaces/keys/$ACCESS_KEY`.A successful request will return the Access Key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAccess_keyGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithAccess_keyGetResponse | undefined>;
    /**
     * To update Spaces Access Key, send a PUT or PATCH request to `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert afullaccess key to a scoped key or vice versa. You can only update the name of the key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAccess_keyPatchResponse>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Key, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithAccess_keyPatchResponse | undefined>;
    /**
     * To update Spaces Access Key, send a PUT or PATCH request to `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert afullaccess key to a scoped key or vice versa. You can only update the name of the key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAccess_keyPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Key, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithAccess_keyPutResponse | undefined>;
    /**
     * To delete a Spaces Access Key, send a DELETE request to `/v2/spaces/keys/$ACCESS_KEY`.A successful request will return a `204 No Content` status code.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get a Spaces Access Key, send a GET request to `/v2/spaces/keys/$ACCESS_KEY`.A successful request will return the Access Key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update Spaces Access Key, send a PUT or PATCH request to `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert afullaccess key to a scoped key or vice versa. You can only update the name of the key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Key, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update Spaces Access Key, send a PUT or PATCH request to `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert afullaccess key to a scoped key or vice versa. You can only update the name of the key.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Key, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithAccess_keyPatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The key property
     */
    key?: Key | null;
}
export interface WithAccess_keyPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The key property
     */
    key?: Key | null;
}
/**
 * Uri template for the request builder.
 */
export const WithAccess_keyItemRequestBuilderUriTemplate = "{+baseurl}/v2/spaces/keys/{access_key}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAccess_keyItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAccess_keyGetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAccess_keyPatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKey,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAccess_keyPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKey,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
