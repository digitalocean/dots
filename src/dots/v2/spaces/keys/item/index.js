/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKeyFromDiscriminatorValue, serializeKey } from '../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAccess_keyGetResponse}
 */
// @ts-ignore
export function createWithAccess_keyGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAccess_keyGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAccess_keyPatchResponse}
 */
// @ts-ignore
export function createWithAccess_keyPatchResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAccess_keyPatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAccess_keyPutResponse}
 */
// @ts-ignore
export function createWithAccess_keyPutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAccess_keyPutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAccess_keyGetResponse(withAccess_keyGetResponse = {}) {
    return {
        "keys": n => { withAccess_keyGetResponse.keys = n.getCollectionOfObjectValues(createKeyFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAccess_keyPatchResponse(withAccess_keyPatchResponse = {}) {
    return {
        "key": n => { withAccess_keyPatchResponse.key = n.getObjectValue(createKeyFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAccess_keyPutResponse(withAccess_keyPutResponse = {}) {
    return {
        "key": n => { withAccess_keyPutResponse.key = n.getObjectValue(createKeyFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAccess_keyGetResponse(writer, withAccess_keyGetResponse = {}) {
    if (withAccess_keyGetResponse) {
        writer.writeCollectionOfObjectValues("keys", withAccess_keyGetResponse.keys, serializeKey);
        writer.writeAdditionalData(withAccess_keyGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAccess_keyPatchResponse(writer, withAccess_keyPatchResponse = {}) {
    if (withAccess_keyPatchResponse) {
        writer.writeObjectValue("key", withAccess_keyPatchResponse.key, serializeKey);
        writer.writeAdditionalData(withAccess_keyPatchResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAccess_keyPutResponse(writer, withAccess_keyPutResponse = {}) {
    if (withAccess_keyPutResponse) {
        writer.writeObjectValue("key", withAccess_keyPutResponse.key, serializeKey);
        writer.writeAdditionalData(withAccess_keyPutResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithAccess_keyItemRequestBuilderUriTemplate = "{+baseurl}/v2/spaces/keys/{access_key}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAccess_keyItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithAccess_keyGetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue,
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithAccess_keyPatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKey,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WithAccess_keyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue,
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithAccess_keyPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKey,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
