/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKey_create_responseFromDiscriminatorValue, createKeyFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeKey, serializeKey_create_response, serializeMeta_properties, serializePage_links, type ErrorEscaped, type Key, type Key_create_response, type Meta_properties, type Page_links } from '../../../models/index.js';
// @ts-ignore
import { type WithAccess_keyItemRequestBuilder, WithAccess_keyItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysGetResponse}
 */
// @ts-ignore
export function createKeysGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeysGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysPostResponse}
 */
// @ts-ignore
export function createKeysPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeysPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysGetResponse(keysGetResponse: Partial<KeysGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "keys": n => { keysGetResponse.keys = n.getCollectionOfObjectValues<Key>(createKeyFromDiscriminatorValue); },
        "links": n => { keysGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { keysGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysPostResponse(keysPostResponse: Partial<KeysPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { keysPostResponse.key = n.getObjectValue<Key_create_response>(createKey_create_responseFromDiscriminatorValue); },
    }
}
export interface KeysGetResponse extends Parsable {
    /**
     * The keys property
     */
    keys?: Key[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface KeysPostResponse extends Parsable {
    /**
     * The key property
     */
    key?: Key_create_response | null;
}
/**
 * Builds and executes requests for operations under /v2/spaces/keys
 */
export interface KeysRequestBuilder extends BaseRequestBuilder<KeysRequestBuilder> {
    /**
     * Gets an item from the dots.v2.spaces.keys.item collection
     * @param access_key The access key's ID.
     * @returns {WithAccess_keyItemRequestBuilder}
     */
     byAccess_key(access_key: string) : WithAccess_keyItemRequestBuilder;
    /**
     * To list Spaces Access Key, send a GET request to `/v2/spaces/keys`. Sort parameter must be used with Sort Direction.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeysGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<KeysRequestBuilderGetQueryParameters> | undefined) : Promise<KeysGetResponse | undefined>;
    /**
     * To create a new Spaces Access Key, send a POST request to `/v2/spaces/keys`.At the moment, you cannot mix a fullaccess permission with scoped permissions.A fullaccess permission will be prioritized if fullaccess and scoped permissions are both added.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeysPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Key, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<KeysPostResponse | undefined>;
    /**
     * To list Spaces Access Key, send a GET request to `/v2/spaces/keys`. Sort parameter must be used with Sort Direction.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<KeysRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new Spaces Access Key, send a POST request to `/v2/spaces/keys`.At the moment, you cannot mix a fullaccess permission with scoped permissions.A fullaccess permission will be prioritized if fullaccess and scoped permissions are both added.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Key, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list Spaces Access Key, send a GET request to `/v2/spaces/keys`. Sort parameter must be used with Sort Direction.
 */
export interface KeysRequestBuilderGetQueryParameters {
    /**
     * The bucket's name.
     */
    bucket?: string;
    /**
     * The access key's name.
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * The permission of the access key. Possible values are `read`, `readwrite`, `fullaccess`, or an empty string.
     */
    permission?: string;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * The field to sort by.
     */
    sort?: string;
    /**
     * The direction to sort by. Possible values are `asc` or `desc`.
     */
    sortDirection?: string;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysGetResponse(writer: SerializationWriter, keysGetResponse: Partial<KeysGetResponse> | undefined | null = {}) : void {
    if (keysGetResponse) {
        writer.writeCollectionOfObjectValues<Key>("keys", keysGetResponse.keys, serializeKey);
        writer.writeObjectValue<Page_links>("links", keysGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", keysGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysPostResponse(writer: SerializationWriter, keysPostResponse: Partial<KeysPostResponse> | undefined | null = {}) : void {
    if (keysPostResponse) {
        writer.writeObjectValue<Key_create_response>("key", keysPostResponse.key, serializeKey_create_response);
    }
}
/**
 * Uri template for the request builder.
 */
export const KeysRequestBuilderUriTemplate = "{+baseurl}/v2/spaces/keys{?bucket*,name*,page*,per_page*,permission*,sort*,sort_direction*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const KeysRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
    "sortDirection": "sort_direction",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KeysRequestBuilderNavigationMetadata: Record<Exclude<keyof KeysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAccess_key: {
        requestsMetadata: WithAccess_keyItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["access_key"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KeysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKeysGetResponseFromDiscriminatorValue,
        queryParametersMapper: KeysRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKeysPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKey,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
