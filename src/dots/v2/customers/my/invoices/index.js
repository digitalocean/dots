/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createInvoice_previewFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeInvoice_preview, serializeMeta_properties, serializePage_links } from '../../../../models/index.js';
// @ts-ignore
import { WithInvoice_uuItemRequestBuilderNavigationMetadata, WithInvoice_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InvoicesGetResponse}
 */
// @ts-ignore
export function createInvoicesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoInvoicesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInvoicesGetResponse(invoicesGetResponse = {}) {
    return {
        "invoice_preview": n => { invoicesGetResponse.invoicePreview = n.getObjectValue(createInvoice_previewFromDiscriminatorValue); },
        "invoices": n => { invoicesGetResponse.invoices = n.getCollectionOfObjectValues(createInvoice_previewFromDiscriminatorValue); },
        "links": n => { invoicesGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { invoicesGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInvoicesGetResponse(writer, invoicesGetResponse = {}) {
    if (invoicesGetResponse) {
        writer.writeObjectValue("invoice_preview", invoicesGetResponse.invoicePreview, serializeInvoice_preview);
        writer.writeCollectionOfObjectValues("invoices", invoicesGetResponse.invoices, serializeInvoice_preview);
        writer.writeObjectValue("links", invoicesGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", invoicesGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Uri template for the request builder.
 */
export const InvoicesRequestBuilderUriTemplate = "{+baseurl}/v2/customers/my/invoices{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InvoicesRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const InvoicesRequestBuilderNavigationMetadata = {
    byInvoice_uuid: {
        requestsMetadata: WithInvoice_uuItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithInvoice_uuItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["invoice_uuid"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InvoicesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: InvoicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createInvoicesGetResponseFromDiscriminatorValue,
        queryParametersMapper: InvoicesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
