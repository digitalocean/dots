/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createInvoice_itemFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeInvoice_item, serializeMeta_properties, serializePage_links, type ErrorEscaped, type Invoice_item, type Meta_properties, type Page_links } from '../../../../../models/index.js';
// @ts-ignore
import { CsvRequestBuilderRequestsMetadata, type CsvRequestBuilder } from './csvEscaped/index.js';
// @ts-ignore
import { PdfRequestBuilderRequestsMetadata, type PdfRequestBuilder } from './pdf/index.js';
// @ts-ignore
import { SummaryRequestBuilderRequestsMetadata, type SummaryRequestBuilder } from './summary/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithInvoice_uuGetResponse}
 */
// @ts-ignore
export function createWithInvoice_uuGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithInvoice_uuGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithInvoice_uuGetResponse(withInvoice_uuGetResponse: Partial<WithInvoice_uuGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "invoice_items": n => { withInvoice_uuGetResponse.invoiceItems = n.getCollectionOfObjectValues<Invoice_item>(createInvoice_itemFromDiscriminatorValue); },
        "links": n => { withInvoice_uuGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { withInvoice_uuGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithInvoice_uuGetResponse(writer: SerializationWriter, withInvoice_uuGetResponse: Partial<WithInvoice_uuGetResponse> | undefined | null = {}) : void {
    if (withInvoice_uuGetResponse) {
        writer.writeCollectionOfObjectValues<Invoice_item>("invoice_items", withInvoice_uuGetResponse.invoiceItems, serializeInvoice_item);
        writer.writeObjectValue<Page_links>("links", withInvoice_uuGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", withInvoice_uuGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(withInvoice_uuGetResponse.additionalData);
    }
}
export interface WithInvoice_uuGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The invoice_items property
     */
    invoiceItems?: Invoice_item[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
/**
 * Builds and executes requests for operations under /v2/customers/my/invoices/{invoice_uuid}
 */
export interface WithInvoice_uuItemRequestBuilder extends BaseRequestBuilder<WithInvoice_uuItemRequestBuilder> {
    /**
     * The csv property
     */
    get csv(): CsvRequestBuilder;
    /**
     * The pdf property
     */
    get pdf(): PdfRequestBuilder;
    /**
     * The summary property
     */
    get summary(): SummaryRequestBuilder;
    /**
     * To retrieve the invoice items for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithInvoice_uuGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<WithInvoice_uuItemRequestBuilderGetQueryParameters> | undefined) : Promise<WithInvoice_uuGetResponse | undefined>;
    /**
     * To retrieve the invoice items for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithInvoice_uuItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve the invoice items for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID`.
 */
export interface WithInvoice_uuItemRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const WithInvoice_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/customers/my/invoices/{invoice_uuid}{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithInvoice_uuItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithInvoice_uuItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithInvoice_uuItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    csv: {
        requestsMetadata: CsvRequestBuilderRequestsMetadata,
    },
    pdf: {
        requestsMetadata: PdfRequestBuilderRequestsMetadata,
    },
    summary: {
        requestsMetadata: SummaryRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithInvoice_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithInvoice_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithInvoice_uuGetResponseFromDiscriminatorValue,
        queryParametersMapper: WithInvoice_uuItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
