/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createInvoice_itemFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeInvoice_item, serializeMeta_properties, serializePage_links } from '../../../../../models/index.js';
// @ts-ignore
import { CsvRequestBuilderRequestsMetadata } from './csvEscaped/index.js';
// @ts-ignore
import { PdfRequestBuilderRequestsMetadata } from './pdf/index.js';
// @ts-ignore
import { SummaryRequestBuilderRequestsMetadata } from './summary/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithInvoice_uuGetResponse}
 */
// @ts-ignore
export function createWithInvoice_uuGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithInvoice_uuGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithInvoice_uuGetResponse(withInvoice_uuGetResponse = {}) {
    return {
        "invoice_items": n => { withInvoice_uuGetResponse.invoiceItems = n.getCollectionOfObjectValues(createInvoice_itemFromDiscriminatorValue); },
        "links": n => { withInvoice_uuGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { withInvoice_uuGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithInvoice_uuGetResponse(writer, withInvoice_uuGetResponse = {}) {
    if (withInvoice_uuGetResponse) {
        writer.writeCollectionOfObjectValues("invoice_items", withInvoice_uuGetResponse.invoiceItems, serializeInvoice_item);
        writer.writeObjectValue("links", withInvoice_uuGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", withInvoice_uuGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithInvoice_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/customers/my/invoices/{invoice_uuid}{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithInvoice_uuItemRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithInvoice_uuItemRequestBuilderNavigationMetadata = {
    csv: {
        requestsMetadata: CsvRequestBuilderRequestsMetadata,
    },
    pdf: {
        requestsMetadata: PdfRequestBuilderRequestsMetadata,
    },
    summary: {
        requestsMetadata: SummaryRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithInvoice_uuItemRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: WithInvoice_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithInvoice_uuGetResponseFromDiscriminatorValue,
        queryParametersMapper: WithInvoice_uuItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
