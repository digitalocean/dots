/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCheckFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoCheck_updatable, serializeCheck, serializeCheck_updatable, serializeMeta_properties, serializePage_links } from '../../../models/index.js';
// @ts-ignore
import { WithCheck_ItemRequestBuilderNavigationMetadata, WithCheck_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChecksGetResponse}
 */
// @ts-ignore
export function createChecksGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoChecksGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChecksPostRequestBody}
 */
// @ts-ignore
export function createChecksPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoChecksPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChecksPostResponse}
 */
// @ts-ignore
export function createChecksPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoChecksPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ChecksGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChecksGetResponse(checksGetResponse = {}) {
    return {
        "checks": n => { checksGetResponse.checks = n.getCollectionOfObjectValues(createCheckFromDiscriminatorValue); },
        "links": n => { checksGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { checksGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param ChecksPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChecksPostRequestBody(checksPostRequestBody = {}) {
    return {
        ...deserializeIntoCheck_updatable(checksPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @param ChecksPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChecksPostResponse(checksPostResponse = {}) {
    return {
        "check": n => { checksPostResponse.check = n.getObjectValue(createCheckFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param ChecksGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChecksGetResponse(writer, checksGetResponse = {}, isSerializingDerivedType = false) {
    if (!checksGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeCollectionOfObjectValues("checks", checksGetResponse.checks, serializeCheck);
    writer.writeObjectValue("links", checksGetResponse.links, serializePage_links);
    writer.writeObjectValue("meta", checksGetResponse.meta, serializeMeta_properties);
    writer.writeAdditionalData(checksGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param ChecksPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChecksPostRequestBody(writer, checksPostRequestBody = {}, isSerializingDerivedType = false) {
    if (!checksPostRequestBody || isSerializingDerivedType) {
        return;
    }
    serializeCheck_updatable(writer, checksPostRequestBody, isSerializingDerivedType);
}
/**
 * Serializes information the current object
 * @param ChecksPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChecksPostResponse(writer, checksPostResponse = {}, isSerializingDerivedType = false) {
    if (!checksPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("check", checksPostResponse.check, serializeCheck);
    writer.writeAdditionalData(checksPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ChecksRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChecksRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChecksRequestBuilderNavigationMetadata = {
    byCheck_id: {
        requestsMetadata: WithCheck_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithCheck_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["check_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChecksRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: ChecksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createChecksGetResponseFromDiscriminatorValue,
        queryParametersMapper: ChecksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ChecksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createChecksPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChecksPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
