/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCheckFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoCheck_updatable, serializeCheck, serializeCheck_updatable, type Check, type Check_updatable, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { AlertsRequestBuilderNavigationMetadata, AlertsRequestBuilderRequestsMetadata, type AlertsRequestBuilder } from './alerts/index.js';
// @ts-ignore
import { StateRequestBuilderRequestsMetadata, type StateRequestBuilder } from './state/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCheck_GetResponse}
 */
// @ts-ignore
export function createWithCheck_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCheck_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCheck_PutRequestBody}
 */
// @ts-ignore
export function createWithCheck_PutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCheck_PutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCheck_PutResponse}
 */
// @ts-ignore
export function createWithCheck_PutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCheck_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCheck_GetResponse(withCheck_GetResponse: Partial<WithCheck_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "check": n => { withCheck_GetResponse.check = n.getObjectValue<Check>(createCheckFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCheck_PutRequestBody(withCheck_PutRequestBody: Partial<WithCheck_PutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCheck_updatable(withCheck_PutRequestBody),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCheck_PutResponse(withCheck_PutResponse: Partial<WithCheck_PutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "check": n => { withCheck_PutResponse.check = n.getObjectValue<Check>(createCheckFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCheck_GetResponse(writer: SerializationWriter, withCheck_GetResponse: Partial<WithCheck_GetResponse> | undefined | null = {}) : void {
    if (withCheck_GetResponse) {
        writer.writeObjectValue<Check>("check", withCheck_GetResponse.check, serializeCheck);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCheck_PutRequestBody(writer: SerializationWriter, withCheck_PutRequestBody: Partial<WithCheck_PutRequestBody> | undefined | null = {}) : void {
    if (withCheck_PutRequestBody) {
        serializeCheck_updatable(writer, withCheck_PutRequestBody)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCheck_PutResponse(writer: SerializationWriter, withCheck_PutResponse: Partial<WithCheck_PutResponse> | undefined | null = {}) : void {
    if (withCheck_PutResponse) {
        writer.writeObjectValue<Check>("check", withCheck_PutResponse.check, serializeCheck);
    }
}
export interface WithCheck_GetResponse extends Parsable {
    /**
     * The check property
     */
    check?: Check | null;
}
/**
 * Builds and executes requests for operations under /v2/uptime/checks/{check_id}
 */
export interface WithCheck_ItemRequestBuilder extends BaseRequestBuilder<WithCheck_ItemRequestBuilder> {
    /**
     * The alerts property
     */
    get alerts(): AlertsRequestBuilder;
    /**
     * The state property
     */
    get state(): StateRequestBuilder;
    /**
     * To delete an Uptime check, send a DELETE request to `/v2/uptime/checks/$CHECK_ID`. A 204 statuscode with no body will be returned in response to a successful request.Deleting a check will also delete alerts associated with the check.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing check, send a GET request to `/v2/uptime/checks/$CHECK_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCheck_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCheck_GetResponse | undefined>;
    /**
     * To update the settings of an Uptime check, send a PUT request to `/v2/uptime/checks/$CHECK_ID`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCheck_PutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: WithCheck_PutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCheck_PutResponse | undefined>;
    /**
     * To delete an Uptime check, send a DELETE request to `/v2/uptime/checks/$CHECK_ID`. A 204 statuscode with no body will be returned in response to a successful request.Deleting a check will also delete alerts associated with the check.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing check, send a GET request to `/v2/uptime/checks/$CHECK_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the settings of an Uptime check, send a PUT request to `/v2/uptime/checks/$CHECK_ID`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: WithCheck_PutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithCheck_PutRequestBody extends Check_updatable, Parsable {
}
export interface WithCheck_PutResponse extends Parsable {
    /**
     * The check property
     */
    check?: Check | null;
}
/**
 * Uri template for the request builder.
 */
export const WithCheck_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks/{check_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithCheck_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithCheck_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    alerts: {
        requestsMetadata: AlertsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertsRequestBuilderNavigationMetadata,
    },
    state: {
        requestsMetadata: StateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCheck_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithCheck_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCheck_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCheck_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithCheck_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCheck_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithCheck_PutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
