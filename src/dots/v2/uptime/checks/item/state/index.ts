/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createStateFromDiscriminatorValue, serializeState, type ErrorEscaped, type State } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StateGetResponse}
 */
// @ts-ignore
export function createStateGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStateGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStateGetResponse(stateGetResponse: Partial<StateGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "state": n => { stateGetResponse.state = n.getObjectValue<State>(createStateFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStateGetResponse(writer: SerializationWriter, stateGetResponse: Partial<StateGetResponse> | undefined | null = {}) : void {
    if (stateGetResponse) {
        writer.writeObjectValue<State>("state", stateGetResponse.state, serializeState);
    }
}
export interface StateGetResponse extends Parsable {
    /**
     * The state property
     */
    state?: State | null;
}
/**
 * Builds and executes requests for operations under /v2/uptime/checks/{check_id}/state
 */
export interface StateRequestBuilder extends BaseRequestBuilder<StateRequestBuilder> {
    /**
     * To show information about an existing check's state, send a GET request to `/v2/uptime/checks/$CHECK_ID/state`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<StateGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<StateGetResponse | undefined>;
    /**
     * To show information about an existing check's state, send a GET request to `/v2/uptime/checks/$CHECK_ID/state`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const StateRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks/{check_id}/state";
/**
 * Metadata for all the requests in the request builder.
 */
export const StateRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: StateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createStateGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
