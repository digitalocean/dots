/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAlertFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoAlert_updatable, serializeAlert, serializeAlert_updatable } from '../../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAlert_GetResponse}
 */
// @ts-ignore
export function createWithAlert_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAlert_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAlert_PutRequestBody}
 */
// @ts-ignore
export function createWithAlert_PutRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAlert_PutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAlert_PutResponse}
 */
// @ts-ignore
export function createWithAlert_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAlert_PutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithAlert_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAlert_GetResponse(withAlert_GetResponse = {}) {
    return {
        "alert": n => { withAlert_GetResponse.alert = n.getObjectValue(createAlertFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param WithAlert_PutRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAlert_PutRequestBody(withAlert_PutRequestBody = {}) {
    return {
        ...deserializeIntoAlert_updatable(withAlert_PutRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @param WithAlert_PutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAlert_PutResponse(withAlert_PutResponse = {}) {
    return {
        "alert": n => { withAlert_PutResponse.alert = n.getObjectValue(createAlertFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithAlert_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAlert_GetResponse(writer, withAlert_GetResponse = {}, isSerializingDerivedType = false) {
    if (!withAlert_GetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("alert", withAlert_GetResponse.alert, serializeAlert);
    writer.writeAdditionalData(withAlert_GetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithAlert_PutRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAlert_PutRequestBody(writer, withAlert_PutRequestBody = {}, isSerializingDerivedType = false) {
    if (!withAlert_PutRequestBody || isSerializingDerivedType) {
        return;
    }
    serializeAlert_updatable(writer, withAlert_PutRequestBody, isSerializingDerivedType);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithAlert_PutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAlert_PutResponse(writer, withAlert_PutResponse = {}, isSerializingDerivedType = false) {
    if (!withAlert_PutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("alert", withAlert_PutResponse.alert, serializeAlert);
    writer.writeAdditionalData(withAlert_PutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithAlert_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks/{check_id}/alerts/{alert_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAlert_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithAlert_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithAlert_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithAlert_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithAlert_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithAlert_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithAlert_PutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
