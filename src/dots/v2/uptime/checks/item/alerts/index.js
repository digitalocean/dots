/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAlertFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoAlert, serializeAlert, serializeMeta_properties, serializePage_links } from '../../../../../models/index.js';
// @ts-ignore
import { WithAlert_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertsGetResponse}
 */
// @ts-ignore
export function createAlertsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoAlertsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertsPostRequestBody}
 */
// @ts-ignore
export function createAlertsPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoAlertsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertsPostResponse}
 */
// @ts-ignore
export function createAlertsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoAlertsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlertsGetResponse(alertsGetResponse = {}) {
    return {
        "alerts": n => { alertsGetResponse.alerts = n.getCollectionOfObjectValues(createAlertFromDiscriminatorValue); },
        "links": n => { alertsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { alertsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlertsPostRequestBody(alertsPostRequestBody = {}) {
    return {
        ...deserializeIntoAlert(alertsPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlertsPostResponse(alertsPostResponse = {}) {
    return {
        "alert": n => { alertsPostResponse.alert = n.getObjectValue(createAlertFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlertsGetResponse(writer, alertsGetResponse = {}) {
    if (alertsGetResponse) {
        writer.writeCollectionOfObjectValues("alerts", alertsGetResponse.alerts, serializeAlert);
        writer.writeObjectValue("links", alertsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", alertsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(alertsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlertsPostRequestBody(writer, alertsPostRequestBody = {}) {
    if (alertsPostRequestBody) {
        serializeAlert(writer, alertsPostRequestBody);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlertsPostResponse(writer, alertsPostResponse = {}) {
    if (alertsPostResponse) {
        writer.writeObjectValue("alert", alertsPostResponse.alert, serializeAlert);
        writer.writeAdditionalData(alertsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const AlertsRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks/{check_id}/alerts{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AlertsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AlertsRequestBuilderNavigationMetadata = {
    byAlert_id: {
        requestsMetadata: WithAlert_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["alert_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AlertsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: AlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createAlertsGetResponseFromDiscriminatorValue,
        queryParametersMapper: AlertsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createAlertsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAlertsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
