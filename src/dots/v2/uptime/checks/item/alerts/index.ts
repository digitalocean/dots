/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAlertFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoAlert, serializeAlert, serializeMeta_properties, serializePage_links, type Alert, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../../../models/index.js';
// @ts-ignore
import { type WithAlert_ItemRequestBuilder, WithAlert_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlertsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The alerts property
     */
    alerts?: Alert[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface AlertsPostRequestBody extends Alert, Parsable {
}
export interface AlertsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The alert property
     */
    alert?: Alert | null;
}
/**
 * Builds and executes requests for operations under /v2/uptime/checks/{check_id}/alerts
 */
export interface AlertsRequestBuilder extends BaseRequestBuilder<AlertsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.uptime.checks.item.alerts.item collection
     * @param alert_id A unique identifier for an alert.
     * @returns {WithAlert_ItemRequestBuilder}
     */
     byAlert_id(alert_id: Guid) : WithAlert_ItemRequestBuilder;
    /**
     * To list all of the alerts for an Uptime check, send a GET request to `/v2/uptime/checks/$CHECK_ID/alerts`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AlertsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AlertsRequestBuilderGetQueryParameters> | undefined) : Promise<AlertsGetResponse | undefined>;
    /**
     * To create an Uptime alert, send a POST request to `/v2/uptime/checks/$CHECK_ID/alerts` specifying the attributesin the table below in the JSON body.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AlertsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: AlertsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AlertsPostResponse | undefined>;
    /**
     * To list all of the alerts for an Uptime check, send a GET request to `/v2/uptime/checks/$CHECK_ID/alerts`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AlertsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create an Uptime alert, send a POST request to `/v2/uptime/checks/$CHECK_ID/alerts` specifying the attributesin the table below in the JSON body.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AlertsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the alerts for an Uptime check, send a GET request to `/v2/uptime/checks/$CHECK_ID/alerts`.
 */
export interface AlertsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertsGetResponse}
 */
// @ts-ignore
export function createAlertsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlertsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertsPostRequestBody}
 */
// @ts-ignore
export function createAlertsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlertsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertsPostResponse}
 */
// @ts-ignore
export function createAlertsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlertsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlertsGetResponse(alertsGetResponse: Partial<AlertsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "alerts": n => { alertsGetResponse.alerts = n.getCollectionOfObjectValues<Alert>(createAlertFromDiscriminatorValue); },
        "links": n => { alertsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { alertsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlertsPostRequestBody(alertsPostRequestBody: Partial<AlertsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlert(alertsPostRequestBody),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlertsPostResponse(alertsPostResponse: Partial<AlertsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "alert": n => { alertsPostResponse.alert = n.getObjectValue<Alert>(createAlertFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlertsGetResponse(writer: SerializationWriter, alertsGetResponse: Partial<AlertsGetResponse> | undefined | null = {}) : void {
    if (alertsGetResponse) {
        writer.writeCollectionOfObjectValues<Alert>("alerts", alertsGetResponse.alerts, serializeAlert);
        writer.writeObjectValue<Page_links>("links", alertsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", alertsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(alertsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlertsPostRequestBody(writer: SerializationWriter, alertsPostRequestBody: Partial<AlertsPostRequestBody> | undefined | null = {}) : void {
    if (alertsPostRequestBody) {
        serializeAlert(writer, alertsPostRequestBody)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlertsPostResponse(writer: SerializationWriter, alertsPostResponse: Partial<AlertsPostResponse> | undefined | null = {}) : void {
    if (alertsPostResponse) {
        writer.writeObjectValue<Alert>("alert", alertsPostResponse.alert, serializeAlert);
        writer.writeAdditionalData(alertsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const AlertsRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks/{check_id}/alerts{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AlertsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AlertsRequestBuilderNavigationMetadata: Record<Exclude<keyof AlertsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAlert_id: {
        requestsMetadata: WithAlert_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["alert_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AlertsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAlertsGetResponseFromDiscriminatorValue,
        queryParametersMapper: AlertsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAlertsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAlertsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
