/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCheckFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoCheck_updatable, serializeCheck, serializeCheck_updatable } from '../../../../models/index.js';
// @ts-ignore
import { AlertsRequestBuilderNavigationMetadata, AlertsRequestBuilderRequestsMetadata } from './alerts/index.js';
// @ts-ignore
import { StateRequestBuilderRequestsMetadata } from './state/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCheck_GetResponse}
 */
// @ts-ignore
export function createWithCheck_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithCheck_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCheck_PutRequestBody}
 */
// @ts-ignore
export function createWithCheck_PutRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithCheck_PutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCheck_PutResponse}
 */
// @ts-ignore
export function createWithCheck_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithCheck_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCheck_GetResponse(withCheck_GetResponse = {}) {
    return {
        "check": n => { withCheck_GetResponse.check = n.getObjectValue(createCheckFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCheck_PutRequestBody(withCheck_PutRequestBody = {}) {
    return {
        ...deserializeIntoCheck_updatable(withCheck_PutRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCheck_PutResponse(withCheck_PutResponse = {}) {
    return {
        "check": n => { withCheck_PutResponse.check = n.getObjectValue(createCheckFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCheck_GetResponse(writer, withCheck_GetResponse = {}) {
    if (withCheck_GetResponse) {
        writer.writeObjectValue("check", withCheck_GetResponse.check, serializeCheck);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCheck_PutRequestBody(writer, withCheck_PutRequestBody = {}) {
    if (withCheck_PutRequestBody) {
        serializeCheck_updatable(writer, withCheck_PutRequestBody);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCheck_PutResponse(writer, withCheck_PutResponse = {}) {
    if (withCheck_PutResponse) {
        writer.writeObjectValue("check", withCheck_PutResponse.check, serializeCheck);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithCheck_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks/{check_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithCheck_ItemRequestBuilderNavigationMetadata = {
    alerts: {
        requestsMetadata: AlertsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertsRequestBuilderNavigationMetadata,
    },
    state: {
        requestsMetadata: StateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCheck_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithCheck_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCheck_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithCheck_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithCheck_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithCheck_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithCheck_PutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
