/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCheckFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoCheck_updatable, serializeCheck, serializeCheck_updatable, serializeMeta_properties, serializePage_links, type Check, type Check_updatable, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../models/index.js';
// @ts-ignore
import { type WithCheck_ItemRequestBuilder, WithCheck_ItemRequestBuilderNavigationMetadata, WithCheck_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChecksGetResponse extends Parsable {
    /**
     * The checks property
     */
    checks?: Check[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface ChecksPostRequestBody extends Check_updatable, Parsable {
}
export interface ChecksPostResponse extends Parsable {
    /**
     * The check property
     */
    check?: Check | null;
}
/**
 * Builds and executes requests for operations under /v2/uptime/checks
 */
export interface ChecksRequestBuilder extends BaseRequestBuilder<ChecksRequestBuilder> {
    /**
     * Gets an item from the dots.v2.uptime.checks.item collection
     * @param check_id A unique identifier for a check.
     * @returns {WithCheck_ItemRequestBuilder}
     */
     byCheck_id(check_id: Guid) : WithCheck_ItemRequestBuilder;
    /**
     * To list all of the Uptime checks on your account, send a GET request to `/v2/uptime/checks`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChecksGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ChecksRequestBuilderGetQueryParameters> | undefined) : Promise<ChecksGetResponse | undefined>;
    /**
     * To create an Uptime check, send a POST request to `/v2/uptime/checks` specifying the attributesin the table below in the JSON body.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChecksPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: ChecksPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ChecksPostResponse | undefined>;
    /**
     * To list all of the Uptime checks on your account, send a GET request to `/v2/uptime/checks`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ChecksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create an Uptime check, send a POST request to `/v2/uptime/checks` specifying the attributesin the table below in the JSON body.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ChecksPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the Uptime checks on your account, send a GET request to `/v2/uptime/checks`.
 */
export interface ChecksRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChecksGetResponse}
 */
// @ts-ignore
export function createChecksGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChecksGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChecksPostRequestBody}
 */
// @ts-ignore
export function createChecksPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChecksPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChecksPostResponse}
 */
// @ts-ignore
export function createChecksPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChecksPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChecksGetResponse(checksGetResponse: Partial<ChecksGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "checks": n => { checksGetResponse.checks = n.getCollectionOfObjectValues<Check>(createCheckFromDiscriminatorValue); },
        "links": n => { checksGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { checksGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChecksPostRequestBody(checksPostRequestBody: Partial<ChecksPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCheck_updatable(checksPostRequestBody),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChecksPostResponse(checksPostResponse: Partial<ChecksPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "check": n => { checksPostResponse.check = n.getObjectValue<Check>(createCheckFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChecksGetResponse(writer: SerializationWriter, checksGetResponse: Partial<ChecksGetResponse> | undefined | null = {}) : void {
    if (checksGetResponse) {
        writer.writeCollectionOfObjectValues<Check>("checks", checksGetResponse.checks, serializeCheck);
        writer.writeObjectValue<Page_links>("links", checksGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", checksGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChecksPostRequestBody(writer: SerializationWriter, checksPostRequestBody: Partial<ChecksPostRequestBody> | undefined | null = {}) : void {
    if (checksPostRequestBody) {
        serializeCheck_updatable(writer, checksPostRequestBody)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChecksPostResponse(writer: SerializationWriter, checksPostResponse: Partial<ChecksPostResponse> | undefined | null = {}) : void {
    if (checksPostResponse) {
        writer.writeObjectValue<Check>("check", checksPostResponse.check, serializeCheck);
    }
}
/**
 * Uri template for the request builder.
 */
export const ChecksRequestBuilderUriTemplate = "{+baseurl}/v2/uptime/checks{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChecksRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChecksRequestBuilderNavigationMetadata: Record<Exclude<keyof ChecksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCheck_id: {
        requestsMetadata: WithCheck_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithCheck_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["check_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChecksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ChecksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChecksGetResponseFromDiscriminatorValue,
        queryParametersMapper: ChecksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ChecksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChecksPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChecksPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
