/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createNamespace_infoFromDiscriminatorValue, serializeCreate_namespace, serializeNamespace_info, type Create_namespace, type ErrorEscaped, type Namespace_info } from '../../../models/index.js';
// @ts-ignore
import { type WithNamespace_ItemRequestBuilder, WithNamespace_ItemRequestBuilderNavigationMetadata, WithNamespace_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespacesGetResponse}
 */
// @ts-ignore
export function createNamespacesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespacesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespacesPostResponse}
 */
// @ts-ignore
export function createNamespacesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNamespacesPostResponse;
}
/**
 * The deserialization information for the current model
 * @param NamespacesGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespacesGetResponse(namespacesGetResponse: Partial<NamespacesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "namespaces": n => { namespacesGetResponse.namespaces = n.getCollectionOfObjectValues<Namespace_info>(createNamespace_infoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param NamespacesPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespacesPostResponse(namespacesPostResponse: Partial<NamespacesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "namespace": n => { namespacesPostResponse.namespace = n.getObjectValue<Namespace_info>(createNamespace_infoFromDiscriminatorValue); },
    }
}
export interface NamespacesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The namespaces property
     */
    namespaces?: Namespace_info[] | null;
}
export interface NamespacesPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The namespace property
     */
    namespace?: Namespace_info | null;
}
/**
 * Builds and executes requests for operations under /v2/functions/namespaces
 */
export interface NamespacesRequestBuilder extends BaseRequestBuilder<NamespacesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.functions.namespaces.item collection
     * @param namespace_id The ID of the namespace to be managed.
     * @returns {WithNamespace_ItemRequestBuilder}
     */
     byNamespace_id(namespace_id: string) : WithNamespace_ItemRequestBuilder;
    /**
     * Returns a list of namespaces associated with the current user. To get all namespaces, send a GET request to `/v2/functions/namespaces`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NamespacesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<NamespacesGetResponse | undefined>;
    /**
     * Creates a new serverless functions namespace in the desired region and associates it with the provided label. A namespace is a collection of functions and their associated packages, triggers, and project specifications. To create a namespace, send a POST request to `/v2/functions/namespaces` with the `region` and `label` properties.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NamespacesPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 422 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Create_namespace, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<NamespacesPostResponse | undefined>;
    /**
     * Returns a list of namespaces associated with the current user. To get all namespaces, send a GET request to `/v2/functions/namespaces`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Creates a new serverless functions namespace in the desired region and associates it with the provided label. A namespace is a collection of functions and their associated packages, triggers, and project specifications. To create a namespace, send a POST request to `/v2/functions/namespaces` with the `region` and `label` properties.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Create_namespace, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param NamespacesGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespacesGetResponse(writer: SerializationWriter, namespacesGetResponse: Partial<NamespacesGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!namespacesGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Namespace_info>("namespaces", namespacesGetResponse.namespaces, serializeNamespace_info);
    writer.writeAdditionalData(namespacesGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param NamespacesPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespacesPostResponse(writer: SerializationWriter, namespacesPostResponse: Partial<NamespacesPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!namespacesPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Namespace_info>("namespace", namespacesPostResponse.namespace, serializeNamespace_info);
    writer.writeAdditionalData(namespacesPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const NamespacesRequestBuilderUriTemplate = "{+baseurl}/v2/functions/namespaces";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const NamespacesRequestBuilderNavigationMetadata: Record<Exclude<keyof NamespacesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byNamespace_id: {
        requestsMetadata: WithNamespace_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithNamespace_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["namespace_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const NamespacesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: NamespacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNamespacesGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: NamespacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            422: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNamespacesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreate_namespace,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
