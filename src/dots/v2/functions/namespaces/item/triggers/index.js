/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createTrigger_infoFromDiscriminatorValue, serializeCreate_trigger, serializeTrigger_info } from '../../../../../models/index.js';
// @ts-ignore
import { WithTrigger_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TriggersGetResponse}
 */
// @ts-ignore
export function createTriggersGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoTriggersGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TriggersPostResponse}
 */
// @ts-ignore
export function createTriggersPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoTriggersPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTriggersGetResponse(triggersGetResponse = {}) {
    return {
        "triggers": n => { triggersGetResponse.triggers = n.getCollectionOfObjectValues(createTrigger_infoFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTriggersPostResponse(triggersPostResponse = {}) {
    return {
        "trigger": n => { triggersPostResponse.trigger = n.getObjectValue(createTrigger_infoFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTriggersGetResponse(writer, triggersGetResponse = {}) {
    if (triggersGetResponse) {
        writer.writeCollectionOfObjectValues("triggers", triggersGetResponse.triggers, serializeTrigger_info);
        writer.writeAdditionalData(triggersGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTriggersPostResponse(writer, triggersPostResponse = {}) {
    if (triggersPostResponse) {
        writer.writeObjectValue("trigger", triggersPostResponse.trigger, serializeTrigger_info);
        writer.writeAdditionalData(triggersPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const TriggersRequestBuilderUriTemplate = "{+baseurl}/v2/functions/namespaces/{namespace_id}/triggers";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TriggersRequestBuilderNavigationMetadata = {
    byTrigger_name: {
        requestsMetadata: WithTrigger_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["trigger_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TriggersRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: TriggersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createTriggersGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: TriggersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue,
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            422: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createTriggersPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreate_trigger,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
