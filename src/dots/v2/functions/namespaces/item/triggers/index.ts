/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createTrigger_infoFromDiscriminatorValue, serializeCreate_trigger, serializeTrigger_info, type Create_trigger, type ErrorEscaped, type Trigger_info } from '../../../../../models/index.js';
// @ts-ignore
import { type WithTrigger_nameItemRequestBuilder, WithTrigger_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TriggersGetResponse}
 */
// @ts-ignore
export function createTriggersGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTriggersGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TriggersPostResponse}
 */
// @ts-ignore
export function createTriggersPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTriggersPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTriggersGetResponse(triggersGetResponse: Partial<TriggersGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "triggers": n => { triggersGetResponse.triggers = n.getCollectionOfObjectValues<Trigger_info>(createTrigger_infoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTriggersPostResponse(triggersPostResponse: Partial<TriggersPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "trigger": n => { triggersPostResponse.trigger = n.getObjectValue<Trigger_info>(createTrigger_infoFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTriggersGetResponse(writer: SerializationWriter, triggersGetResponse: Partial<TriggersGetResponse> | undefined | null = {}) : void {
    if (triggersGetResponse) {
        writer.writeCollectionOfObjectValues<Trigger_info>("triggers", triggersGetResponse.triggers, serializeTrigger_info);
        writer.writeAdditionalData(triggersGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTriggersPostResponse(writer: SerializationWriter, triggersPostResponse: Partial<TriggersPostResponse> | undefined | null = {}) : void {
    if (triggersPostResponse) {
        writer.writeObjectValue<Trigger_info>("trigger", triggersPostResponse.trigger, serializeTrigger_info);
        writer.writeAdditionalData(triggersPostResponse.additionalData);
    }
}
export interface TriggersGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The triggers property
     */
    triggers?: Trigger_info[] | null;
}
export interface TriggersPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The trigger property
     */
    trigger?: Trigger_info | null;
}
/**
 * Builds and executes requests for operations under /v2/functions/namespaces/{namespace_id}/triggers
 */
export interface TriggersRequestBuilder extends BaseRequestBuilder<TriggersRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.functions.namespaces.item.triggers.item collection
     * @param trigger_name The name of the trigger to be managed.
     * @returns {WithTrigger_nameItemRequestBuilder}
     */
     byTrigger_name(trigger_name: string) : WithTrigger_nameItemRequestBuilder;
    /**
     * Returns a list of triggers associated with the current user and namespace. To get all triggers, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TriggersGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TriggersGetResponse | undefined>;
    /**
     * Creates a new trigger for a given function in a namespace. To create a trigger, send a POST request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers` with the `name`, `function`, `type`, `is_enabled` and `scheduled_details` properties.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TriggersPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 422 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Create_trigger, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TriggersPostResponse | undefined>;
    /**
     * Returns a list of triggers associated with the current user and namespace. To get all triggers, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Creates a new trigger for a given function in a namespace. To create a trigger, send a POST request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers` with the `name`, `function`, `type`, `is_enabled` and `scheduled_details` properties.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Create_trigger, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TriggersRequestBuilderUriTemplate = "{+baseurl}/v2/functions/namespaces/{namespace_id}/triggers";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TriggersRequestBuilderNavigationMetadata: Record<Exclude<keyof TriggersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTrigger_name: {
        requestsMetadata: WithTrigger_nameItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["trigger_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TriggersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TriggersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTriggersGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: TriggersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            422: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTriggersPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreate_trigger,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
