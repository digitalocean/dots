/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createNamespace_infoFromDiscriminatorValue, serializeNamespace_info, type ErrorEscaped, type Namespace_info } from '../../../../models/index.js';
// @ts-ignore
import { TriggersRequestBuilderNavigationMetadata, TriggersRequestBuilderRequestsMetadata, type TriggersRequestBuilder } from './triggers/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithNamespace_GetResponse}
 */
// @ts-ignore
export function createWithNamespace_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithNamespace_GetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithNamespace_GetResponse(withNamespace_GetResponse: Partial<WithNamespace_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "namespace": n => { withNamespace_GetResponse.namespace = n.getObjectValue<Namespace_info>(createNamespace_infoFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithNamespace_GetResponse(writer: SerializationWriter, withNamespace_GetResponse: Partial<WithNamespace_GetResponse> | undefined | null = {}) : void {
    if (withNamespace_GetResponse) {
        writer.writeObjectValue<Namespace_info>("namespace", withNamespace_GetResponse.namespace, serializeNamespace_info);
    }
}
export interface WithNamespace_GetResponse extends Parsable {
    /**
     * The namespace property
     */
    namespace?: Namespace_info | null;
}
/**
 * Builds and executes requests for operations under /v2/functions/namespaces/{namespace_id}
 */
export interface WithNamespace_ItemRequestBuilder extends BaseRequestBuilder<WithNamespace_ItemRequestBuilder> {
    /**
     * The triggers property
     */
    get triggers(): TriggersRequestBuilder;
    /**
     * Deletes the given namespace.  When a namespace is deleted all assets, in the namespace are deleted, this includes packages, functions and triggers. Deleting a namespace is a destructive operation and assets in the namespace are not recoverable after deletion. Some metadata is retained, such as activations, or soft deleted for reporting purposes.To delete namespace, send a DELETE request to `/v2/functions/namespaces/$NAMESPACE_ID`.A successful deletion returns a 204 response.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Gets the namespace details for the given namespace UUID. To get namespace details, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID` with no parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithNamespace_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 403 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithNamespace_GetResponse | undefined>;
    /**
     * Deletes the given namespace.  When a namespace is deleted all assets, in the namespace are deleted, this includes packages, functions and triggers. Deleting a namespace is a destructive operation and assets in the namespace are not recoverable after deletion. Some metadata is retained, such as activations, or soft deleted for reporting purposes.To delete namespace, send a DELETE request to `/v2/functions/namespaces/$NAMESPACE_ID`.A successful deletion returns a 204 response.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Gets the namespace details for the given namespace UUID. To get namespace details, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID` with no parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithNamespace_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/functions/namespaces/{namespace_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithNamespace_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithNamespace_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    triggers: {
        requestsMetadata: TriggersRequestBuilderRequestsMetadata,
        navigationMetadata: TriggersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithNamespace_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithNamespace_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithNamespace_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithNamespace_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
