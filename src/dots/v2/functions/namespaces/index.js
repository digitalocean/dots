/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createNamespace_infoFromDiscriminatorValue, serializeCreate_namespace, serializeNamespace_info } from '../../../models/index.js';
// @ts-ignore
import { WithNamespace_ItemRequestBuilderNavigationMetadata, WithNamespace_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespacesGetResponse}
 */
// @ts-ignore
export function createNamespacesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoNamespacesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NamespacesPostResponse}
 */
// @ts-ignore
export function createNamespacesPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoNamespacesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespacesGetResponse(namespacesGetResponse = {}) {
    return {
        "namespaces": n => { namespacesGetResponse.namespaces = n.getCollectionOfObjectValues(createNamespace_infoFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNamespacesPostResponse(namespacesPostResponse = {}) {
    return {
        "namespace": n => { namespacesPostResponse.namespace = n.getObjectValue(createNamespace_infoFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespacesGetResponse(writer, namespacesGetResponse = {}) {
    if (namespacesGetResponse) {
        writer.writeCollectionOfObjectValues("namespaces", namespacesGetResponse.namespaces, serializeNamespace_info);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNamespacesPostResponse(writer, namespacesPostResponse = {}) {
    if (namespacesPostResponse) {
        writer.writeObjectValue("namespace", namespacesPostResponse.namespace, serializeNamespace_info);
    }
}
/**
 * Uri template for the request builder.
 */
export const NamespacesRequestBuilderUriTemplate = "{+baseurl}/v2/functions/namespaces";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const NamespacesRequestBuilderNavigationMetadata = {
    byNamespace_id: {
        requestsMetadata: WithNamespace_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithNamespace_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["namespace_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const NamespacesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: NamespacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createNamespacesGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: NamespacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            422: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createNamespacesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreate_namespace,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
