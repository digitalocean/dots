/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSshKeysFromDiscriminatorValue, serializeSshKeys, type ErrorEscaped, type SshKeys } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSsh_key_identifierGetResponse}
 */
// @ts-ignore
export function createWithSsh_key_identifierGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSsh_key_identifierGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSsh_key_identifierPutRequestBody}
 */
// @ts-ignore
export function createWithSsh_key_identifierPutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSsh_key_identifierPutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSsh_key_identifierPutResponse}
 */
// @ts-ignore
export function createWithSsh_key_identifierPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSsh_key_identifierPutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSsh_key_identifierGetResponse(withSsh_key_identifierGetResponse: Partial<WithSsh_key_identifierGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ssh_key": n => { withSsh_key_identifierGetResponse.sshKey = n.getObjectValue<SshKeys>(createSshKeysFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSsh_key_identifierPutRequestBody(withSsh_key_identifierPutRequestBody: Partial<WithSsh_key_identifierPutRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { withSsh_key_identifierPutRequestBody.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSsh_key_identifierPutResponse(withSsh_key_identifierPutResponse: Partial<WithSsh_key_identifierPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ssh_key": n => { withSsh_key_identifierPutResponse.sshKey = n.getObjectValue<SshKeys>(createSshKeysFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSsh_key_identifierGetResponse(writer: SerializationWriter, withSsh_key_identifierGetResponse: Partial<WithSsh_key_identifierGetResponse> | undefined | null = {}) : void {
    if (withSsh_key_identifierGetResponse) {
        writer.writeObjectValue<SshKeys>("ssh_key", withSsh_key_identifierGetResponse.sshKey, serializeSshKeys);
        writer.writeAdditionalData(withSsh_key_identifierGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSsh_key_identifierPutRequestBody(writer: SerializationWriter, withSsh_key_identifierPutRequestBody: Partial<WithSsh_key_identifierPutRequestBody> | undefined | null = {}) : void {
    if (withSsh_key_identifierPutRequestBody) {
        writer.writeStringValue("name", withSsh_key_identifierPutRequestBody.name);
        writer.writeAdditionalData(withSsh_key_identifierPutRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSsh_key_identifierPutResponse(writer: SerializationWriter, withSsh_key_identifierPutResponse: Partial<WithSsh_key_identifierPutResponse> | undefined | null = {}) : void {
    if (withSsh_key_identifierPutResponse) {
        writer.writeObjectValue<SshKeys>("ssh_key", withSsh_key_identifierPutResponse.sshKey, serializeSshKeys);
        writer.writeAdditionalData(withSsh_key_identifierPutResponse.additionalData);
    }
}
export interface WithSsh_key_identifierGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ssh_key property
     */
    sshKey?: SshKeys | null;
}
/**
 * Builds and executes requests for operations under /v2/account/keys/{ssh_key_identifier}
 */
export interface WithSsh_key_identifierItemRequestBuilder extends BaseRequestBuilder<WithSsh_key_identifierItemRequestBuilder> {
    /**
     * To destroy a public SSH key that you have in your account, send a DELETE request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.A 204 status will be returned, indicating that the action was successful and that the response body is empty.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get information about a key, send a GET request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.The response will be a JSON object with the key `ssh_key` and value an ssh_key object which contains the standard ssh_key attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithSsh_key_identifierGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithSsh_key_identifierGetResponse | undefined>;
    /**
     * To update the name of an SSH key, send a PUT request to either `/v2/account/keys/$SSH_KEY_ID` or `/v2/account/keys/$SSH_KEY_FINGERPRINT`. Set the `name` attribute to the new name you want to use.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithSsh_key_identifierPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: WithSsh_key_identifierPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithSsh_key_identifierPutResponse | undefined>;
    /**
     * To destroy a public SSH key that you have in your account, send a DELETE request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.A 204 status will be returned, indicating that the action was successful and that the response body is empty.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get information about a key, send a GET request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.The response will be a JSON object with the key `ssh_key` and value an ssh_key object which contains the standard ssh_key attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the name of an SSH key, send a PUT request to either `/v2/account/keys/$SSH_KEY_ID` or `/v2/account/keys/$SSH_KEY_FINGERPRINT`. Set the `name` attribute to the new name you want to use.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: WithSsh_key_identifierPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithSsh_key_identifierPutRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.
     */
    name?: string | null;
}
export interface WithSsh_key_identifierPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ssh_key property
     */
    sshKey?: SshKeys | null;
}
/**
 * Uri template for the request builder.
 */
export const WithSsh_key_identifierItemRequestBuilderUriTemplate = "{+baseurl}/v2/account/keys/{ssh_key_identifier}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithSsh_key_identifierItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithSsh_key_identifierItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithSsh_key_identifierItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithSsh_key_identifierGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithSsh_key_identifierItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithSsh_key_identifierPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithSsh_key_identifierPutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
