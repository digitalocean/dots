/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createSshKeysFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeSshKeys } from '../../../models/index.js';
// @ts-ignore
import { WithSsh_key_identifierItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysGetResponse}
 */
// @ts-ignore
export function createKeysGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoKeysGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysPostResponse}
 */
// @ts-ignore
export function createKeysPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoKeysPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysGetResponse(keysGetResponse = {}) {
    return {
        "links": n => { keysGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { keysGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "ssh_keys": n => { keysGetResponse.sshKeys = n.getCollectionOfObjectValues(createSshKeysFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysPostResponse(keysPostResponse = {}) {
    return {
        "ssh_key": n => { keysPostResponse.sshKey = n.getObjectValue(createSshKeysFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysGetResponse(writer, keysGetResponse = {}) {
    if (keysGetResponse) {
        writer.writeObjectValue("links", keysGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", keysGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("ssh_keys", keysGetResponse.sshKeys, serializeSshKeys);
        writer.writeAdditionalData(keysGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysPostResponse(writer, keysPostResponse = {}) {
    if (keysPostResponse) {
        writer.writeObjectValue("ssh_key", keysPostResponse.sshKey, serializeSshKeys);
        writer.writeAdditionalData(keysPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const KeysRequestBuilderUriTemplate = "{+baseurl}/v2/account/keys{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const KeysRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KeysRequestBuilderNavigationMetadata = {
    bySsh_key_identifier: {
        requestsMetadata: WithSsh_key_identifierItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["ssh_key_identifier"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KeysRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createKeysGetResponseFromDiscriminatorValue,
        queryParametersMapper: KeysRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createKeysPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSshKeys,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
