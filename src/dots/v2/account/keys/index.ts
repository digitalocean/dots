/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createSshKeysFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeSshKeys, type ErrorEscaped, type Meta_properties, type Page_links, type SshKeys } from '../../../models/index.js';
// @ts-ignore
import { type WithSsh_key_identifierItemRequestBuilder, WithSsh_key_identifierItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysGetResponse}
 */
// @ts-ignore
export function createKeysGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeysGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysPostResponse}
 */
// @ts-ignore
export function createKeysPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeysPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysGetResponse(keysGetResponse: Partial<KeysGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { keysGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { keysGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "ssh_keys": n => { keysGetResponse.sshKeys = n.getCollectionOfObjectValues<SshKeys>(createSshKeysFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysPostResponse(keysPostResponse: Partial<KeysPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ssh_key": n => { keysPostResponse.sshKey = n.getObjectValue<SshKeys>(createSshKeysFromDiscriminatorValue); },
    }
}
export interface KeysGetResponse extends Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The ssh_keys property
     */
    sshKeys?: SshKeys[] | null;
}
export interface KeysPostResponse extends Parsable {
    /**
     * The ssh_key property
     */
    sshKey?: SshKeys | null;
}
/**
 * Builds and executes requests for operations under /v2/account/keys
 */
export interface KeysRequestBuilder extends BaseRequestBuilder<KeysRequestBuilder> {
    /**
     * Gets an item from the dots.v2.account.keys.item collection
     * @param ssh_key_identifier Either the ID or the fingerprint of an existing SSH key.
     * @returns {WithSsh_key_identifierItemRequestBuilder}
     */
     bySsh_key_identifier(ssh_key_identifier: number) : WithSsh_key_identifierItemRequestBuilder;
    /**
     * To list all of the keys in your account, send a GET request to `/v2/account/keys`. The response will be a JSON object with a key set to `ssh_keys`. The value of this will be an array of ssh_key objects, each of which contains the standard ssh_key attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeysGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<KeysRequestBuilderGetQueryParameters> | undefined) : Promise<KeysGetResponse | undefined>;
    /**
     * To add a new SSH public key to your DigitalOcean account, send a POST request to `/v2/account/keys`. Set the `name` attribute to the name you wish to use and the `public_key` attribute to the full public key you are adding.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeysPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: SshKeys, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<KeysPostResponse | undefined>;
    /**
     * To list all of the keys in your account, send a GET request to `/v2/account/keys`. The response will be a JSON object with a key set to `ssh_keys`. The value of this will be an array of ssh_key objects, each of which contains the standard ssh_key attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<KeysRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To add a new SSH public key to your DigitalOcean account, send a POST request to `/v2/account/keys`. Set the `name` attribute to the name you wish to use and the `public_key` attribute to the full public key you are adding.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SshKeys, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the keys in your account, send a GET request to `/v2/account/keys`. The response will be a JSON object with a key set to `ssh_keys`. The value of this will be an array of ssh_key objects, each of which contains the standard ssh_key attributes.
 */
export interface KeysRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysGetResponse(writer: SerializationWriter, keysGetResponse: Partial<KeysGetResponse> | undefined | null = {}) : void {
    if (keysGetResponse) {
        writer.writeObjectValue<Page_links>("links", keysGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", keysGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<SshKeys>("ssh_keys", keysGetResponse.sshKeys, serializeSshKeys);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysPostResponse(writer: SerializationWriter, keysPostResponse: Partial<KeysPostResponse> | undefined | null = {}) : void {
    if (keysPostResponse) {
        writer.writeObjectValue<SshKeys>("ssh_key", keysPostResponse.sshKey, serializeSshKeys);
    }
}
/**
 * Uri template for the request builder.
 */
export const KeysRequestBuilderUriTemplate = "{+baseurl}/v2/account/keys{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const KeysRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KeysRequestBuilderNavigationMetadata: Record<Exclude<keyof KeysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySsh_key_identifier: {
        requestsMetadata: WithSsh_key_identifierItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["ssh_key_identifier"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KeysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKeysGetResponseFromDiscriminatorValue,
        queryParametersMapper: KeysRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKeysPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSshKeys,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
