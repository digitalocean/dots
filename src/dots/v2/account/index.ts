/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAccountFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeAccount, type Account, type ErrorEscaped } from '../../models/index.js';
// @ts-ignore
import { KeysRequestBuilderNavigationMetadata, KeysRequestBuilderRequestsMetadata, type KeysRequestBuilder } from './keys/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccountGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The account property
     */
    account?: Account | null;
}
/**
 * Builds and executes requests for operations under /v2/account
 */
export interface AccountRequestBuilder extends BaseRequestBuilder<AccountRequestBuilder> {
    /**
     * The keys property
     */
    get keys(): KeysRequestBuilder;
    /**
     * To show information about the current user account, send a GET request to `/v2/account`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccountGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccountGetResponse | undefined>;
    /**
     * To show information about the current user account, send a GET request to `/v2/account`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AccountGetResponse}
 */
// @ts-ignore
export function createAccountGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAccountGetResponse;
}
/**
 * The deserialization information for the current model
 * @param AccountGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAccountGetResponse(accountGetResponse: Partial<AccountGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "account": n => { accountGetResponse.account = n.getObjectValue<Account>(createAccountFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param AccountGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAccountGetResponse(writer: SerializationWriter, accountGetResponse: Partial<AccountGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!accountGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Account>("account", accountGetResponse.account, serializeAccount);
    writer.writeAdditionalData(accountGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const AccountRequestBuilderUriTemplate = "{+baseurl}/v2/account";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccountRequestBuilderNavigationMetadata: Record<Exclude<keyof AccountRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    keys: {
        requestsMetadata: KeysRequestBuilderRequestsMetadata,
        navigationMetadata: KeysRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccountRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AccountRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccountGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
