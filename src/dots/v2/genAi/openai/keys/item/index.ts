/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiDeleteOpenAIAPIKeyOutputFromDiscriminatorValue, createApiGetOpenAIAPIKeyOutputFromDiscriminatorValue, createApiUpdateOpenAIAPIKeyOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiUpdateOpenAIAPIKeyInputPublic, serializeApiUpdateOpenAIAPIKeyOutput, type ApiDeleteOpenAIAPIKeyOutput, type ApiGetOpenAIAPIKeyOutput, type ApiUpdateOpenAIAPIKeyInputPublic, type ApiUpdateOpenAIAPIKeyOutput, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { AgentsRequestBuilderRequestsMetadata, type AgentsRequestBuilder } from './agents/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/openai/keys/{api_key_uu-id}
 */
export interface Api_key_uuItemRequestBuilder extends BaseRequestBuilder<Api_key_uuItemRequestBuilder> {
    /**
     * The agents property
     */
    get agents(): AgentsRequestBuilder;
    /**
     * To delete an OpenAI API key, send a DELETE request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiDeleteOpenAIAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiDeleteOpenAIAPIKeyOutput | undefined>;
    /**
     * To retrieve details of an OpenAI API key, send a GET request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiGetOpenAIAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiGetOpenAIAPIKeyOutput | undefined>;
    /**
     * To update an OpenAI API key, send a PUT request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.
     * @param body UpdateOpenAIAPIKeyInputPublic is used to update an existing OpenAI API key for a specific agent.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiUpdateOpenAIAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: ApiUpdateOpenAIAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiUpdateOpenAIAPIKeyOutput | undefined>;
    /**
     * To delete an OpenAI API key, send a DELETE request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve details of an OpenAI API key, send a GET request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update an OpenAI API key, send a PUT request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.
     * @param body UpdateOpenAIAPIKeyInputPublic is used to update an existing OpenAI API key for a specific agent.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: ApiUpdateOpenAIAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const Api_key_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/openai/keys/{api_key_uu%2Did}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Api_key_uuItemRequestBuilderNavigationMetadata: Record<Exclude<keyof Api_key_uuItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    agents: {
        requestsMetadata: AgentsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Api_key_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: Api_key_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiDeleteOpenAIAPIKeyOutputFromDiscriminatorValue,
    },
    get: {
        uriTemplate: Api_key_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiGetOpenAIAPIKeyOutputFromDiscriminatorValue,
    },
    put: {
        uriTemplate: Api_key_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiUpdateOpenAIAPIKeyOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiUpdateOpenAIAPIKeyInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
