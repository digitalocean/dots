/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiCreateOpenAIAPIKeyOutputFromDiscriminatorValue, createApiListOpenAIAPIKeysOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiCreateOpenAIAPIKeyInputPublic, serializeApiCreateOpenAIAPIKeyOutput, type ApiCreateOpenAIAPIKeyInputPublic, type ApiCreateOpenAIAPIKeyOutput, type ApiListOpenAIAPIKeysOutput, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { Api_key_uuItemRequestBuilderNavigationMetadata, Api_key_uuItemRequestBuilderRequestsMetadata, type Api_key_uuItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/openai/keys
 */
export interface KeysRequestBuilder extends BaseRequestBuilder<KeysRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.genAi.openai.keys.item collection
     * @param api_key_uuId API key ID
     * @returns {Api_key_uuItemRequestBuilder}
     */
     byApi_key_uuId(api_key_uuId: string) : Api_key_uuItemRequestBuilder;
    /**
     * To list all OpenAI API keys, send a GET request to `/v2/gen-ai/openai/keys`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListOpenAIAPIKeysOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<KeysRequestBuilderGetQueryParameters> | undefined) : Promise<ApiListOpenAIAPIKeysOutput | undefined>;
    /**
     * To create an OpenAI API key, send a POST request to `/v2/gen-ai/openai/keys`.
     * @param body CreateOpenAIAPIKeyInputPublic is used to create a new OpenAI API key for a specific agent.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiCreateOpenAIAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: ApiCreateOpenAIAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiCreateOpenAIAPIKeyOutput | undefined>;
    /**
     * To list all OpenAI API keys, send a GET request to `/v2/gen-ai/openai/keys`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<KeysRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create an OpenAI API key, send a POST request to `/v2/gen-ai/openai/keys`.
     * @param body CreateOpenAIAPIKeyInputPublic is used to create a new OpenAI API key for a specific agent.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ApiCreateOpenAIAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all OpenAI API keys, send a GET request to `/v2/gen-ai/openai/keys`.
 */
export interface KeysRequestBuilderGetQueryParameters {
    /**
     * Page number.
     */
    page?: number;
    /**
     * Items per page.
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const KeysRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/openai/keys{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const KeysRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KeysRequestBuilderNavigationMetadata: Record<Exclude<keyof KeysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byApi_key_uuId: {
        requestsMetadata: Api_key_uuItemRequestBuilderRequestsMetadata,
        navigationMetadata: Api_key_uuItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["api_key_uu%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KeysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListOpenAIAPIKeysOutputFromDiscriminatorValue,
        queryParametersMapper: KeysRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiCreateOpenAIAPIKeyOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiCreateOpenAIAPIKeyInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
