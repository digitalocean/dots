/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiListAgentVersionsOutputFromDiscriminatorValue, createApiRollbackToAgentVersionOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiRollbackToAgentVersionInputPublic, serializeApiRollbackToAgentVersionOutput, type ApiListAgentVersionsOutput, type ApiRollbackToAgentVersionInputPublic, type ApiRollbackToAgentVersionOutput, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/agents/{agent_uu-id}/versions
 */
export interface VersionsRequestBuilder extends BaseRequestBuilder<VersionsRequestBuilder> {
    /**
     * To list all agent versions, send a GET request to `/v2/gen-ai/agents/{uuid}/versions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListAgentVersionsOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<VersionsRequestBuilderGetQueryParameters> | undefined) : Promise<ApiListAgentVersionsOutput | undefined>;
    /**
     * To update to a specific agent version, send a PUT request to `/v2/gen-ai/agents/{uuid}/versions`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiRollbackToAgentVersionOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: ApiRollbackToAgentVersionInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiRollbackToAgentVersionOutput | undefined>;
    /**
     * To list all agent versions, send a GET request to `/v2/gen-ai/agents/{uuid}/versions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VersionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To update to a specific agent version, send a PUT request to `/v2/gen-ai/agents/{uuid}/versions`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: ApiRollbackToAgentVersionInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all agent versions, send a GET request to `/v2/gen-ai/agents/{uuid}/versions`.
 */
export interface VersionsRequestBuilderGetQueryParameters {
    /**
     * Page number.
     */
    page?: number;
    /**
     * Items per page.
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const VersionsRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/agents/{agent_uu%2Did}/versions{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const VersionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VersionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: VersionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListAgentVersionsOutputFromDiscriminatorValue,
        queryParametersMapper: VersionsRequestBuilderGetQueryParametersMapper,
    },
    put: {
        uriTemplate: VersionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiRollbackToAgentVersionOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiRollbackToAgentVersionInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
