/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiDeleteAgentOutputFromDiscriminatorValue, createApiGetAgentOutputFromDiscriminatorValue, createApiUpdateAgentOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiUpdateAgentInputPublic, serializeApiUpdateAgentOutput, type ApiDeleteAgentOutput, type ApiGetAgentOutput, type ApiUpdateAgentInputPublic, type ApiUpdateAgentOutput, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { Api_keysRequestBuilderNavigationMetadata, Api_keysRequestBuilderRequestsMetadata, type Api_keysRequestBuilder } from './api_keys/index.js';
// @ts-ignore
import { Child_agentsRequestBuilderNavigationMetadata, Child_agentsRequestBuilderRequestsMetadata, type Child_agentsRequestBuilder } from './child_agents/index.js';
// @ts-ignore
import { Deployment_visibilityRequestBuilderRequestsMetadata, type Deployment_visibilityRequestBuilder } from './deployment_visibility/index.js';
// @ts-ignore
import { FunctionsRequestBuilderNavigationMetadata, FunctionsRequestBuilderRequestsMetadata, type FunctionsRequestBuilder } from './functions/index.js';
// @ts-ignore
import { Knowledge_basesRequestBuilderNavigationMetadata, type Knowledge_basesRequestBuilder } from './knowledge_bases/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/agents/{agent_uu-id}
 */
export interface Agent_uuItemRequestBuilder extends BaseRequestBuilder<Agent_uuItemRequestBuilder> {
    /**
     * The api_keys property
     */
    get api_keys(): Api_keysRequestBuilder;
    /**
     * The child_agents property
     */
    get child_agents(): Child_agentsRequestBuilder;
    /**
     * The deployment_visibility property
     */
    get deployment_visibility(): Deployment_visibilityRequestBuilder;
    /**
     * The functions property
     */
    get functions(): FunctionsRequestBuilder;
    /**
     * The knowledge_bases property
     */
    get knowledge_bases(): Knowledge_basesRequestBuilder;
    /**
     * To delete an agent, send a DELETE request to `/v2/gen-ai/agents/{uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiDeleteAgentOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiDeleteAgentOutput | undefined>;
    /**
     * To retrieve details of an agent, GET request to `/v2/gen-ai/agents/{uuid}`. The response body is a JSON object containing the agent.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiGetAgentOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiGetAgentOutput | undefined>;
    /**
     * To update an agent, send a PUT request to `/v2/gen-ai/agents/{uuid}`. The response body is a JSON object containing the agent.
     * @param body Data to modify an existing Agent
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiUpdateAgentOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: ApiUpdateAgentInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiUpdateAgentOutput | undefined>;
    /**
     * To delete an agent, send a DELETE request to `/v2/gen-ai/agents/{uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve details of an agent, GET request to `/v2/gen-ai/agents/{uuid}`. The response body is a JSON object containing the agent.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update an agent, send a PUT request to `/v2/gen-ai/agents/{uuid}`. The response body is a JSON object containing the agent.
     * @param body Data to modify an existing Agent
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: ApiUpdateAgentInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const Agent_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/agents/{agent_uu%2Did}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Agent_uuItemRequestBuilderNavigationMetadata: Record<Exclude<keyof Agent_uuItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    api_keys: {
        requestsMetadata: Api_keysRequestBuilderRequestsMetadata,
        navigationMetadata: Api_keysRequestBuilderNavigationMetadata,
    },
    child_agents: {
        requestsMetadata: Child_agentsRequestBuilderRequestsMetadata,
        navigationMetadata: Child_agentsRequestBuilderNavigationMetadata,
    },
    deployment_visibility: {
        requestsMetadata: Deployment_visibilityRequestBuilderRequestsMetadata,
    },
    functions: {
        requestsMetadata: FunctionsRequestBuilderRequestsMetadata,
        navigationMetadata: FunctionsRequestBuilderNavigationMetadata,
    },
    knowledge_bases: {
        navigationMetadata: Knowledge_basesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Agent_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: Agent_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiDeleteAgentOutputFromDiscriminatorValue,
    },
    get: {
        uriTemplate: Agent_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiGetAgentOutputFromDiscriminatorValue,
    },
    put: {
        uriTemplate: Agent_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiUpdateAgentOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiUpdateAgentInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
