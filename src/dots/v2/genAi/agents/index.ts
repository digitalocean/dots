/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiCreateAgentOutputFromDiscriminatorValue, createApiListAgentsOutputPublicFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiCreateAgentInputPublic, serializeApiCreateAgentOutput, type ApiCreateAgentInputPublic, type ApiCreateAgentOutput, type ApiListAgentsOutputPublic, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { Agent_uuItemRequestBuilderNavigationMetadata, Agent_uuItemRequestBuilderRequestsMetadata, type Agent_uuItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/agents
 */
export interface AgentsRequestBuilder extends BaseRequestBuilder<AgentsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.genAi.agents.item collection
     * @param agent_uuId Unique agent id
     * @returns {Agent_uuItemRequestBuilder}
     */
     byAgent_uuId(agent_uuId: string) : Agent_uuItemRequestBuilder;
    /**
     * To list all agents, send a GET request to `/v2/gen-ai/agents`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListAgentsOutputPublic>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AgentsRequestBuilderGetQueryParameters> | undefined) : Promise<ApiListAgentsOutputPublic | undefined>;
    /**
     * To create a new agent, send a POST request to `/v2/gen-ai/agents`. The response body contains a JSON object with the newly created agent object.
     * @param body Parameters for Agent Creation
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiCreateAgentOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: ApiCreateAgentInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiCreateAgentOutput | undefined>;
    /**
     * To list all agents, send a GET request to `/v2/gen-ai/agents`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AgentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new agent, send a POST request to `/v2/gen-ai/agents`. The response body contains a JSON object with the newly created agent object.
     * @param body Parameters for Agent Creation
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ApiCreateAgentInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all agents, send a GET request to `/v2/gen-ai/agents`.
 */
export interface AgentsRequestBuilderGetQueryParameters {
    /**
     * Only list agents that are deployed.
     */
    onlyDeployed?: boolean;
    /**
     * Page number.
     */
    page?: number;
    /**
     * Items per page.
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const AgentsRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/agents{?only_deployed*,page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AgentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "onlyDeployed": "only_deployed",
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AgentsRequestBuilderNavigationMetadata: Record<Exclude<keyof AgentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAgent_uuId: {
        requestsMetadata: Agent_uuItemRequestBuilderRequestsMetadata,
        navigationMetadata: Agent_uuItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["agent_uu%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AgentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AgentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListAgentsOutputPublicFromDiscriminatorValue,
        queryParametersMapper: AgentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AgentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiCreateAgentOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiCreateAgentInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
