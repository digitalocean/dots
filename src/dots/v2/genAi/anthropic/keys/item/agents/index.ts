/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiListAgentsByAnthropicKeyOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type ApiListAgentsByAnthropicKeyOutput, type ErrorEscaped } from '../../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/anthropic/keys/{api_key_uu-id}/agents
 */
export interface AgentsRequestBuilder extends BaseRequestBuilder<AgentsRequestBuilder> {
    /**
     * List Agents by Anthropic Key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListAgentsByAnthropicKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AgentsRequestBuilderGetQueryParameters> | undefined) : Promise<ApiListAgentsByAnthropicKeyOutput | undefined>;
    /**
     * List Agents by Anthropic Key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AgentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * List Agents by Anthropic Key.
 */
export interface AgentsRequestBuilderGetQueryParameters {
    /**
     * Page number.
     */
    page?: number;
    /**
     * Items per page.
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const AgentsRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/anthropic/keys/{api_key_uu%2Did}/agents{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AgentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AgentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AgentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListAgentsByAnthropicKeyOutputFromDiscriminatorValue,
        queryParametersMapper: AgentsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
