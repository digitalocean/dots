/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiGenerateOauth2URLOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type ApiGenerateOauth2URLOutput, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/oauth2/url
 */
export interface UrlRequestBuilder extends BaseRequestBuilder<UrlRequestBuilder> {
    /**
     * To generate an Oauth2-URL for use with your localhost, send a GET request to `/v2/gen-ai/oauth2/url`. Pass 'http://localhost:3000 as redirect_url
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiGenerateOauth2URLOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<UrlRequestBuilderGetQueryParameters> | undefined) : Promise<ApiGenerateOauth2URLOutput | undefined>;
    /**
     * To generate an Oauth2-URL for use with your localhost, send a GET request to `/v2/gen-ai/oauth2/url`. Pass 'http://localhost:3000 as redirect_url
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<UrlRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To generate an Oauth2-URL for use with your localhost, send a GET request to `/v2/gen-ai/oauth2/url`. Pass 'http://localhost:3000 as redirect_url
 */
export interface UrlRequestBuilderGetQueryParameters {
    /**
     * The redirect url.
     */
    redirectUrl?: string;
    /**
     * Type "google" / "dropbox".
     */
    type?: string;
}
/**
 * Uri template for the request builder.
 */
export const UrlRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/oauth2/url{?redirect_url*,type*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const UrlRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "redirectUrl": "redirect_url",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UrlRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UrlRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiGenerateOauth2URLOutputFromDiscriminatorValue,
        queryParametersMapper: UrlRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
