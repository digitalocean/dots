/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiCreateWorkspaceOutputFromDiscriminatorValue, createApiListWorkspacesOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiCreateWorkspaceInputPublic, serializeApiCreateWorkspaceOutput, type ApiCreateWorkspaceInputPublic, type ApiCreateWorkspaceOutput, type ApiListWorkspacesOutput, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { type WithWorkspace_uuItemRequestBuilder, WithWorkspace_uuItemRequestBuilderNavigationMetadata, WithWorkspace_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/workspaces
 */
export interface WorkspacesRequestBuilder extends BaseRequestBuilder<WorkspacesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.genAi.workspaces.item collection
     * @param workspace_uuid Workspace UUID.
     * @returns {WithWorkspace_uuItemRequestBuilder}
     */
     byWorkspace_uuid(workspace_uuid: string) : WithWorkspace_uuItemRequestBuilder;
    /**
     * To list all workspaces, send a GET request to `/v2/gen-ai/workspaces`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListWorkspacesOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiListWorkspacesOutput | undefined>;
    /**
     * To create a new workspace, send a POST request to `/v2/gen-ai/workspaces`. The response body contains a JSON object with the newly created workspace object.
     * @param body Parameters for Workspace Creation
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiCreateWorkspaceOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: ApiCreateWorkspaceInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiCreateWorkspaceOutput | undefined>;
    /**
     * To list all workspaces, send a GET request to `/v2/gen-ai/workspaces`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create a new workspace, send a POST request to `/v2/gen-ai/workspaces`. The response body contains a JSON object with the newly created workspace object.
     * @param body Parameters for Workspace Creation
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ApiCreateWorkspaceInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WorkspacesRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/workspaces";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkspacesRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkspacesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byWorkspace_uuid: {
        requestsMetadata: WithWorkspace_uuItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithWorkspace_uuItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["workspace_uuid"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkspacesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WorkspacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListWorkspacesOutputFromDiscriminatorValue,
    },
    post: {
        uriTemplate: WorkspacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiCreateWorkspaceOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiCreateWorkspaceInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
