/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiCreateModelAPIKeyOutputFromDiscriminatorValue, createApiListModelAPIKeysOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiCreateModelAPIKeyInputPublic, serializeApiCreateModelAPIKeyOutput, type ApiCreateModelAPIKeyInputPublic, type ApiCreateModelAPIKeyOutput, type ApiListModelAPIKeysOutput, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithApi_key_uuItemRequestBuilder, WithApi_key_uuItemRequestBuilderNavigationMetadata, WithApi_key_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/models/api_keys
 */
export interface Api_keysRequestBuilder extends BaseRequestBuilder<Api_keysRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.genAi.modelsRequests.api_keys.item collection
     * @param api_key_uuid API key ID
     * @returns {WithApi_key_uuItemRequestBuilder}
     */
     byApi_key_uuid(api_key_uuid: string) : WithApi_key_uuItemRequestBuilder;
    /**
     * To list all model API keys, send a GET request to `/v2/gen-ai/models/api_keys`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListModelAPIKeysOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<Api_keysRequestBuilderGetQueryParameters> | undefined) : Promise<ApiListModelAPIKeysOutput | undefined>;
    /**
     * To create a model API key, send a POST request to `/v2/gen-ai/models/api_keys`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiCreateModelAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: ApiCreateModelAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiCreateModelAPIKeyOutput | undefined>;
    /**
     * To list all model API keys, send a GET request to `/v2/gen-ai/models/api_keys`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Api_keysRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a model API key, send a POST request to `/v2/gen-ai/models/api_keys`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ApiCreateModelAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all model API keys, send a GET request to `/v2/gen-ai/models/api_keys`.
 */
export interface Api_keysRequestBuilderGetQueryParameters {
    /**
     * Page number.
     */
    page?: number;
    /**
     * Items per page.
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const Api_keysRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/models/api_keys{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Api_keysRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Api_keysRequestBuilderNavigationMetadata: Record<Exclude<keyof Api_keysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byApi_key_uuid: {
        requestsMetadata: WithApi_key_uuItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithApi_key_uuItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["api_key_uuid"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Api_keysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Api_keysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListModelAPIKeysOutputFromDiscriminatorValue,
        queryParametersMapper: Api_keysRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: Api_keysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiCreateModelAPIKeyOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiCreateModelAPIKeyInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
