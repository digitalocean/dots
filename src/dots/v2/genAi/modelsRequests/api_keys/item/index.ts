/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiDeleteModelAPIKeyOutputFromDiscriminatorValue, createApiUpdateModelAPIKeyOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApiUpdateModelAPIKeyInputPublic, serializeApiUpdateModelAPIKeyOutput, type ApiDeleteModelAPIKeyOutput, type ApiUpdateModelAPIKeyInputPublic, type ApiUpdateModelAPIKeyOutput, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { RegenerateRequestBuilderRequestsMetadata, type RegenerateRequestBuilder } from './regenerate/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/models/api_keys/{api_key_uuid}
 */
export interface WithApi_key_uuItemRequestBuilder extends BaseRequestBuilder<WithApi_key_uuItemRequestBuilder> {
    /**
     * The regenerate property
     */
    get regenerate(): RegenerateRequestBuilder;
    /**
     * To delete an API key for a model, send a DELETE request to `/v2/gen-ai/models/api_keys/{api_key_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiDeleteModelAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiDeleteModelAPIKeyOutput | undefined>;
    /**
     * To update a model API key, send a PUT request to `/v2/gen-ai/models/api_keys/{api_key_uuid}`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiUpdateModelAPIKeyOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: ApiUpdateModelAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApiUpdateModelAPIKeyOutput | undefined>;
    /**
     * To delete an API key for a model, send a DELETE request to `/v2/gen-ai/models/api_keys/{api_key_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update a model API key, send a PUT request to `/v2/gen-ai/models/api_keys/{api_key_uuid}`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: ApiUpdateModelAPIKeyInputPublic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithApi_key_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/models/api_keys/{api_key_uuid}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithApi_key_uuItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithApi_key_uuItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    regenerate: {
        requestsMetadata: RegenerateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithApi_key_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithApi_key_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiDeleteModelAPIKeyOutputFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithApi_key_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiUpdateModelAPIKeyOutputFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApiUpdateModelAPIKeyInputPublic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
