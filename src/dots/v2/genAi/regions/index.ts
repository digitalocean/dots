/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApiListRegionsOutputFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type ApiListRegionsOutput, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/gen-ai/regions
 */
export interface RegionsRequestBuilder extends BaseRequestBuilder<RegionsRequestBuilder> {
    /**
     * To list all datacenter regions, send a GET request to `/v2/gen-ai/regions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApiListRegionsOutput>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RegionsRequestBuilderGetQueryParameters> | undefined) : Promise<ApiListRegionsOutput | undefined>;
    /**
     * To list all datacenter regions, send a GET request to `/v2/gen-ai/regions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RegionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To list all datacenter regions, send a GET request to `/v2/gen-ai/regions`.
 */
export interface RegionsRequestBuilderGetQueryParameters {
    /**
     * Include datacenters that are capable of running batch jobs.
     */
    servesBatch?: boolean;
    /**
     * Include datacenters that serve inference.
     */
    servesInference?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const RegionsRequestBuilderUriTemplate = "{+baseurl}/v2/gen-ai/regions{?serves_batch*,serves_inference*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RegionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "servesBatch": "serves_batch",
    "servesInference": "serves_inference",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RegionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RegionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApiListRegionsOutputFromDiscriminatorValue,
        queryParametersMapper: RegionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
