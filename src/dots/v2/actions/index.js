/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeAction, serializeMeta_properties, serializePage_links } from '../../models/index.js';
// @ts-ignore
import { WithAction_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsGetResponse}
 */
// @ts-ignore
export function createActionsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoActionsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsGetResponse(actionsGetResponse = {}) {
    return {
        "actions": n => { actionsGetResponse.actions = n.getCollectionOfObjectValues(createActionFromDiscriminatorValue); },
        "links": n => { actionsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { actionsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsGetResponse(writer, actionsGetResponse = {}) {
    if (actionsGetResponse) {
        writer.writeCollectionOfObjectValues("actions", actionsGetResponse.actions, serializeAction);
        writer.writeObjectValue("links", actionsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", actionsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/actions{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ActionsRequestBuilderNavigationMetadata = {
    byAction_id: {
        requestsMetadata: WithAction_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["action_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createActionsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ActionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
