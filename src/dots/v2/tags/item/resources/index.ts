/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, serializeTags_resource, type ErrorEscaped, type Tags_resource } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/tags/{tag_id}/resources
 */
export interface ResourcesRequestBuilder extends BaseRequestBuilder<ResourcesRequestBuilder> {
    /**
     * Resources can be untagged by sending a DELETE request to`/v2/tags/$TAG_NAME/resources` with an array of json objects containing`resource_id` and `resource_type` attributes.Currently only untagging of Droplets, Databases, Images, Volumes, and VolumeSnapshots is supported. `resource_type` is expected to be the string `droplet`,`database`, `image`, `volume` or `volume_snapshot`. `resource_id` is expectedto be the ID of the resource as a string.In order to untag a resource, you must have both `tag:delete` and `<resource type>:update` scopes. For example, to untag a Droplet, you must have `tag:delete` and `droplet:update`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(body: Tags_resource, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Resources can be tagged by sending a POST request to`/v2/tags/$TAG_NAME/resources` with an array of json objects containing`resource_id` and `resource_type` attributes.Currently only tagging of Droplets, Databases, Images, Volumes, and VolumeSnapshots is supported. `resource_type` is expected to be the string `droplet`,`database`, `image`, `volume` or `volume_snapshot`. `resource_id` is expectedto be the ID of the resource as a string.In order to tag a resource, you must have both `tag:create` and `<resource type>:update` scopes. For example, to tag a Droplet, you must have `tag:create` and `droplet:update`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Tags_resource, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Resources can be untagged by sending a DELETE request to`/v2/tags/$TAG_NAME/resources` with an array of json objects containing`resource_id` and `resource_type` attributes.Currently only untagging of Droplets, Databases, Images, Volumes, and VolumeSnapshots is supported. `resource_type` is expected to be the string `droplet`,`database`, `image`, `volume` or `volume_snapshot`. `resource_id` is expectedto be the ID of the resource as a string.In order to untag a resource, you must have both `tag:delete` and `<resource type>:update` scopes. For example, to untag a Droplet, you must have `tag:delete` and `droplet:update`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: Tags_resource, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Resources can be tagged by sending a POST request to`/v2/tags/$TAG_NAME/resources` with an array of json objects containing`resource_id` and `resource_type` attributes.Currently only tagging of Droplets, Databases, Images, Volumes, and VolumeSnapshots is supported. `resource_type` is expected to be the string `droplet`,`database`, `image`, `volume` or `volume_snapshot`. `resource_id` is expectedto be the ID of the resource as a string.In order to tag a resource, you must have both `tag:create` and `<resource type>:update` scopes. For example, to tag a Droplet, you must have `tag:create` and `droplet:update`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Tags_resource, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ResourcesRequestBuilderUriTemplate = "{+baseurl}/v2/tags/{tag_id}/resources";
/**
 * Metadata for all the requests in the request builder.
 */
export const ResourcesRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ResourcesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTags_resource,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: ResourcesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTags_resource,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
