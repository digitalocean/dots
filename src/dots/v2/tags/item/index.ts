/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createTagsFromDiscriminatorValue, serializeTags, type ErrorEscaped, type Tags } from '../../../models/index.js';
// @ts-ignore
import { ResourcesRequestBuilderRequestsMetadata, type ResourcesRequestBuilder } from './resources/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithTag_GetResponse}
 */
// @ts-ignore
export function createWithTag_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithTag_GetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithTag_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithTag_GetResponse(withTag_GetResponse: Partial<WithTag_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "tag": n => { withTag_GetResponse.tag = n.getObjectValue<Tags>(createTagsFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithTag_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithTag_GetResponse(writer: SerializationWriter, withTag_GetResponse: Partial<WithTag_GetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withTag_GetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Tags>("tag", withTag_GetResponse.tag, serializeTags);
    writer.writeAdditionalData(withTag_GetResponse.additionalData);
}
export interface WithTag_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * A tag is a label that can be applied to a resource (currently Droplets, Images, Volumes, Volume Snapshots, and Database clusters) in order to better organize or facilitate the lookups and actions on it.Tags have two attributes: a user defined `name` attribute and an embedded `resources` attribute with information about resources that have been tagged.
     */
    tag?: Tags | null;
}
/**
 * Builds and executes requests for operations under /v2/tags/{tag_id}
 */
export interface WithTag_ItemRequestBuilder extends BaseRequestBuilder<WithTag_ItemRequestBuilder> {
    /**
     * The resources property
     */
    get resources(): ResourcesRequestBuilder;
    /**
     * A tag can be deleted by sending a `DELETE` request to `/v2/tags/$TAG_NAME`. Deleting a tag also untags all the resources that have previously been tagged by the Tag
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To retrieve an individual tag, you can send a `GET` request to`/v2/tags/$TAG_NAME`.This endpoint will only return tagged resources that you are authorized to see.For example, to see tagged Droplets, include the `droplet:read` scope.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithTag_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithTag_GetResponse | undefined>;
    /**
     * A tag can be deleted by sending a `DELETE` request to `/v2/tags/$TAG_NAME`. Deleting a tag also untags all the resources that have previously been tagged by the Tag
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve an individual tag, you can send a `GET` request to`/v2/tags/$TAG_NAME`.This endpoint will only return tagged resources that you are authorized to see.For example, to see tagged Droplets, include the `droplet:read` scope.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithTag_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/tags/{tag_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithTag_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithTag_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    resources: {
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithTag_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithTag_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithTag_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithTag_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
