/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createError_with_root_causesFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createTagsFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeTags } from '../../models/index.js';
// @ts-ignore
import { WithTag_ItemRequestBuilderNavigationMetadata, WithTag_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagsGetResponse}
 */
// @ts-ignore
export function createTagsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoTagsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagsPostResponse}
 */
// @ts-ignore
export function createTagsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoTagsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagsGetResponse(tagsGetResponse = {}) {
    return {
        "links": n => { tagsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { tagsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "tags": n => { tagsGetResponse.tags = n.getCollectionOfObjectValues(createTagsFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagsPostResponse(tagsPostResponse = {}) {
    return {
        "tag": n => { tagsPostResponse.tag = n.getObjectValue(createTagsFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagsGetResponse(writer, tagsGetResponse = {}) {
    if (tagsGetResponse) {
        writer.writeObjectValue("links", tagsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", tagsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("tags", tagsGetResponse.tags, serializeTags);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagsPostResponse(writer, tagsPostResponse = {}) {
    if (tagsPostResponse) {
        writer.writeObjectValue("tag", tagsPostResponse.tag, serializeTags);
    }
}
/**
 * Uri template for the request builder.
 */
export const TagsRequestBuilderUriTemplate = "{+baseurl}/v2/tags{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TagsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TagsRequestBuilderNavigationMetadata = {
    byTag_id: {
        requestsMetadata: WithTag_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithTag_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["tag_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TagsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: TagsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createTagsGetResponseFromDiscriminatorValue,
        queryParametersMapper: TagsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TagsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createError_with_root_causesFromDiscriminatorValue,
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createTagsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTags,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
