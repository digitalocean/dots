/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVpc_nat_gateway_getFromDiscriminatorValue, serializeVpc_nat_gateway_get, serializeVpc_nat_gateway_update, type ErrorEscaped, type Vpc_nat_gateway_get, type Vpc_nat_gateway_update } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_nat_gatewaysGetResponse}
 */
// @ts-ignore
export function createVpc_nat_gatewaysGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_nat_gatewaysGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_nat_gatewaysPutResponse}
 */
// @ts-ignore
export function createVpc_nat_gatewaysPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_nat_gatewaysPutResponse;
}
/**
 * The deserialization information for the current model
 * @param Vpc_nat_gatewaysGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_nat_gatewaysGetResponse(vpc_nat_gatewaysGetResponse: Partial<Vpc_nat_gatewaysGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "vpc_nat_gateway": n => { vpc_nat_gatewaysGetResponse.vpcNatGateway = n.getObjectValue<Vpc_nat_gateway_get>(createVpc_nat_gateway_getFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Vpc_nat_gatewaysPutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_nat_gatewaysPutResponse(vpc_nat_gatewaysPutResponse: Partial<Vpc_nat_gatewaysPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "vpc_nat_gateway": n => { vpc_nat_gatewaysPutResponse.vpcNatGateway = n.getObjectValue<Vpc_nat_gateway_get>(createVpc_nat_gateway_getFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_nat_gatewaysGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_nat_gatewaysGetResponse(writer: SerializationWriter, vpc_nat_gatewaysGetResponse: Partial<Vpc_nat_gatewaysGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_nat_gatewaysGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Vpc_nat_gateway_get>("vpc_nat_gateway", vpc_nat_gatewaysGetResponse.vpcNatGateway, serializeVpc_nat_gateway_get);
    writer.writeAdditionalData(vpc_nat_gatewaysGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_nat_gatewaysPutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_nat_gatewaysPutResponse(writer: SerializationWriter, vpc_nat_gatewaysPutResponse: Partial<Vpc_nat_gatewaysPutResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_nat_gatewaysPutResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Vpc_nat_gateway_get>("vpc_nat_gateway", vpc_nat_gatewaysPutResponse.vpcNatGateway, serializeVpc_nat_gateway_get);
    writer.writeAdditionalData(vpc_nat_gatewaysPutResponse.additionalData);
}
export interface Vpc_nat_gatewaysGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The vpc_nat_gateway property
     */
    vpcNatGateway?: Vpc_nat_gateway_get | null;
}
/**
 * Builds and executes requests for operations under /v2/vpc_nat_gateways/{id}
 */
export interface Vpc_nat_gatewaysItemRequestBuilder extends BaseRequestBuilder<Vpc_nat_gatewaysItemRequestBuilder> {
    /**
     * To destroy a VPC NAT Gateway, send a DELETE request to the `/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID` endpoint.A successful response will include a 202 response code and no content. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an individual VPC NAT gateway, send a GET request to`/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vpc_nat_gatewaysGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Vpc_nat_gatewaysGetResponse | undefined>;
    /**
     * To update the configuration of an existing VPC NAT Gateway, send a PUT request to`/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID`. The request must contain a full representationof the VPC NAT Gateway including existing attributes. 
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vpc_nat_gatewaysPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Vpc_nat_gateway_update, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Vpc_nat_gatewaysPutResponse | undefined>;
    /**
     * To destroy a VPC NAT Gateway, send a DELETE request to the `/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID` endpoint.A successful response will include a 202 response code and no content. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an individual VPC NAT gateway, send a GET request to`/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the configuration of an existing VPC NAT Gateway, send a PUT request to`/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID`. The request must contain a full representationof the VPC NAT Gateway including existing attributes. 
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Vpc_nat_gateway_update, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface Vpc_nat_gatewaysPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * The vpc_nat_gateway property
     */
    vpcNatGateway?: Vpc_nat_gateway_get | null;
}
/**
 * Uri template for the request builder.
 */
export const Vpc_nat_gatewaysItemRequestBuilderUriTemplate = "{+baseurl}/v2/vpc_nat_gateways/{id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const Vpc_nat_gatewaysItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: Vpc_nat_gatewaysItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: Vpc_nat_gatewaysItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVpc_nat_gatewaysGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: Vpc_nat_gatewaysItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVpc_nat_gatewaysPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVpc_nat_gateway_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
