/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVpc_nat_gateway_getFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeVpc_nat_gateway_create, serializeVpc_nat_gateway_get, type ErrorEscaped, type Meta_properties, type Page_links, type Vpc_nat_gateway_create, type Vpc_nat_gateway_get } from '../../models/index.js';
// @ts-ignore
import { type Vpc_nat_gatewaysItemRequestBuilder, Vpc_nat_gatewaysItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_nat_gatewaysGetResponse}
 */
// @ts-ignore
export function createVpc_nat_gatewaysGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_nat_gatewaysGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_nat_gatewaysPostResponse}
 */
// @ts-ignore
export function createVpc_nat_gatewaysPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_nat_gatewaysPostResponse;
}
/**
 * The deserialization information for the current model
 * @param Vpc_nat_gatewaysGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_nat_gatewaysGetResponse(vpc_nat_gatewaysGetResponse: Partial<Vpc_nat_gatewaysGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { vpc_nat_gatewaysGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { vpc_nat_gatewaysGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "vpc_nat_gateways": n => { vpc_nat_gatewaysGetResponse.vpcNatGateways = n.getCollectionOfObjectValues<Vpc_nat_gateway_get>(createVpc_nat_gateway_getFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Vpc_nat_gatewaysPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_nat_gatewaysPostResponse(vpc_nat_gatewaysPostResponse: Partial<Vpc_nat_gatewaysPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "vpc_nat_gateway": n => { vpc_nat_gatewaysPostResponse.vpcNatGateway = n.getObjectValue<Vpc_nat_gateway_get>(createVpc_nat_gateway_getFromDiscriminatorValue); },
    }
}
export type GetRegionQueryParameterType = (typeof GetRegionQueryParameterTypeObject)[keyof typeof GetRegionQueryParameterTypeObject];
export type GetStateQueryParameterType = (typeof GetStateQueryParameterTypeObject)[keyof typeof GetStateQueryParameterTypeObject];
export type GetTypeQueryParameterType = (typeof GetTypeQueryParameterTypeObject)[keyof typeof GetTypeQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_nat_gatewaysGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_nat_gatewaysGetResponse(writer: SerializationWriter, vpc_nat_gatewaysGetResponse: Partial<Vpc_nat_gatewaysGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_nat_gatewaysGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Page_links>("links", vpc_nat_gatewaysGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", vpc_nat_gatewaysGetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues<Vpc_nat_gateway_get>("vpc_nat_gateways", vpc_nat_gatewaysGetResponse.vpcNatGateways, serializeVpc_nat_gateway_get);
    writer.writeAdditionalData(vpc_nat_gatewaysGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_nat_gatewaysPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_nat_gatewaysPostResponse(writer: SerializationWriter, vpc_nat_gatewaysPostResponse: Partial<Vpc_nat_gatewaysPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_nat_gatewaysPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Vpc_nat_gateway_get>("vpc_nat_gateway", vpc_nat_gatewaysPostResponse.vpcNatGateway, serializeVpc_nat_gateway_get);
    writer.writeAdditionalData(vpc_nat_gatewaysPostResponse.additionalData);
}
export interface Vpc_nat_gatewaysGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The vpc_nat_gateways property
     */
    vpcNatGateways?: Vpc_nat_gateway_get[] | null;
}
export interface Vpc_nat_gatewaysPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The vpc_nat_gateway property
     */
    vpcNatGateway?: Vpc_nat_gateway_get | null;
}
/**
 * Builds and executes requests for operations under /v2/vpc_nat_gateways
 */
export interface Vpc_nat_gatewaysRequestBuilder extends BaseRequestBuilder<Vpc_nat_gatewaysRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.vpc_nat_gateways.item collection
     * @param id The unique identifier of the VPC NAT gateway.
     * @returns {Vpc_nat_gatewaysItemRequestBuilder}
     */
     byId(id: string) : Vpc_nat_gatewaysItemRequestBuilder;
    /**
     * To list all VPC NAT gateways in your team, send a GET request to `/v2/vpc_nat_gateways`.The response body will be a JSON object with a key of `vpc_nat_gateways` containing an array of VPC NAT gateway objects.These each contain the standard VPC NAT gateway attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vpc_nat_gatewaysGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<Vpc_nat_gatewaysRequestBuilderGetQueryParameters> | undefined) : Promise<Vpc_nat_gatewaysGetResponse | undefined>;
    /**
     * To create a new VPC NAT gateway, send a POST request to `/v2/vpc_nat_gateways` setting the required attributes.The response body will contain a JSON object with a key called `vpc_nat_gateway` containing the standard attributes for the new VPC NAT gateway.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vpc_nat_gatewaysPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Vpc_nat_gateway_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Vpc_nat_gatewaysPostResponse | undefined>;
    /**
     * To list all VPC NAT gateways in your team, send a GET request to `/v2/vpc_nat_gateways`.The response body will be a JSON object with a key of `vpc_nat_gateways` containing an array of VPC NAT gateway objects.These each contain the standard VPC NAT gateway attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Vpc_nat_gatewaysRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new VPC NAT gateway, send a POST request to `/v2/vpc_nat_gateways` setting the required attributes.The response body will contain a JSON object with a key called `vpc_nat_gateway` containing the standard attributes for the new VPC NAT gateway.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Vpc_nat_gateway_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all VPC NAT gateways in your team, send a GET request to `/v2/vpc_nat_gateways`.The response body will be a JSON object with a key of `vpc_nat_gateways` containing an array of VPC NAT gateway objects.These each contain the standard VPC NAT gateway attributes.
 */
export interface Vpc_nat_gatewaysRequestBuilderGetQueryParameters {
    /**
     * The name of the VPC NAT gateway.
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * The region where the VPC NAT gateway is located.
     */
    region?: GetRegionQueryParameterType;
    /**
     * The current state of the VPC NAT gateway.
     */
    state?: GetStateQueryParameterType;
    /**
     * The type of the VPC NAT gateway.
     */
    type?: GetTypeQueryParameterType;
}
/**
 * Uri template for the request builder.
 */
export const Vpc_nat_gatewaysRequestBuilderUriTemplate = "{+baseurl}/v2/vpc_nat_gateways{?name*,page*,per_page*,region*,state*,type*}";
export const GetRegionQueryParameterTypeObject = {
    Nyc1: "nyc1",
    Nyc2: "nyc2",
    Nyc3: "nyc3",
    Ams2: "ams2",
    Ams3: "ams3",
    Sfo1: "sfo1",
    Sfo2: "sfo2",
    Sfo3: "sfo3",
    Sgp1: "sgp1",
    Lon1: "lon1",
    Fra1: "fra1",
    Tor1: "tor1",
    Blr1: "blr1",
    Syd1: "syd1",
    Atl1: "atl1",
} as const;
export const GetStateQueryParameterTypeObject = {
    NewEscaped: "new",
    Provisioning: "provisioning",
    Active: "active",
    Deleting: "deleting",
    ErrorEscaped: "error",
    Invalid: "invalid",
} as const;
export const GetTypeQueryParameterTypeObject = {
    Public: "public",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Vpc_nat_gatewaysRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Vpc_nat_gatewaysRequestBuilderNavigationMetadata: Record<Exclude<keyof Vpc_nat_gatewaysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: Vpc_nat_gatewaysItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Vpc_nat_gatewaysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Vpc_nat_gatewaysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVpc_nat_gatewaysGetResponseFromDiscriminatorValue,
        queryParametersMapper: Vpc_nat_gatewaysRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: Vpc_nat_gatewaysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVpc_nat_gatewaysPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVpc_nat_gateway_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
