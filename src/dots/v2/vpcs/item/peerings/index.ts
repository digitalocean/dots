/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVpc_peeringFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeVpc_peering, type ErrorEscaped, type Meta_properties, type Page_links, type Vpc_peering } from '../../../../models/index.js';
// @ts-ignore
import { type WithVpc_peering_ItemRequestBuilder, WithVpc_peering_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeeringsGetResponse}
 */
// @ts-ignore
export function createPeeringsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPeeringsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeeringsPostRequestBody}
 */
// @ts-ignore
export function createPeeringsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPeeringsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeeringsPostResponse}
 */
// @ts-ignore
export function createPeeringsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPeeringsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPeeringsGetResponse(peeringsGetResponse: Partial<PeeringsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { peeringsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { peeringsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "peerings": n => { peeringsGetResponse.peerings = n.getCollectionOfObjectValues<Vpc_peering>(createVpc_peeringFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPeeringsPostRequestBody(peeringsPostRequestBody: Partial<PeeringsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { peeringsPostRequestBody.name = n.getStringValue(); },
        "vpc_id": n => { peeringsPostRequestBody.vpcId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPeeringsPostResponse(peeringsPostResponse: Partial<PeeringsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "peering": n => { peeringsPostResponse.peering = n.getObjectValue<Vpc_peering>(createVpc_peeringFromDiscriminatorValue); },
    }
}
export interface PeeringsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The peerings property
     */
    peerings?: Vpc_peering[] | null;
}
export interface PeeringsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the VPC peering. Must be unique and may only contain alphanumeric characters, dashes, and periods.
     */
    name?: string | null;
    /**
     * The ID of the VPC to peer with.
     */
    vpcId?: Guid | null;
}
export interface PeeringsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The peering property
     */
    peering?: Vpc_peering | null;
}
/**
 * Builds and executes requests for operations under /v2/vpcs/{vpc_id}/peerings
 */
export interface PeeringsRequestBuilder extends BaseRequestBuilder<PeeringsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.vpcs.item.peerings.item collection
     * @param vpc_peering_id A unique identifier for a VPC peering.
     * @returns {WithVpc_peering_ItemRequestBuilder}
     */
     byVpc_peering_id(vpc_peering_id: Guid) : WithVpc_peering_ItemRequestBuilder;
    /**
     * To list all of a VPC's peerings, send a GET request to`/v2/vpcs/$VPC_ID/peerings`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PeeringsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PeeringsRequestBuilderGetQueryParameters> | undefined) : Promise<PeeringsGetResponse | undefined>;
    /**
     * To create a new VPC peering for a given VPC, send a POST request to`/v2/vpcs/$VPC_ID/peerings`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PeeringsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: PeeringsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PeeringsPostResponse | undefined>;
    /**
     * To list all of a VPC's peerings, send a GET request to`/v2/vpcs/$VPC_ID/peerings`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PeeringsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new VPC peering for a given VPC, send a POST request to`/v2/vpcs/$VPC_ID/peerings`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: PeeringsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of a VPC's peerings, send a GET request to`/v2/vpcs/$VPC_ID/peerings`.
 */
export interface PeeringsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePeeringsGetResponse(writer: SerializationWriter, peeringsGetResponse: Partial<PeeringsGetResponse> | undefined | null = {}) : void {
    if (peeringsGetResponse) {
        writer.writeObjectValue<Page_links>("links", peeringsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", peeringsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<Vpc_peering>("peerings", peeringsGetResponse.peerings, serializeVpc_peering);
        writer.writeAdditionalData(peeringsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePeeringsPostRequestBody(writer: SerializationWriter, peeringsPostRequestBody: Partial<PeeringsPostRequestBody> | undefined | null = {}) : void {
    if (peeringsPostRequestBody) {
        writer.writeStringValue("name", peeringsPostRequestBody.name);
        writer.writeGuidValue("vpc_id", peeringsPostRequestBody.vpcId);
        writer.writeAdditionalData(peeringsPostRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePeeringsPostResponse(writer: SerializationWriter, peeringsPostResponse: Partial<PeeringsPostResponse> | undefined | null = {}) : void {
    if (peeringsPostResponse) {
        writer.writeObjectValue<Vpc_peering>("peering", peeringsPostResponse.peering, serializeVpc_peering);
        writer.writeAdditionalData(peeringsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const PeeringsRequestBuilderUriTemplate = "{+baseurl}/v2/vpcs/{vpc_id}/peerings{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PeeringsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PeeringsRequestBuilderNavigationMetadata: Record<Exclude<keyof PeeringsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byVpc_peering_id: {
        requestsMetadata: WithVpc_peering_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["vpc_peering_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PeeringsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PeeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPeeringsGetResponseFromDiscriminatorValue,
        queryParametersMapper: PeeringsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: PeeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPeeringsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePeeringsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
