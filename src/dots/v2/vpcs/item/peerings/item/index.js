/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVpc_peeringFromDiscriminatorValue, deserializeIntoVpc_peering_updatable, serializeVpc_peering, serializeVpc_peering_updatable } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithVpc_peering_PatchRequestBody}
 */
// @ts-ignore
export function createWithVpc_peering_PatchRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithVpc_peering_PatchRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithVpc_peering_PatchResponse}
 */
// @ts-ignore
export function createWithVpc_peering_PatchResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithVpc_peering_PatchResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVpc_peering_PatchRequestBody(withVpc_peering_PatchRequestBody = {}) {
    return {
        ...deserializeIntoVpc_peering_updatable(withVpc_peering_PatchRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVpc_peering_PatchResponse(withVpc_peering_PatchResponse = {}) {
    return {
        "peering": n => { withVpc_peering_PatchResponse.peering = n.getObjectValue(createVpc_peeringFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVpc_peering_PatchRequestBody(writer, withVpc_peering_PatchRequestBody = {}) {
    if (withVpc_peering_PatchRequestBody) {
        serializeVpc_peering_updatable(writer, withVpc_peering_PatchRequestBody);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVpc_peering_PatchResponse(writer, withVpc_peering_PatchResponse = {}) {
    if (withVpc_peering_PatchResponse) {
        writer.writeObjectValue("peering", withVpc_peering_PatchResponse.peering, serializeVpc_peering);
        writer.writeAdditionalData(withVpc_peering_PatchResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithVpc_peering_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/vpcs/{vpc_id}/peerings/{vpc_peering_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithVpc_peering_ItemRequestBuilderRequestsMetadata = {
    patch: {
        uriTemplate: WithVpc_peering_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithVpc_peering_PatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithVpc_peering_PatchRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
