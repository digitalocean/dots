/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVpc_peeringFromDiscriminatorValue, deserializeIntoVpc_peering_updatable, serializeVpc_peering, serializeVpc_peering_updatable, type ErrorEscaped, type Vpc_peering, type Vpc_peering_updatable } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithVpc_peering_PatchRequestBody}
 */
// @ts-ignore
export function createWithVpc_peering_PatchRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithVpc_peering_PatchRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithVpc_peering_PatchResponse}
 */
// @ts-ignore
export function createWithVpc_peering_PatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithVpc_peering_PatchResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVpc_peering_PatchRequestBody(withVpc_peering_PatchRequestBody: Partial<WithVpc_peering_PatchRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoVpc_peering_updatable(withVpc_peering_PatchRequestBody),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVpc_peering_PatchResponse(withVpc_peering_PatchResponse: Partial<WithVpc_peering_PatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "peering": n => { withVpc_peering_PatchResponse.peering = n.getObjectValue<Vpc_peering>(createVpc_peeringFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVpc_peering_PatchRequestBody(writer: SerializationWriter, withVpc_peering_PatchRequestBody: Partial<WithVpc_peering_PatchRequestBody> | undefined | null = {}) : void {
    if (withVpc_peering_PatchRequestBody) {
        serializeVpc_peering_updatable(writer, withVpc_peering_PatchRequestBody)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVpc_peering_PatchResponse(writer: SerializationWriter, withVpc_peering_PatchResponse: Partial<WithVpc_peering_PatchResponse> | undefined | null = {}) : void {
    if (withVpc_peering_PatchResponse) {
        writer.writeObjectValue<Vpc_peering>("peering", withVpc_peering_PatchResponse.peering, serializeVpc_peering);
        writer.writeAdditionalData(withVpc_peering_PatchResponse.additionalData);
    }
}
/**
 * Builds and executes requests for operations under /v2/vpcs/{vpc_id}/peerings/{vpc_peering_id}
 */
export interface WithVpc_peering_ItemRequestBuilder extends BaseRequestBuilder<WithVpc_peering_ItemRequestBuilder> {
    /**
     * To update the name of a VPC peering in a particular VPC, send a PATCH request to `/v2/vpcs/$VPC_ID/peerings/$VPC_PEERING_ID` with the new `name` in the request body.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithVpc_peering_PatchResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     patch(body: WithVpc_peering_PatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithVpc_peering_PatchResponse | undefined>;
    /**
     * To update the name of a VPC peering in a particular VPC, send a PATCH request to `/v2/vpcs/$VPC_ID/peerings/$VPC_PEERING_ID` with the new `name` in the request body.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: WithVpc_peering_PatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithVpc_peering_PatchRequestBody extends Parsable, Vpc_peering_updatable {
}
export interface WithVpc_peering_PatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The peering property
     */
    peering?: Vpc_peering | null;
}
/**
 * Uri template for the request builder.
 */
export const WithVpc_peering_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/vpcs/{vpc_id}/peerings/{vpc_peering_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithVpc_peering_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    patch: {
        uriTemplate: WithVpc_peering_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithVpc_peering_PatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithVpc_peering_PatchRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
