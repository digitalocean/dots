/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVpc_peeringFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeVpc_peering } from '../../../../models/index.js';
// @ts-ignore
import { WithVpc_peering_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeeringsGetResponse}
 */
// @ts-ignore
export function createPeeringsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoPeeringsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeeringsPostRequestBody}
 */
// @ts-ignore
export function createPeeringsPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoPeeringsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeeringsPostResponse}
 */
// @ts-ignore
export function createPeeringsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoPeeringsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPeeringsGetResponse(peeringsGetResponse = {}) {
    return {
        "links": n => { peeringsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { peeringsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "peerings": n => { peeringsGetResponse.peerings = n.getCollectionOfObjectValues(createVpc_peeringFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPeeringsPostRequestBody(peeringsPostRequestBody = {}) {
    return {
        "name": n => { peeringsPostRequestBody.name = n.getStringValue(); },
        "vpc_id": n => { peeringsPostRequestBody.vpcId = n.getGuidValue(); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPeeringsPostResponse(peeringsPostResponse = {}) {
    return {
        "peering": n => { peeringsPostResponse.peering = n.getObjectValue(createVpc_peeringFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePeeringsGetResponse(writer, peeringsGetResponse = {}) {
    if (peeringsGetResponse) {
        writer.writeObjectValue("links", peeringsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", peeringsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("peerings", peeringsGetResponse.peerings, serializeVpc_peering);
        writer.writeAdditionalData(peeringsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePeeringsPostRequestBody(writer, peeringsPostRequestBody = {}) {
    if (peeringsPostRequestBody) {
        writer.writeStringValue("name", peeringsPostRequestBody.name);
        writer.writeGuidValue("vpc_id", peeringsPostRequestBody.vpcId);
        writer.writeAdditionalData(peeringsPostRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePeeringsPostResponse(writer, peeringsPostResponse = {}) {
    if (peeringsPostResponse) {
        writer.writeObjectValue("peering", peeringsPostResponse.peering, serializeVpc_peering);
        writer.writeAdditionalData(peeringsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const PeeringsRequestBuilderUriTemplate = "{+baseurl}/v2/vpcs/{vpc_id}/peerings{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PeeringsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PeeringsRequestBuilderNavigationMetadata = {
    byVpc_peering_id: {
        requestsMetadata: WithVpc_peering_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["vpc_peering_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PeeringsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: PeeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createPeeringsGetResponseFromDiscriminatorValue,
        queryParametersMapper: PeeringsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: PeeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createPeeringsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePeeringsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
