/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAction_linkFromDiscriminatorValue, createDroplet_multi_createFromDiscriminatorValue, createDroplet_single_createFromDiscriminatorValue, createDropletFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoDroplet_multi_create, deserializeIntoDroplet_single_create, serializeAction_link, serializeDroplet, serializeDroplet_multi_create, serializeDroplet_single_create, serializeMeta_properties, serializePage_links, type Action_link, type Droplet, type Droplet_multi_create, type Droplet_single_create, type ErrorEscaped, type Meta_properties, type Page_links } from '../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { AutoscaleRequestBuilderNavigationMetadata, AutoscaleRequestBuilderRequestsMetadata, type AutoscaleRequestBuilder } from './autoscale/index.js';
// @ts-ignore
import { BackupsRequestBuilderNavigationMetadata, type BackupsRequestBuilder } from './backups/index.js';
// @ts-ignore
import { type WithDroplet_ItemRequestBuilder, WithDroplet_ItemRequestBuilderNavigationMetadata, WithDroplet_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DropletsGetResponse}
 */
// @ts-ignore
export function createDropletsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Droplet_multi_create | Droplet_single_create}
 */
// @ts-ignore
export function createDropletsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DropletsPostResponseMember1 | DropletsPostResponseMember2}
 */
// @ts-ignore
export function createDropletsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsPostResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DropletsPostResponseMember1_links}
 */
// @ts-ignore
export function createDropletsPostResponseMember1_linksFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsPostResponseMember1_links;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DropletsPostResponseMember1}
 */
// @ts-ignore
export function createDropletsPostResponseMember1FromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsPostResponseMember1;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DropletsPostResponseMember2_links}
 */
// @ts-ignore
export function createDropletsPostResponseMember2_linksFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsPostResponseMember2_links;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DropletsPostResponseMember2}
 */
// @ts-ignore
export function createDropletsPostResponseMember2FromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDropletsPostResponseMember2;
}
/**
 * The deserialization information for the current model
 * @param DropletsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsGetResponse(dropletsGetResponse: Partial<DropletsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "droplets": n => { dropletsGetResponse.droplets = n.getCollectionOfObjectValues<Droplet>(createDropletFromDiscriminatorValue); },
        "links": n => { dropletsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { dropletsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param DropletsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsPostRequestBody(dropletsPostRequestBody: Partial<Droplet_multi_create | Droplet_single_create> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDroplet_multi_create(dropletsPostRequestBody as Droplet_multi_create),
        ...deserializeIntoDroplet_single_create(dropletsPostRequestBody as Droplet_single_create),
    }
}
/**
 * The deserialization information for the current model
 * @param DropletsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsPostResponse(dropletsPostResponse: Partial<DropletsPostResponseMember1 | DropletsPostResponseMember2> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDropletsPostResponseMember1(dropletsPostResponse as DropletsPostResponseMember1),
        ...deserializeIntoDropletsPostResponseMember2(dropletsPostResponse as DropletsPostResponseMember2),
    }
}
/**
 * The deserialization information for the current model
 * @param DropletsPostResponseMember1 The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsPostResponseMember1(dropletsPostResponseMember1: Partial<DropletsPostResponseMember1> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "droplet": n => { dropletsPostResponseMember1.droplet = n.getObjectValue<Droplet>(createDropletFromDiscriminatorValue); },
        "links": n => { dropletsPostResponseMember1.links = n.getObjectValue<DropletsPostResponseMember1_links>(createDropletsPostResponseMember1_linksFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param DropletsPostResponseMember1_links The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsPostResponseMember1_links(dropletsPostResponseMember1_links: Partial<DropletsPostResponseMember1_links> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { dropletsPostResponseMember1_links.actions = n.getCollectionOfObjectValues<Action_link>(createAction_linkFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param DropletsPostResponseMember2 The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsPostResponseMember2(dropletsPostResponseMember2: Partial<DropletsPostResponseMember2> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "droplets": n => { dropletsPostResponseMember2.droplets = n.getCollectionOfObjectValues<Droplet>(createDropletFromDiscriminatorValue); },
        "links": n => { dropletsPostResponseMember2.links = n.getObjectValue<DropletsPostResponseMember2_links>(createDropletsPostResponseMember2_linksFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param DropletsPostResponseMember2_links The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDropletsPostResponseMember2_links(dropletsPostResponseMember2_links: Partial<DropletsPostResponseMember2_links> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { dropletsPostResponseMember2_links.actions = n.getCollectionOfObjectValues<Action_link>(createAction_linkFromDiscriminatorValue); },
    }
}
export interface DropletsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The droplets property
     */
    droplets?: Droplet[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type DropletsPostRequestBody = Droplet_multi_create | Droplet_single_create;
export type DropletsPostResponse = DropletsPostResponseMember1 | DropletsPostResponseMember2;
export interface DropletsPostResponseMember1 extends AdditionalDataHolder, Parsable {
    /**
     * The droplet property
     */
    droplet?: Droplet | null;
    /**
     * The links property
     */
    links?: DropletsPostResponseMember1_links | null;
}
export interface DropletsPostResponseMember1_links extends AdditionalDataHolder, Parsable {
    /**
     * The actions property
     */
    actions?: Action_link[] | null;
}
export interface DropletsPostResponseMember2 extends AdditionalDataHolder, Parsable {
    /**
     * The droplets property
     */
    droplets?: Droplet[] | null;
    /**
     * The links property
     */
    links?: DropletsPostResponseMember2_links | null;
}
export interface DropletsPostResponseMember2_links extends AdditionalDataHolder, Parsable {
    /**
     * The actions property
     */
    actions?: Action_link[] | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets
 */
export interface DropletsRequestBuilder extends BaseRequestBuilder<DropletsRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * The autoscale property
     */
    get autoscale(): AutoscaleRequestBuilder;
    /**
     * The backups property
     */
    get backups(): BackupsRequestBuilder;
    /**
     * Gets an item from the ApiSdk.v2.droplets.item collection
     * @param droplet_id A unique identifier for a Droplet instance.
     * @returns {WithDroplet_ItemRequestBuilder}
     */
     byDroplet_id(droplet_id: number) : WithDroplet_ItemRequestBuilder;
    /**
     * To delete **all** Droplets assigned to a specific tag, include the `tag_name`query parameter set to the name of the tag in your DELETE request. Forexample, `/v2/droplets?tag_name=$TAG_NAME`.This endpoint requires `tag:read` scope.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<DropletsRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt's possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DropletsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DropletsRequestBuilderGetQueryParameters> | undefined) : Promise<DropletsGetResponse | undefined>;
    /**
     * To create a new Droplet, send a POST request to `/v2/droplets` setting therequired attributes.A Droplet will be created using the provided information. The response bodywill contain a JSON object with a key called `droplet`. The value will be anobject containing the standard attributes for your new Droplet. The responsecode, 202 Accepted, does not indicate the success or failure of the operation,just that the request has been accepted for processing. The `actions` returnedas part of the response's `links` object can be used to check the statusof the Droplet create event.### Create Multiple DropletsCreating multiple Droplets is very similar to creating a single Droplet.Instead of sending `name` as a string, send `names` as an array of strings. ADroplet will be created for each name you send using the associatedinformation. Up to ten Droplets may be created this way at a time.Rather than returning a single Droplet, the response body will contain a JSONarray with a key called `droplets`. This will be set to an array of JSONobjects, each of which will contain the standard Droplet attributes. Theresponse code, 202 Accepted, does not indicate the success or failure of anyoperation, just that the request has been accepted for processing. The arrayof `actions` returned as part of the response's `links` object can be used tocheck the status of each individual Droplet create event.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DropletsPostResponseMember1 | DropletsPostResponseMember2>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Droplet_multi_create | Droplet_single_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DropletsPostResponseMember1 | DropletsPostResponseMember2 | undefined>;
    /**
     * To delete **all** Droplets assigned to a specific tag, include the `tag_name`query parameter set to the name of the tag in your DELETE request. Forexample, `/v2/droplets?tag_name=$TAG_NAME`.This endpoint requires `tag:read` scope.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<DropletsRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt's possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DropletsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new Droplet, send a POST request to `/v2/droplets` setting therequired attributes.A Droplet will be created using the provided information. The response bodywill contain a JSON object with a key called `droplet`. The value will be anobject containing the standard attributes for your new Droplet. The responsecode, 202 Accepted, does not indicate the success or failure of the operation,just that the request has been accepted for processing. The `actions` returnedas part of the response's `links` object can be used to check the statusof the Droplet create event.### Create Multiple DropletsCreating multiple Droplets is very similar to creating a single Droplet.Instead of sending `name` as a string, send `names` as an array of strings. ADroplet will be created for each name you send using the associatedinformation. Up to ten Droplets may be created this way at a time.Rather than returning a single Droplet, the response body will contain a JSONarray with a key called `droplets`. This will be set to an array of JSONobjects, each of which will contain the standard Droplet attributes. Theresponse code, 202 Accepted, does not indicate the success or failure of anyoperation, just that the request has been accepted for processing. The arrayof `actions` returned as part of the response's `links` object can be used tocheck the status of each individual Droplet create event.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Droplet_multi_create | Droplet_single_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To delete **all** Droplets assigned to a specific tag, include the `tag_name`query parameter set to the name of the tag in your DELETE request. Forexample, `/v2/droplets?tag_name=$TAG_NAME`.This endpoint requires `tag:read` scope.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
 */
export interface DropletsRequestBuilderDeleteQueryParameters {
    /**
     * Specifies Droplets to be deleted by tag.
     */
    tagName?: string;
}
/**
 * To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt's possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
 */
export interface DropletsRequestBuilderGetQueryParameters {
    /**
     * Used to filter list response by Droplet name returning only exact matches. It is case-insensitive and can not be combined with `tag_name`.
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * Used to filter Droplets by a specific tag. Can not be combined with `name` or `type`.<br>Requires `tag:read` scope.
     */
    tagName?: string;
    /**
     * When `type` is set to `gpus`, only GPU Droplets will be returned. By default, only non-GPU Droplets are returned. Can not be combined with `tag_name`.
     */
    type?: GetTypeQueryParameterType;
}
export type GetTypeQueryParameterType = (typeof GetTypeQueryParameterTypeObject)[keyof typeof GetTypeQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param DropletsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsGetResponse(writer: SerializationWriter, dropletsGetResponse: Partial<DropletsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dropletsGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Droplet>("droplets", dropletsGetResponse.droplets, serializeDroplet);
    writer.writeObjectValue<Page_links>("links", dropletsGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", dropletsGetResponse.meta, serializeMeta_properties);
    writer.writeAdditionalData(dropletsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param DropletsPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsPostRequestBody(writer: SerializationWriter, dropletsPostRequestBody: Partial<Droplet_multi_create | Droplet_single_create> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    serializeDroplet_multi_create(writer, dropletsPostRequestBody as Droplet_multi_create);
    serializeDroplet_single_create(writer, dropletsPostRequestBody as Droplet_single_create);
}
/**
 * Serializes information the current object
 * @param DropletsPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsPostResponse(writer: SerializationWriter, dropletsPostResponse: Partial<DropletsPostResponseMember1 | DropletsPostResponseMember2> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    serializeDropletsPostResponseMember1(writer, dropletsPostResponse as DropletsPostResponseMember1);
    serializeDropletsPostResponseMember2(writer, dropletsPostResponse as DropletsPostResponseMember2);
}
/**
 * Serializes information the current object
 * @param DropletsPostResponseMember1 The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsPostResponseMember1(writer: SerializationWriter, dropletsPostResponseMember1: Partial<DropletsPostResponseMember1> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dropletsPostResponseMember1 || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Droplet>("droplet", dropletsPostResponseMember1.droplet, serializeDroplet);
    writer.writeObjectValue<DropletsPostResponseMember1_links>("links", dropletsPostResponseMember1.links, serializeDropletsPostResponseMember1_links);
    writer.writeAdditionalData(dropletsPostResponseMember1.additionalData);
}
/**
 * Serializes information the current object
 * @param DropletsPostResponseMember1_links The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsPostResponseMember1_links(writer: SerializationWriter, dropletsPostResponseMember1_links: Partial<DropletsPostResponseMember1_links> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dropletsPostResponseMember1_links || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Action_link>("actions", dropletsPostResponseMember1_links.actions, serializeAction_link);
    writer.writeAdditionalData(dropletsPostResponseMember1_links.additionalData);
}
/**
 * Serializes information the current object
 * @param DropletsPostResponseMember2 The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsPostResponseMember2(writer: SerializationWriter, dropletsPostResponseMember2: Partial<DropletsPostResponseMember2> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dropletsPostResponseMember2 || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Droplet>("droplets", dropletsPostResponseMember2.droplets, serializeDroplet);
    writer.writeObjectValue<DropletsPostResponseMember2_links>("links", dropletsPostResponseMember2.links, serializeDropletsPostResponseMember2_links);
    writer.writeAdditionalData(dropletsPostResponseMember2.additionalData);
}
/**
 * Serializes information the current object
 * @param DropletsPostResponseMember2_links The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDropletsPostResponseMember2_links(writer: SerializationWriter, dropletsPostResponseMember2_links: Partial<DropletsPostResponseMember2_links> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dropletsPostResponseMember2_links || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Action_link>("actions", dropletsPostResponseMember2_links.actions, serializeAction_link);
    writer.writeAdditionalData(dropletsPostResponseMember2_links.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const DropletsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets{?name*,page*,per_page*,tag_name*,type*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DropletsRequestBuilderDeleteQueryParametersMapper: Record<string, string> = {
    "tagName": "tag_name",
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DropletsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
    "tagName": "tag_name",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DropletsRequestBuilderNavigationMetadata: Record<Exclude<keyof DropletsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDroplet_id: {
        requestsMetadata: WithDroplet_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithDroplet_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["droplet_id"],
    },
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
    },
    autoscale: {
        requestsMetadata: AutoscaleRequestBuilderRequestsMetadata,
        navigationMetadata: AutoscaleRequestBuilderNavigationMetadata,
    },
    backups: {
        navigationMetadata: BackupsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DropletsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DropletsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        queryParametersMapper: DropletsRequestBuilderDeleteQueryParametersMapper,
    },
    get: {
        uriTemplate: DropletsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDropletsGetResponseFromDiscriminatorValue,
        queryParametersMapper: DropletsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DropletsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDropletsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDropletsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
export const GetTypeQueryParameterTypeObject = {
    Droplets: "droplets",
    Gpus: "gpus",
} as const;
/* tslint:enable */
/* eslint-enable */
