/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDropletFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDroplet, type Droplet, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NeighborsGetResponse}
 */
// @ts-ignore
export function createNeighborsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNeighborsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNeighborsGetResponse(neighborsGetResponse: Partial<NeighborsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "droplets": n => { neighborsGetResponse.droplets = n.getCollectionOfObjectValues<Droplet>(createDropletFromDiscriminatorValue); },
    }
}
export interface NeighborsGetResponse extends Parsable {
    /**
     * The droplets property
     */
    droplets?: Droplet[] | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/{droplet_id}/neighbors
 */
export interface NeighborsRequestBuilder extends BaseRequestBuilder<NeighborsRequestBuilder> {
    /**
     * To retrieve a list of any "neighbors" (i.e. Droplets that are co-located onthe same physical hardware) for a specific Droplet, send a GET request to`/v2/droplets/$DROPLET_ID/neighbors`.The results will be returned as a JSON object with a key of `droplets`. Thiswill be set to an array containing objects representing any other Dropletsthat share the same physical hardware. An empty array indicates that theDroplet is not co-located any other Droplets associated with your account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NeighborsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<NeighborsGetResponse | undefined>;
    /**
     * To retrieve a list of any "neighbors" (i.e. Droplets that are co-located onthe same physical hardware) for a specific Droplet, send a GET request to`/v2/droplets/$DROPLET_ID/neighbors`.The results will be returned as a JSON object with a key of `droplets`. Thiswill be set to an array containing objects representing any other Dropletsthat share the same physical hardware. An empty array indicates that theDroplet is not co-located any other Droplets associated with your account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNeighborsGetResponse(writer: SerializationWriter, neighborsGetResponse: Partial<NeighborsGetResponse> | undefined | null = {}) : void {
    if (neighborsGetResponse) {
        writer.writeCollectionOfObjectValues<Droplet>("droplets", neighborsGetResponse.droplets, serializeDroplet);
    }
}
/**
 * Uri template for the request builder.
 */
export const NeighborsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/{droplet_id}/neighbors";
/**
 * Metadata for all the requests in the request builder.
 */
export const NeighborsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: NeighborsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNeighborsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
