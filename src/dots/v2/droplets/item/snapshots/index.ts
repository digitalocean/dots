/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDroplet_snapshotFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeDroplet_snapshot, serializeMeta_properties, serializePage_links, type Droplet_snapshot, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SnapshotsGetResponse}
 */
// @ts-ignore
export function createSnapshotsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSnapshotsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSnapshotsGetResponse(snapshotsGetResponse: Partial<SnapshotsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { snapshotsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { snapshotsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "snapshots": n => { snapshotsGetResponse.snapshots = n.getCollectionOfObjectValues<Droplet_snapshot>(createDroplet_snapshotFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSnapshotsGetResponse(writer: SerializationWriter, snapshotsGetResponse: Partial<SnapshotsGetResponse> | undefined | null = {}) : void {
    if (snapshotsGetResponse) {
        writer.writeObjectValue<Page_links>("links", snapshotsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", snapshotsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<Droplet_snapshot>("snapshots", snapshotsGetResponse.snapshots, serializeDroplet_snapshot);
        writer.writeAdditionalData(snapshotsGetResponse.additionalData);
    }
}
export interface SnapshotsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The snapshots property
     */
    snapshots?: Droplet_snapshot[] | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/{droplet_id}/snapshots
 */
export interface SnapshotsRequestBuilder extends BaseRequestBuilder<SnapshotsRequestBuilder> {
    /**
     * To retrieve the snapshots that have been created from a Droplet, send a GETrequest to `/v2/droplets/$DROPLET_ID/snapshots`.You will get back a JSON object that has a `snapshots` key. This will be setto an array of snapshot objects, each of which contain the standard Dropletsnapshot attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SnapshotsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : Promise<SnapshotsGetResponse | undefined>;
    /**
     * To retrieve the snapshots that have been created from a Droplet, send a GETrequest to `/v2/droplets/$DROPLET_ID/snapshots`.You will get back a JSON object that has a `snapshots` key. This will be setto an array of snapshot objects, each of which contain the standard Dropletsnapshot attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve the snapshots that have been created from a Droplet, send a GETrequest to `/v2/droplets/$DROPLET_ID/snapshots`.You will get back a JSON object that has a `snapshots` key. This will be setto an array of snapshot objects, each of which contain the standard Dropletsnapshot attributes.
 */
export interface SnapshotsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const SnapshotsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/{droplet_id}/snapshots{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SnapshotsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SnapshotsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SnapshotsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSnapshotsGetResponseFromDiscriminatorValue,
        queryParametersMapper: SnapshotsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
