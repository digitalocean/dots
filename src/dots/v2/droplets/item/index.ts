/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDropletFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDroplet, type Droplet, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { BackupsRequestBuilderNavigationMetadata, BackupsRequestBuilderRequestsMetadata, type BackupsRequestBuilder } from './backups/index.js';
// @ts-ignore
import { Destroy_with_associated_resourcesRequestBuilderNavigationMetadata, Destroy_with_associated_resourcesRequestBuilderRequestsMetadata, type Destroy_with_associated_resourcesRequestBuilder } from './destroy_with_associated_resources/index.js';
// @ts-ignore
import { FirewallsRequestBuilderRequestsMetadata, type FirewallsRequestBuilder } from './firewalls/index.js';
// @ts-ignore
import { KernelsRequestBuilderRequestsMetadata, type KernelsRequestBuilder } from './kernels/index.js';
// @ts-ignore
import { NeighborsRequestBuilderRequestsMetadata, type NeighborsRequestBuilder } from './neighbors/index.js';
// @ts-ignore
import { SnapshotsRequestBuilderRequestsMetadata, type SnapshotsRequestBuilder } from './snapshots/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDroplet_GetResponse}
 */
// @ts-ignore
export function createWithDroplet_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDroplet_GetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithDroplet_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDroplet_GetResponse(withDroplet_GetResponse: Partial<WithDroplet_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "droplet": n => { withDroplet_GetResponse.droplet = n.getObjectValue<Droplet>(createDropletFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithDroplet_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDroplet_GetResponse(writer: SerializationWriter, withDroplet_GetResponse: Partial<WithDroplet_GetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withDroplet_GetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Droplet>("droplet", withDroplet_GetResponse.droplet, serializeDroplet);
    writer.writeAdditionalData(withDroplet_GetResponse.additionalData);
}
export interface WithDroplet_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The droplet property
     */
    droplet?: Droplet | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/{droplet_id}
 */
export interface WithDroplet_ItemRequestBuilder extends BaseRequestBuilder<WithDroplet_ItemRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * The backups property
     */
    get backups(): BackupsRequestBuilder;
    /**
     * The destroy_with_associated_resources property
     */
    get destroy_with_associated_resources(): Destroy_with_associated_resourcesRequestBuilder;
    /**
     * The firewalls property
     */
    get firewalls(): FirewallsRequestBuilder;
    /**
     * The kernels property
     */
    get kernels(): KernelsRequestBuilder;
    /**
     * The neighbors property
     */
    get neighbors(): NeighborsRequestBuilder;
    /**
     * The snapshots property
     */
    get snapshots(): SnapshotsRequestBuilder;
    /**
     * To delete a Droplet, send a DELETE request to `/v2/droplets/$DROPLET_ID`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an individual Droplet, send a GET request to`/v2/droplets/$DROPLET_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDroplet_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDroplet_GetResponse | undefined>;
    /**
     * To delete a Droplet, send a DELETE request to `/v2/droplets/$DROPLET_ID`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an individual Droplet, send a GET request to`/v2/droplets/$DROPLET_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithDroplet_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/{droplet_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithDroplet_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithDroplet_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
    backups: {
        requestsMetadata: BackupsRequestBuilderRequestsMetadata,
        navigationMetadata: BackupsRequestBuilderNavigationMetadata,
    },
    destroy_with_associated_resources: {
        requestsMetadata: Destroy_with_associated_resourcesRequestBuilderRequestsMetadata,
        navigationMetadata: Destroy_with_associated_resourcesRequestBuilderNavigationMetadata,
    },
    firewalls: {
        requestsMetadata: FirewallsRequestBuilderRequestsMetadata,
    },
    kernels: {
        requestsMetadata: KernelsRequestBuilderRequestsMetadata,
    },
    neighbors: {
        requestsMetadata: NeighborsRequestBuilderRequestsMetadata,
    },
    snapshots: {
        requestsMetadata: SnapshotsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDroplet_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithDroplet_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDroplet_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDroplet_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
