/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDroplet_snapshotFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeDroplet_snapshot, serializeMeta_properties, serializePage_links, type Droplet_snapshot, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../../models/index.js';
// @ts-ignore
import { PolicyRequestBuilderRequestsMetadata, type PolicyRequestBuilder } from './policy/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BackupsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The backups property
     */
    backups?: Droplet_snapshot[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/{droplet_id}/backups
 */
export interface BackupsRequestBuilder extends BaseRequestBuilder<BackupsRequestBuilder> {
    /**
     * The policy property
     */
    get policy(): PolicyRequestBuilder;
    /**
     * To retrieve any backups associated with a Droplet, send a GET request to`/v2/droplets/$DROPLET_ID/backups`.You will get back a JSON object that has a `backups` key. This will be set toan array of backup objects, each of which contain the standardDroplet backup attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BackupsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<BackupsRequestBuilderGetQueryParameters> | undefined) : Promise<BackupsGetResponse | undefined>;
    /**
     * To retrieve any backups associated with a Droplet, send a GET request to`/v2/droplets/$DROPLET_ID/backups`.You will get back a JSON object that has a `backups` key. This will be set toan array of backup objects, each of which contain the standardDroplet backup attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BackupsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve any backups associated with a Droplet, send a GET request to`/v2/droplets/$DROPLET_ID/backups`.You will get back a JSON object that has a `backups` key. This will be set toan array of backup objects, each of which contain the standardDroplet backup attributes.
 */
export interface BackupsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BackupsGetResponse}
 */
// @ts-ignore
export function createBackupsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBackupsGetResponse;
}
/**
 * The deserialization information for the current model
 * @param BackupsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBackupsGetResponse(backupsGetResponse: Partial<BackupsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backups": n => { backupsGetResponse.backups = n.getCollectionOfObjectValues<Droplet_snapshot>(createDroplet_snapshotFromDiscriminatorValue); },
        "links": n => { backupsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { backupsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param BackupsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBackupsGetResponse(writer: SerializationWriter, backupsGetResponse: Partial<BackupsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!backupsGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Droplet_snapshot>("backups", backupsGetResponse.backups, serializeDroplet_snapshot);
    writer.writeObjectValue<Page_links>("links", backupsGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", backupsGetResponse.meta, serializeMeta_properties);
    writer.writeAdditionalData(backupsGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const BackupsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/{droplet_id}/backups{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BackupsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BackupsRequestBuilderNavigationMetadata: Record<Exclude<keyof BackupsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    policy: {
        requestsMetadata: PolicyRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BackupsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BackupsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBackupsGetResponseFromDiscriminatorValue,
        queryParametersMapper: BackupsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
