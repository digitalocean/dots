/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDroplet_backup_policy_recordFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDroplet_backup_policy_record, type Droplet_backup_policy_record, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyGetResponse}
 */
// @ts-ignore
export function createPolicyGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPolicyGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPolicyGetResponse(policyGetResponse: Partial<PolicyGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "policy": n => { policyGetResponse.policy = n.getObjectValue<Droplet_backup_policy_record>(createDroplet_backup_policy_recordFromDiscriminatorValue); },
    }
}
export interface PolicyGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The policy property
     */
    policy?: Droplet_backup_policy_record | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/{droplet_id}/backups/policy
 */
export interface PolicyRequestBuilder extends BaseRequestBuilder<PolicyRequestBuilder> {
    /**
     * To show information about an individual Droplet's backup policy, send a GETrequest to `/v2/droplets/$DROPLET_ID/backups/policy`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PolicyGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PolicyGetResponse | undefined>;
    /**
     * To show information about an individual Droplet's backup policy, send a GETrequest to `/v2/droplets/$DROPLET_ID/backups/policy`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePolicyGetResponse(writer: SerializationWriter, policyGetResponse: Partial<PolicyGetResponse> | undefined | null = {}) : void {
    if (policyGetResponse) {
        writer.writeObjectValue<Droplet_backup_policy_record>("policy", policyGetResponse.policy, serializeDroplet_backup_policy_record);
        writer.writeAdditionalData(policyGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const PolicyRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/{droplet_id}/backups/policy";
/**
 * Metadata for all the requests in the request builder.
 */
export const PolicyRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PolicyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPolicyGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
