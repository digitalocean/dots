/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionFromDiscriminatorValue, createDroplet_action_change_backup_policyFromDiscriminatorValue, createDroplet_action_change_kernelFromDiscriminatorValue, createDroplet_action_enable_backupsFromDiscriminatorValue, createDroplet_action_rebuildFromDiscriminatorValue, createDroplet_action_renameFromDiscriminatorValue, createDroplet_action_resizeFromDiscriminatorValue, createDroplet_action_restoreFromDiscriminatorValue, createDroplet_action_snapshotFromDiscriminatorValue, createDroplet_actionFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoDroplet_action, deserializeIntoDroplet_action_change_backup_policy, deserializeIntoDroplet_action_change_kernel, deserializeIntoDroplet_action_enable_backups, deserializeIntoDroplet_action_rebuild, deserializeIntoDroplet_action_rename, deserializeIntoDroplet_action_resize, deserializeIntoDroplet_action_restore, deserializeIntoDroplet_action_snapshot, serializeAction, serializeDroplet_action, serializeDroplet_action_change_backup_policy, serializeDroplet_action_change_kernel, serializeDroplet_action_enable_backups, serializeDroplet_action_rebuild, serializeDroplet_action_rename, serializeDroplet_action_resize, serializeDroplet_action_restore, serializeDroplet_action_snapshot, serializeMeta_properties, serializePage_links, type Action, type Droplet_action, type Droplet_action_change_backup_policy, type Droplet_action_change_kernel, type Droplet_action_enable_backups, type Droplet_action_rebuild, type Droplet_action_rename, type Droplet_action_resize, type Droplet_action_restore, type Droplet_action_snapshot, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../../models/index.js';
// @ts-ignore
import { type WithAction_ItemRequestBuilder, WithAction_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActionsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The actions property
     */
    actions?: Action[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type ActionsPostRequestBody = Droplet_action_change_backup_policy | Droplet_action_change_kernel | Droplet_action_enable_backups | Droplet_action | Droplet_action_rebuild | Droplet_action_rename | Droplet_action_resize | Droplet_action_restore | Droplet_action_snapshot;
export interface ActionsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The action property
     */
    action?: Action | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/{droplet_id}/actions
 */
export interface ActionsRequestBuilder extends BaseRequestBuilder<ActionsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.droplets.item.actions.item collection
     * @param action_id A unique numeric ID that can be used to identify and reference an action.
     * @returns {WithAction_ItemRequestBuilder}
     */
     byAction_id(action_id: number) : WithAction_ItemRequestBuilder;
    /**
     * To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ActionsRequestBuilderGetQueryParameters> | undefined) : Promise<ActionsGetResponse | undefined>;
    /**
     * To initiate an action on a Droplet send a POST request to`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action                                   | Details | Additionally Required Permission || ---------------------------------------- | ----------- | ----------- || <nobr>`enable_backups`</nobr>            | Enables backups for a Droplet | || <nobr>`disable_backups`</nobr>           | Disables backups for a Droplet | || <nobr>`change_backup_policy`</nobr>      | Update the backup policy for a Droplet | || <nobr>`reboot`</nobr>                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. | || <nobr>`power_cycle`</nobr>               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it's similar to booting from scratch. | || <nobr>`shutdown`</nobr>                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. | || <nobr>`power_off`</nobr>                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. | || <nobr>`power_on`</nobr>                  | Powers on a Droplet. | || <nobr>`restore`</nobr>                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. | droplet:admin || <nobr>`password_reset`</nobr>            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. | droplet:admin || <nobr>`resize`</nobr>                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. | droplet:create || <nobr>`rebuild`</nobr>                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. | droplet:admin || <nobr>`rename`</nobr>                    | Renames a Droplet. | || <nobr>`change_kernel`</nobr>             | Changes a Droplet's kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. | || <nobr>`enable_ipv6`</nobr>               | Enables IPv6 for a Droplet. Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on an existing Droplet, [additional OS-level configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets) is required. | || <nobr>`snapshot`</nobr>                  | Takes a snapshot of a Droplet. | image:create |
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Droplet_action_change_backup_policy | Droplet_action_change_kernel | Droplet_action_enable_backups | Droplet_action | Droplet_action_rebuild | Droplet_action_rename | Droplet_action_resize | Droplet_action_restore | Droplet_action_snapshot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ActionsPostResponse | undefined>;
    /**
     * To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ActionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To initiate an action on a Droplet send a POST request to`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action                                   | Details | Additionally Required Permission || ---------------------------------------- | ----------- | ----------- || <nobr>`enable_backups`</nobr>            | Enables backups for a Droplet | || <nobr>`disable_backups`</nobr>           | Disables backups for a Droplet | || <nobr>`change_backup_policy`</nobr>      | Update the backup policy for a Droplet | || <nobr>`reboot`</nobr>                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. | || <nobr>`power_cycle`</nobr>               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it's similar to booting from scratch. | || <nobr>`shutdown`</nobr>                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. | || <nobr>`power_off`</nobr>                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. | || <nobr>`power_on`</nobr>                  | Powers on a Droplet. | || <nobr>`restore`</nobr>                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. | droplet:admin || <nobr>`password_reset`</nobr>            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. | droplet:admin || <nobr>`resize`</nobr>                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. | droplet:create || <nobr>`rebuild`</nobr>                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. | droplet:admin || <nobr>`rename`</nobr>                    | Renames a Droplet. | || <nobr>`change_kernel`</nobr>             | Changes a Droplet's kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. | || <nobr>`enable_ipv6`</nobr>               | Enables IPv6 for a Droplet. Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on an existing Droplet, [additional OS-level configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets) is required. | || <nobr>`snapshot`</nobr>                  | Takes a snapshot of a Droplet. | image:create |
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Droplet_action_change_backup_policy | Droplet_action_change_kernel | Droplet_action_enable_backups | Droplet_action | Droplet_action_rebuild | Droplet_action_rename | Droplet_action_resize | Droplet_action_restore | Droplet_action_snapshot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
 */
export interface ActionsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsGetResponse}
 */
// @ts-ignore
export function createActionsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Droplet_action_change_backup_policy | Droplet_action_change_kernel | Droplet_action_enable_backups | Droplet_action | Droplet_action_rebuild | Droplet_action_rename | Droplet_action_resize | Droplet_action_restore | Droplet_action_snapshot}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ActionsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsGetResponse(actionsGetResponse: Partial<ActionsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { actionsGetResponse.actions = n.getCollectionOfObjectValues<Action>(createActionFromDiscriminatorValue); },
        "links": n => { actionsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { actionsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ActionsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody: Partial<Droplet_action_change_backup_policy | Droplet_action_change_kernel | Droplet_action_enable_backups | Droplet_action | Droplet_action_rebuild | Droplet_action_rename | Droplet_action_resize | Droplet_action_restore | Droplet_action_snapshot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDroplet_action_change_backup_policy(actionsPostRequestBody as Droplet_action_change_backup_policy),
        ...deserializeIntoDroplet_action_change_kernel(actionsPostRequestBody as Droplet_action_change_kernel),
        ...deserializeIntoDroplet_action_enable_backups(actionsPostRequestBody as Droplet_action_enable_backups),
        ...deserializeIntoDroplet_action(actionsPostRequestBody as Droplet_action),
        ...deserializeIntoDroplet_action_rebuild(actionsPostRequestBody as Droplet_action_rebuild),
        ...deserializeIntoDroplet_action_rename(actionsPostRequestBody as Droplet_action_rename),
        ...deserializeIntoDroplet_action_resize(actionsPostRequestBody as Droplet_action_resize),
        ...deserializeIntoDroplet_action_restore(actionsPostRequestBody as Droplet_action_restore),
        ...deserializeIntoDroplet_action_snapshot(actionsPostRequestBody as Droplet_action_snapshot),
    }
}
/**
 * The deserialization information for the current model
 * @param ActionsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse: Partial<ActionsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { actionsPostResponse.action = n.getObjectValue<Action>(createActionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param ActionsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsGetResponse(writer: SerializationWriter, actionsGetResponse: Partial<ActionsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!actionsGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Action>("actions", actionsGetResponse.actions, serializeAction);
    writer.writeObjectValue<Page_links>("links", actionsGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", actionsGetResponse.meta, serializeMeta_properties);
    writer.writeAdditionalData(actionsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param ActionsPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer: SerializationWriter, actionsPostRequestBody: Partial<Droplet_action_change_backup_policy | Droplet_action_change_kernel | Droplet_action_enable_backups | Droplet_action | Droplet_action_rebuild | Droplet_action_rename | Droplet_action_resize | Droplet_action_restore | Droplet_action_snapshot> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    serializeDroplet_action_change_backup_policy(writer, actionsPostRequestBody as Droplet_action_change_backup_policy);
    serializeDroplet_action_change_kernel(writer, actionsPostRequestBody as Droplet_action_change_kernel);
    serializeDroplet_action_enable_backups(writer, actionsPostRequestBody as Droplet_action_enable_backups);
    serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
    serializeDroplet_action_rebuild(writer, actionsPostRequestBody as Droplet_action_rebuild);
    serializeDroplet_action_rename(writer, actionsPostRequestBody as Droplet_action_rename);
    serializeDroplet_action_resize(writer, actionsPostRequestBody as Droplet_action_resize);
    serializeDroplet_action_restore(writer, actionsPostRequestBody as Droplet_action_restore);
    serializeDroplet_action_snapshot(writer, actionsPostRequestBody as Droplet_action_snapshot);
}
/**
 * Serializes information the current object
 * @param ActionsPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer: SerializationWriter, actionsPostResponse: Partial<ActionsPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!actionsPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Action>("action", actionsPostResponse.action, serializeAction);
    writer.writeAdditionalData(actionsPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/{droplet_id}/actions{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ActionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ActionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAction_id: {
        requestsMetadata: WithAction_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["action_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ActionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
