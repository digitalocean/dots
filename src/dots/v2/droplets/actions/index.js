/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoDroplet_action, deserializeIntoDroplet_action_snapshot, serializeAction, serializeDroplet_action, serializeDroplet_action_snapshot } from '../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Droplet_action | Droplet_action_snapshot}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode) {
    const mappingValueNode = parseNode?.getChildNode("type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "disable_backups":
                    return deserializeIntoDroplet_action;
                case "enable_backups":
                    return deserializeIntoDroplet_action;
                case "enable_ipv6":
                    return deserializeIntoDroplet_action;
                case "power_cycle":
                    return deserializeIntoDroplet_action;
                case "power_off":
                    return deserializeIntoDroplet_action;
                case "power_on":
                    return deserializeIntoDroplet_action;
                case "shutdown":
                    return deserializeIntoDroplet_action;
                case "snapshot":
                    return deserializeIntoDroplet_action_snapshot;
            }
        }
    }
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody = {}) {
    return {
        ...deserializeIntoDroplet_action(actionsPostRequestBody),
        ...deserializeIntoDroplet_action_snapshot(actionsPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse = {}) {
    return {
        "actions": n => { actionsPostResponse.actions = n.getCollectionOfObjectValues(createActionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer, actionsPostRequestBody = {}) {
    if (actionsPostRequestBody === undefined || actionsPostRequestBody === null)
        return;
    switch (actionsPostRequestBody.type) {
        case "disable_backups":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "enable_backups":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "enable_ipv6":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "power_cycle":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "power_off":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "power_on":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "shutdown":
            serializeDroplet_action(writer, actionsPostRequestBody);
            break;
        case "snapshot":
            serializeDroplet_action_snapshot(writer, actionsPostRequestBody);
            break;
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer, actionsPostResponse = {}) {
    if (actionsPostResponse) {
        writer.writeCollectionOfObjectValues("actions", actionsPostResponse.actions, serializeAction);
    }
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/actions{?tag_name*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderPostQueryParametersMapper = {
    "tagName": "tag_name",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata = {
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: ActionsRequestBuilderPostQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
