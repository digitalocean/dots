/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionFromDiscriminatorValue, createDroplet_action_snapshotFromDiscriminatorValue, createDroplet_actionFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, deserializeIntoDroplet_action, deserializeIntoDroplet_action_snapshot, serializeAction, serializeDroplet_action, serializeDroplet_action_snapshot, type Action, type Droplet_action, type Droplet_action_snapshot, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type ActionsPostRequestBody = Droplet_action | Droplet_action_snapshot;
export interface ActionsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The actions property
     */
    actions?: Action[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Builds and executes requests for operations under /v2/droplets/actions
 */
export interface ActionsRequestBuilder extends BaseRequestBuilder<ActionsRequestBuilder> {
    /**
     * Some actions can be performed in bulk on tagged Droplets. The actions can beinitiated by sending a POST to `/v2/droplets/actions?tag_name=$TAG_NAME` withthe action arguments.Only a sub-set of action types are supported:- `power_cycle`- `power_on`- `power_off`- `shutdown`- `enable_ipv6`- `enable_backups`- `disable_backups`- `snapshot`
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Droplet_action | Droplet_action_snapshot, requestConfiguration?: RequestConfiguration<ActionsRequestBuilderPostQueryParameters> | undefined) : Promise<ActionsPostResponse | undefined>;
    /**
     * Some actions can be performed in bulk on tagged Droplets. The actions can beinitiated by sending a POST to `/v2/droplets/actions?tag_name=$TAG_NAME` withthe action arguments.Only a sub-set of action types are supported:- `power_cycle`- `power_on`- `power_off`- `shutdown`- `enable_ipv6`- `enable_backups`- `disable_backups`- `snapshot`
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Droplet_action | Droplet_action_snapshot, requestConfiguration?: RequestConfiguration<ActionsRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
/**
 * Some actions can be performed in bulk on tagged Droplets. The actions can beinitiated by sending a POST to `/v2/droplets/actions?tag_name=$TAG_NAME` withthe action arguments.Only a sub-set of action types are supported:- `power_cycle`- `power_on`- `power_off`- `shutdown`- `enable_ipv6`- `enable_backups`- `disable_backups`- `snapshot`
 */
export interface ActionsRequestBuilderPostQueryParameters {
    /**
     * Used to filter Droplets by a specific tag. Can not be combined with `name` or `type`.
     */
    tagName?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Droplet_action | Droplet_action_snapshot}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    const mappingValueNode = parseNode?.getChildNode("type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "disable_backups":
                    return deserializeIntoDroplet_action;
                case "enable_backups":
                    return deserializeIntoDroplet_action;
                case "enable_ipv6":
                    return deserializeIntoDroplet_action;
                case "power_cycle":
                    return deserializeIntoDroplet_action;
                case "power_off":
                    return deserializeIntoDroplet_action;
                case "power_on":
                    return deserializeIntoDroplet_action;
                case "shutdown":
                    return deserializeIntoDroplet_action;
                case "snapshot":
                    return deserializeIntoDroplet_action_snapshot;
            }
        }
    }
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody: Partial<Droplet_action | Droplet_action_snapshot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDroplet_action(actionsPostRequestBody as Droplet_action),
        ...deserializeIntoDroplet_action_snapshot(actionsPostRequestBody as Droplet_action_snapshot),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse: Partial<ActionsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { actionsPostResponse.actions = n.getCollectionOfObjectValues<Action>(createActionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer: SerializationWriter, actionsPostRequestBody: Partial<Droplet_action | Droplet_action_snapshot> | undefined | null = {}) : void {
    if (actionsPostRequestBody === undefined || actionsPostRequestBody === null) return;
    switch (actionsPostRequestBody.type) {
        case "disable_backups":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "enable_backups":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "enable_ipv6":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "power_cycle":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "power_off":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "power_on":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "shutdown":
            serializeDroplet_action(writer, actionsPostRequestBody as Droplet_action);
            break;
        case "snapshot":
            serializeDroplet_action_snapshot(writer, actionsPostRequestBody as Droplet_action_snapshot);
            break;
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer: SerializationWriter, actionsPostResponse: Partial<ActionsPostResponse> | undefined | null = {}) : void {
    if (actionsPostResponse) {
        writer.writeCollectionOfObjectValues<Action>("actions", actionsPostResponse.actions, serializeAction);
        writer.writeAdditionalData(actionsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/actions{?tag_name*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderPostQueryParametersMapper: Record<string, string> = {
    "tagName": "tag_name",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: ActionsRequestBuilderPostQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
