/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAutoscale_poolFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeAutoscale_pool, serializeAutoscale_pool_create, serializeMeta_properties, serializePage_links, type Autoscale_pool, type Autoscale_pool_create, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../models/index.js';
// @ts-ignore
import { type WithAutoscale_pool_ItemRequestBuilder, WithAutoscale_pool_ItemRequestBuilderNavigationMetadata, WithAutoscale_pool_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AutoscaleGetResponse extends Parsable {
    /**
     * The autoscale_pools property
     */
    autoscalePools?: Autoscale_pool[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface AutoscalePostResponse extends Parsable {
    /**
     * The autoscale_pool property
     */
    autoscalePool?: Autoscale_pool | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/autoscale
 */
export interface AutoscaleRequestBuilder extends BaseRequestBuilder<AutoscaleRequestBuilder> {
    /**
     * Gets an item from the dots.v2.droplets.autoscale.item collection
     * @param autoscale_pool_id A unique identifier for an autoscale pool.
     * @returns {WithAutoscale_pool_ItemRequestBuilder}
     */
     byAutoscale_pool_id(autoscale_pool_id: string) : WithAutoscale_pool_ItemRequestBuilder;
    /**
     * To list all autoscale pools in your team, send a GET request to `/v2/droplets/autoscale`.The response body will be a JSON object with a key of `autoscale_pools` containing an array of autoscale pool objects.These each contain the standard autoscale pool attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AutoscaleGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AutoscaleRequestBuilderGetQueryParameters> | undefined) : Promise<AutoscaleGetResponse | undefined>;
    /**
     * To create a new autoscale pool, send a POST request to `/v2/droplets/autoscale` setting the required attributes.The response body will contain a JSON object with a key called `autoscale_pool` containing the standard attributes for the new autoscale pool.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AutoscalePostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Autoscale_pool_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AutoscalePostResponse | undefined>;
    /**
     * To list all autoscale pools in your team, send a GET request to `/v2/droplets/autoscale`.The response body will be a JSON object with a key of `autoscale_pools` containing an array of autoscale pool objects.These each contain the standard autoscale pool attributes.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AutoscaleRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new autoscale pool, send a POST request to `/v2/droplets/autoscale` setting the required attributes.The response body will contain a JSON object with a key called `autoscale_pool` containing the standard attributes for the new autoscale pool.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Autoscale_pool_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all autoscale pools in your team, send a GET request to `/v2/droplets/autoscale`.The response body will be a JSON object with a key of `autoscale_pools` containing an array of autoscale pool objects.These each contain the standard autoscale pool attributes.
 */
export interface AutoscaleRequestBuilderGetQueryParameters {
    /**
     * The name of the autoscale pool
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AutoscaleGetResponse}
 */
// @ts-ignore
export function createAutoscaleGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAutoscaleGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AutoscalePostResponse}
 */
// @ts-ignore
export function createAutoscalePostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAutoscalePostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAutoscaleGetResponse(autoscaleGetResponse: Partial<AutoscaleGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "autoscale_pools": n => { autoscaleGetResponse.autoscalePools = n.getCollectionOfObjectValues<Autoscale_pool>(createAutoscale_poolFromDiscriminatorValue); },
        "links": n => { autoscaleGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { autoscaleGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAutoscalePostResponse(autoscalePostResponse: Partial<AutoscalePostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "autoscale_pool": n => { autoscalePostResponse.autoscalePool = n.getObjectValue<Autoscale_pool>(createAutoscale_poolFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAutoscaleGetResponse(writer: SerializationWriter, autoscaleGetResponse: Partial<AutoscaleGetResponse> | undefined | null = {}) : void {
    if (autoscaleGetResponse) {
        writer.writeCollectionOfObjectValues<Autoscale_pool>("autoscale_pools", autoscaleGetResponse.autoscalePools, serializeAutoscale_pool);
        writer.writeObjectValue<Page_links>("links", autoscaleGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", autoscaleGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAutoscalePostResponse(writer: SerializationWriter, autoscalePostResponse: Partial<AutoscalePostResponse> | undefined | null = {}) : void {
    if (autoscalePostResponse) {
        writer.writeObjectValue<Autoscale_pool>("autoscale_pool", autoscalePostResponse.autoscalePool, serializeAutoscale_pool);
    }
}
/**
 * Uri template for the request builder.
 */
export const AutoscaleRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/autoscale{?name*,page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AutoscaleRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AutoscaleRequestBuilderNavigationMetadata: Record<Exclude<keyof AutoscaleRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAutoscale_pool_id: {
        requestsMetadata: WithAutoscale_pool_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithAutoscale_pool_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["autoscale_pool_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AutoscaleRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AutoscaleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAutoscaleGetResponseFromDiscriminatorValue,
        queryParametersMapper: AutoscaleRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AutoscaleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAutoscalePostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAutoscale_pool_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
