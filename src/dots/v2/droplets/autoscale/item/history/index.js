/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createHistoryFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeHistory, serializeMeta_properties, serializePage_links } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HistoryGetResponse}
 */
// @ts-ignore
export function createHistoryGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoHistoryGetResponse;
}
/**
 * The deserialization information for the current model
 * @param HistoryGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHistoryGetResponse(historyGetResponse = {}) {
    return {
        "history": n => { historyGetResponse.history = n.getCollectionOfObjectValues(createHistoryFromDiscriminatorValue); },
        "links": n => { historyGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { historyGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param HistoryGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHistoryGetResponse(writer, historyGetResponse = {}, isSerializingDerivedType = false) {
    if (!historyGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeCollectionOfObjectValues("history", historyGetResponse.history, serializeHistory);
    writer.writeObjectValue("links", historyGetResponse.links, serializePage_links);
    writer.writeObjectValue("meta", historyGetResponse.meta, serializeMeta_properties);
    writer.writeAdditionalData(historyGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const HistoryRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/autoscale/{autoscale_pool_id}/history{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const HistoryRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const HistoryRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: HistoryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createHistoryGetResponseFromDiscriminatorValue,
        queryParametersMapper: HistoryRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
