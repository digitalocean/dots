/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSupported_droplet_backup_policyFromDiscriminatorValue, serializeSupported_droplet_backup_policy } from '../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Supported_policiesGetResponse}
 */
// @ts-ignore
export function createSupported_policiesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoSupported_policiesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSupported_policiesGetResponse(supported_policiesGetResponse = {}) {
    return {
        "supported_policies": n => { supported_policiesGetResponse.supportedPolicies = n.getCollectionOfObjectValues(createSupported_droplet_backup_policyFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSupported_policiesGetResponse(writer, supported_policiesGetResponse = {}) {
    if (supported_policiesGetResponse) {
        writer.writeCollectionOfObjectValues("supported_policies", supported_policiesGetResponse.supportedPolicies, serializeSupported_droplet_backup_policy);
        writer.writeAdditionalData(supported_policiesGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const Supported_policiesRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/backups/supported_policies";
/**
 * Metadata for all the requests in the request builder.
 */
export const Supported_policiesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: Supported_policiesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createSupported_policiesGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
