/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSupported_droplet_backup_policyFromDiscriminatorValue, serializeSupported_droplet_backup_policy, type ErrorEscaped, type Supported_droplet_backup_policy } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Supported_policiesGetResponse}
 */
// @ts-ignore
export function createSupported_policiesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSupported_policiesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSupported_policiesGetResponse(supported_policiesGetResponse: Partial<Supported_policiesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "supported_policies": n => { supported_policiesGetResponse.supportedPolicies = n.getCollectionOfObjectValues<Supported_droplet_backup_policy>(createSupported_droplet_backup_policyFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSupported_policiesGetResponse(writer: SerializationWriter, supported_policiesGetResponse: Partial<Supported_policiesGetResponse> | undefined | null = {}) : void {
    if (supported_policiesGetResponse) {
        writer.writeCollectionOfObjectValues<Supported_droplet_backup_policy>("supported_policies", supported_policiesGetResponse.supportedPolicies, serializeSupported_droplet_backup_policy);
        writer.writeAdditionalData(supported_policiesGetResponse.additionalData);
    }
}
export interface Supported_policiesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The supported_policies property
     */
    supportedPolicies?: Supported_droplet_backup_policy[] | null;
}
/**
 * Builds and executes requests for operations under /v2/droplets/backups/supported_policies
 */
export interface Supported_policiesRequestBuilder extends BaseRequestBuilder<Supported_policiesRequestBuilder> {
    /**
     * To retrieve a list of all supported Droplet backup policies, send a GETrequest to `/v2/droplets/backups/supported_policies`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Supported_policiesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Supported_policiesGetResponse | undefined>;
    /**
     * To retrieve a list of all supported Droplet backup policies, send a GETrequest to `/v2/droplets/backups/supported_policies`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const Supported_policiesRequestBuilderUriTemplate = "{+baseurl}/v2/droplets/backups/supported_policies";
/**
 * Metadata for all the requests in the request builder.
 */
export const Supported_policiesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Supported_policiesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSupported_policiesGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
