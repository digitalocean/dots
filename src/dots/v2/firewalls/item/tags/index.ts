/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagsDeleteRequestBody}
 */
// @ts-ignore
export function createTagsDeleteRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTagsDeleteRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagsPostRequestBody}
 */
// @ts-ignore
export function createTagsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTagsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagsDeleteRequestBody(tagsDeleteRequestBody: Partial<TagsDeleteRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "tags": n => { tagsDeleteRequestBody.tags = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagsPostRequestBody(tagsPostRequestBody: Partial<TagsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "tags": n => { tagsPostRequestBody.tags = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagsDeleteRequestBody(writer: SerializationWriter, tagsDeleteRequestBody: Partial<TagsDeleteRequestBody> | undefined | null = {}) : void {
    if (tagsDeleteRequestBody) {
        writer.writeCollectionOfPrimitiveValues<string>("tags", tagsDeleteRequestBody.tags);
        writer.writeAdditionalData(tagsDeleteRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagsPostRequestBody(writer: SerializationWriter, tagsPostRequestBody: Partial<TagsPostRequestBody> | undefined | null = {}) : void {
    if (tagsPostRequestBody) {
        writer.writeCollectionOfPrimitiveValues<string>("tags", tagsPostRequestBody.tags);
        writer.writeAdditionalData(tagsPostRequestBody.additionalData);
    }
}
export interface TagsDeleteRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The tags property
     */
    tags?: string[] | null;
}
export interface TagsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The tags property
     */
    tags?: string[] | null;
}
/**
 * Builds and executes requests for operations under /v2/firewalls/{firewall_id}/tags
 */
export interface TagsRequestBuilder extends BaseRequestBuilder<TagsRequestBuilder> {
    /**
     * To remove a tag representing a group of Droplets from a firewall, send aDELETE request to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of therequest, there should be a `tags` attribute containing a list of tag names.No response body will be sent back, but the response code will indicatesuccess. Specifically, the response code will be a 204, which means that theaction was successful with no returned body data.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(body: TagsDeleteRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To assign a tag representing a group of Droplets to a firewall, send a POSTrequest to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the request,there should be a `tags` attribute containing a list of tag names.No response body will be sent back, but the response code will indicatesuccess. Specifically, the response code will be a 204, which means that theaction was successful with no returned body data.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: TagsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To remove a tag representing a group of Droplets from a firewall, send aDELETE request to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of therequest, there should be a `tags` attribute containing a list of tag names.No response body will be sent back, but the response code will indicatesuccess. Specifically, the response code will be a 204, which means that theaction was successful with no returned body data.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: TagsDeleteRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To assign a tag representing a group of Droplets to a firewall, send a POSTrequest to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the request,there should be a `tags` attribute containing a list of tag names.No response body will be sent back, but the response code will indicatesuccess. Specifically, the response code will be a 204, which means that theaction was successful with no returned body data.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TagsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TagsRequestBuilderUriTemplate = "{+baseurl}/v2/firewalls/{firewall_id}/tags";
/**
 * Metadata for all the requests in the request builder.
 */
export const TagsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TagsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTagsDeleteRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: TagsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTagsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
