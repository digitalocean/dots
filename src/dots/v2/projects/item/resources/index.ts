/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createResourceFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeProject_assignment, serializeResource, type ErrorEscaped, type Meta_properties, type Page_links, type Project_assignment, type Resource } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourcesGetResponse}
 */
// @ts-ignore
export function createResourcesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourcesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResourcesPostResponse}
 */
// @ts-ignore
export function createResourcesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResourcesPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ResourcesGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourcesGetResponse(resourcesGetResponse: Partial<ResourcesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { resourcesGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { resourcesGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "resources": n => { resourcesGetResponse.resources = n.getCollectionOfObjectValues<Resource>(createResourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ResourcesPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResourcesPostResponse(resourcesPostResponse: Partial<ResourcesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "resources": n => { resourcesPostResponse.resources = n.getCollectionOfObjectValues<Resource>(createResourceFromDiscriminatorValue); },
    }
}
export interface ResourcesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The resources that are assigned to this project. Only resources that you are authorized to see will be returned.
     */
    resources?: Resource[] | null;
}
export interface ResourcesPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * All resources, including the ones added in the request, that are assigned to the project. Only resources that you are authorized to see will be returned.
     */
    resources?: Resource[] | null;
}
/**
 * Builds and executes requests for operations under /v2/projects/{project_id}/resources
 */
export interface ResourcesRequestBuilder extends BaseRequestBuilder<ResourcesRequestBuilder> {
    /**
     * To list all your resources in a project, send a GET request to `/v2/projects/$PROJECT_ID/resources`.This endpoint will only return resources that you are authorized to see. For example, to see Droplets in a project, include the `droplet:read` scope.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ResourcesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ResourcesRequestBuilderGetQueryParameters> | undefined) : Promise<ResourcesGetResponse | undefined>;
    /**
     * To assign resources to a project, send a POST request to `/v2/projects/$PROJECT_ID/resources`.You must have both `project:update` and `<resource>:read` scopes to assign new resources. For example, to assign a Droplet to a project, include both the `project:update` and `droplet:read` scopes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ResourcesPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Project_assignment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ResourcesPostResponse | undefined>;
    /**
     * To list all your resources in a project, send a GET request to `/v2/projects/$PROJECT_ID/resources`.This endpoint will only return resources that you are authorized to see. For example, to see Droplets in a project, include the `droplet:read` scope.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ResourcesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To assign resources to a project, send a POST request to `/v2/projects/$PROJECT_ID/resources`.You must have both `project:update` and `<resource>:read` scopes to assign new resources. For example, to assign a Droplet to a project, include both the `project:update` and `droplet:read` scopes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Project_assignment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all your resources in a project, send a GET request to `/v2/projects/$PROJECT_ID/resources`.This endpoint will only return resources that you are authorized to see. For example, to see Droplets in a project, include the `droplet:read` scope.
 */
export interface ResourcesRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ResourcesGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourcesGetResponse(writer: SerializationWriter, resourcesGetResponse: Partial<ResourcesGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!resourcesGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Page_links>("links", resourcesGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", resourcesGetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues<Resource>("resources", resourcesGetResponse.resources, serializeResource);
    writer.writeAdditionalData(resourcesGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ResourcesPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResourcesPostResponse(writer: SerializationWriter, resourcesPostResponse: Partial<ResourcesPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!resourcesPostResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<Resource>("resources", resourcesPostResponse.resources, serializeResource);
    writer.writeAdditionalData(resourcesPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ResourcesRequestBuilderUriTemplate = "{+baseurl}/v2/projects/{project_id}/resources{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ResourcesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ResourcesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ResourcesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createResourcesGetResponseFromDiscriminatorValue,
        queryParametersMapper: ResourcesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ResourcesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createResourcesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject_assignment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
