/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createProjectFromDiscriminatorValue, serializeProject } from '../../../models/index.js';
// @ts-ignore
import { ResourcesRequestBuilderRequestsMetadata } from './resources/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProject_GetResponse}
 */
// @ts-ignore
export function createWithProject_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithProject_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProject_PatchResponse}
 */
// @ts-ignore
export function createWithProject_PatchResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithProject_PatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithProject_PutResponse}
 */
// @ts-ignore
export function createWithProject_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithProject_PutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithProject_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProject_GetResponse(withProject_GetResponse = {}) {
    return {
        "project": n => { withProject_GetResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param WithProject_PatchResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProject_PatchResponse(withProject_PatchResponse = {}) {
    return {
        "project": n => { withProject_PatchResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param WithProject_PutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithProject_PutResponse(withProject_PutResponse = {}) {
    return {
        "project": n => { withProject_PutResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProject_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProject_GetResponse(writer, withProject_GetResponse = {}, isSerializingDerivedType = false) {
    if (!withProject_GetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", withProject_GetResponse.project, serializeProject);
    writer.writeAdditionalData(withProject_GetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProject_PatchResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProject_PatchResponse(writer, withProject_PatchResponse = {}, isSerializingDerivedType = false) {
    if (!withProject_PatchResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", withProject_PatchResponse.project, serializeProject);
    writer.writeAdditionalData(withProject_PatchResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithProject_PutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithProject_PutResponse(writer, withProject_PutResponse = {}, isSerializingDerivedType = false) {
    if (!withProject_PutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", withProject_PutResponse.project, serializeProject);
    writer.writeAdditionalData(withProject_PutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithProject_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/projects/{project_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithProject_ItemRequestBuilderNavigationMetadata = {
    resources: {
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithProject_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithProject_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            412: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithProject_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithProject_GetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: WithProject_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithProject_PatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WithProject_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithProject_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
