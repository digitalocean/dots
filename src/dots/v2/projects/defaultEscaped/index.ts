/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createProjectFromDiscriminatorValue, serializeProject, type ErrorEscaped, type Project } from '../../../models/index.js';
// @ts-ignore
import { ResourcesRequestBuilderRequestsMetadata, type ResourcesRequestBuilder } from './resources/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DefaultGetResponse}
 */
// @ts-ignore
export function createDefaultGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDefaultGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DefaultPatchResponse}
 */
// @ts-ignore
export function createDefaultPatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDefaultPatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DefaultPutResponse}
 */
// @ts-ignore
export function createDefaultPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDefaultPutResponse;
}
export interface DefaultGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The project property
     */
    project?: Project | null;
}
export interface DefaultPatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The project property
     */
    project?: Project | null;
}
export interface DefaultPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The project property
     */
    project?: Project | null;
}
/**
 * Builds and executes requests for operations under /v2/projects/default
 */
export interface DefaultRequestBuilder extends BaseRequestBuilder<DefaultRequestBuilder> {
    /**
     * The resources property
     */
    get resources(): ResourcesRequestBuilder;
    /**
     * To get your default project, send a GET request to `/v2/projects/default`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DefaultGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DefaultGetResponse | undefined>;
    /**
     * To update only specific attributes of your default project, send a PATCH request to `/v2/projects/default`. At least one of the following attributes needs to be sent.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DefaultPatchResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Project, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DefaultPatchResponse | undefined>;
    /**
     * To update you default project, send a PUT request to `/v2/projects/default`. All of the following attributes must be sent.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DefaultPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Project, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DefaultPutResponse | undefined>;
    /**
     * To get your default project, send a GET request to `/v2/projects/default`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update only specific attributes of your default project, send a PATCH request to `/v2/projects/default`. At least one of the following attributes needs to be sent.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Project, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update you default project, send a PUT request to `/v2/projects/default`. All of the following attributes must be sent.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Project, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDefaultGetResponse(defaultGetResponse: Partial<DefaultGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "project": n => { defaultGetResponse.project = n.getObjectValue<Project>(createProjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDefaultPatchResponse(defaultPatchResponse: Partial<DefaultPatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "project": n => { defaultPatchResponse.project = n.getObjectValue<Project>(createProjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDefaultPutResponse(defaultPutResponse: Partial<DefaultPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "project": n => { defaultPutResponse.project = n.getObjectValue<Project>(createProjectFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDefaultGetResponse(writer: SerializationWriter, defaultGetResponse: Partial<DefaultGetResponse> | undefined | null = {}) : void {
    if (defaultGetResponse) {
        writer.writeObjectValue<Project>("project", defaultGetResponse.project, serializeProject);
        writer.writeAdditionalData(defaultGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDefaultPatchResponse(writer: SerializationWriter, defaultPatchResponse: Partial<DefaultPatchResponse> | undefined | null = {}) : void {
    if (defaultPatchResponse) {
        writer.writeObjectValue<Project>("project", defaultPatchResponse.project, serializeProject);
        writer.writeAdditionalData(defaultPatchResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDefaultPutResponse(writer: SerializationWriter, defaultPutResponse: Partial<DefaultPutResponse> | undefined | null = {}) : void {
    if (defaultPutResponse) {
        writer.writeObjectValue<Project>("project", defaultPutResponse.project, serializeProject);
        writer.writeAdditionalData(defaultPutResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const DefaultRequestBuilderUriTemplate = "{+baseurl}/v2/projects/default";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DefaultRequestBuilderNavigationMetadata: Record<Exclude<keyof DefaultRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    resources: {
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DefaultRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDefaultGetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDefaultPatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDefaultPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
