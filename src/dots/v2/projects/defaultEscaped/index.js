/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createProjectFromDiscriminatorValue, serializeProject } from '../../../models/index.js';
// @ts-ignore
import { ResourcesRequestBuilderRequestsMetadata } from './resources/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DefaultGetResponse}
 */
// @ts-ignore
export function createDefaultGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDefaultGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DefaultPatchResponse}
 */
// @ts-ignore
export function createDefaultPatchResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDefaultPatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DefaultPutResponse}
 */
// @ts-ignore
export function createDefaultPutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDefaultPutResponse;
}
/**
 * The deserialization information for the current model
 * @param DefaultGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDefaultGetResponse(defaultGetResponse = {}) {
    return {
        "project": n => { defaultGetResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param DefaultPatchResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDefaultPatchResponse(defaultPatchResponse = {}) {
    return {
        "project": n => { defaultPatchResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param DefaultPutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDefaultPutResponse(defaultPutResponse = {}) {
    return {
        "project": n => { defaultPutResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param DefaultGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDefaultGetResponse(writer, defaultGetResponse = {}, isSerializingDerivedType = false) {
    if (!defaultGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", defaultGetResponse.project, serializeProject);
    writer.writeAdditionalData(defaultGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param DefaultPatchResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDefaultPatchResponse(writer, defaultPatchResponse = {}, isSerializingDerivedType = false) {
    if (!defaultPatchResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", defaultPatchResponse.project, serializeProject);
    writer.writeAdditionalData(defaultPatchResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param DefaultPutResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDefaultPutResponse(writer, defaultPutResponse = {}, isSerializingDerivedType = false) {
    if (!defaultPutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", defaultPutResponse.project, serializeProject);
    writer.writeAdditionalData(defaultPutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const DefaultRequestBuilderUriTemplate = "{+baseurl}/v2/projects/default";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DefaultRequestBuilderNavigationMetadata = {
    resources: {
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DefaultRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDefaultGetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDefaultPatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDefaultPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
