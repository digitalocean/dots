/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createProjectFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeProject, serializeProject_base } from '../../models/index.js';
// @ts-ignore
import { DefaultRequestBuilderNavigationMetadata, DefaultRequestBuilderRequestsMetadata } from './defaultEscaped/index.js';
// @ts-ignore
import { WithProject_ItemRequestBuilderNavigationMetadata, WithProject_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse}
 */
// @ts-ignore
export function createProjectsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoProjectsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostResponse}
 */
// @ts-ignore
export function createProjectsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoProjectsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ProjectsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse(projectsGetResponse = {}) {
    return {
        "links": n => { projectsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { projectsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "projects": n => { projectsGetResponse.projects = n.getCollectionOfObjectValues(createProjectFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param ProjectsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostResponse(projectsPostResponse = {}) {
    return {
        "project": n => { projectsPostResponse.project = n.getObjectValue(createProjectFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse(writer, projectsGetResponse = {}, isSerializingDerivedType = false) {
    if (!projectsGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("links", projectsGetResponse.links, serializePage_links);
    writer.writeObjectValue("meta", projectsGetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues("projects", projectsGetResponse.projects, serializeProject);
    writer.writeAdditionalData(projectsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProjectsPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostResponse(writer, projectsPostResponse = {}, isSerializingDerivedType = false) {
    if (!projectsPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("project", projectsPostResponse.project, serializeProject);
    writer.writeAdditionalData(projectsPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ProjectsRequestBuilderUriTemplate = "{+baseurl}/v2/projects{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProjectsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProjectsRequestBuilderNavigationMetadata = {
    byProject_id: {
        requestsMetadata: WithProject_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithProject_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["project_id"],
    },
    defaultEscaped: {
        requestsMetadata: DefaultRequestBuilderRequestsMetadata,
        navigationMetadata: DefaultRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProjectsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createProjectsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ProjectsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createProjectsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject_base,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
