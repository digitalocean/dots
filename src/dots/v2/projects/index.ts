/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createProjectFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeProject, serializeProject_base, type ErrorEscaped, type Meta_properties, type Page_links, type Project, type Project_base } from '../../models/index.js';
// @ts-ignore
import { DefaultRequestBuilderNavigationMetadata, DefaultRequestBuilderRequestsMetadata, type DefaultRequestBuilder } from './defaultEscaped/index.js';
// @ts-ignore
import { type WithProject_ItemRequestBuilder, WithProject_ItemRequestBuilderNavigationMetadata, WithProject_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsGetResponse}
 */
// @ts-ignore
export function createProjectsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectsPostResponse}
 */
// @ts-ignore
export function createProjectsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsGetResponse(projectsGetResponse: Partial<ProjectsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { projectsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { projectsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "projects": n => { projectsGetResponse.projects = n.getCollectionOfObjectValues<Project>(createProjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectsPostResponse(projectsPostResponse: Partial<ProjectsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "project": n => { projectsPostResponse.project = n.getObjectValue<Project>(createProjectFromDiscriminatorValue); },
    }
}
export interface ProjectsGetResponse extends Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The projects property
     */
    projects?: Project[] | null;
}
export interface ProjectsPostResponse extends Parsable {
    /**
     * The project property
     */
    project?: Project | null;
}
/**
 * Builds and executes requests for operations under /v2/projects
 */
export interface ProjectsRequestBuilder extends BaseRequestBuilder<ProjectsRequestBuilder> {
    /**
     * The default property
     */
    get defaultEscaped(): DefaultRequestBuilder;
    /**
     * Gets an item from the dots.v2.projects.item collection
     * @param project_id A unique identifier for a project.
     * @returns {WithProject_ItemRequestBuilder}
     */
     byProject_id(project_id: Guid) : WithProject_ItemRequestBuilder;
    /**
     * To list all your projects, send a GET request to `/v2/projects`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProjectsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ProjectsRequestBuilderGetQueryParameters> | undefined) : Promise<ProjectsGetResponse | undefined>;
    /**
     * To create a project, send a POST request to `/v2/projects`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProjectsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Project_base, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ProjectsPostResponse | undefined>;
    /**
     * To list all your projects, send a GET request to `/v2/projects`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProjectsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a project, send a POST request to `/v2/projects`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Project_base, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all your projects, send a GET request to `/v2/projects`.
 */
export interface ProjectsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsGetResponse(writer: SerializationWriter, projectsGetResponse: Partial<ProjectsGetResponse> | undefined | null = {}) : void {
    if (projectsGetResponse) {
        writer.writeObjectValue<Page_links>("links", projectsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", projectsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<Project>("projects", projectsGetResponse.projects, serializeProject);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectsPostResponse(writer: SerializationWriter, projectsPostResponse: Partial<ProjectsPostResponse> | undefined | null = {}) : void {
    if (projectsPostResponse) {
        writer.writeObjectValue<Project>("project", projectsPostResponse.project, serializeProject);
    }
}
/**
 * Uri template for the request builder.
 */
export const ProjectsRequestBuilderUriTemplate = "{+baseurl}/v2/projects{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProjectsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProjectsRequestBuilderNavigationMetadata: Record<Exclude<keyof ProjectsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byProject_id: {
        requestsMetadata: WithProject_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithProject_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["project_id"],
    },
    defaultEscaped: {
        requestsMetadata: DefaultRequestBuilderRequestsMetadata,
        navigationMetadata: DefaultRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProjectsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProjectsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ProjectsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ProjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProjectsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProject_base,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
