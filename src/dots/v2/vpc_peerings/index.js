/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVpc_peeringFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeVpc_peering } from '../../models/index.js';
// @ts-ignore
import { WithVpc_peering_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_peeringsGetResponse}
 */
// @ts-ignore
export function createVpc_peeringsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoVpc_peeringsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_peeringsPostRequestBody}
 */
// @ts-ignore
export function createVpc_peeringsPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoVpc_peeringsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_peeringsPostResponse}
 */
// @ts-ignore
export function createVpc_peeringsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoVpc_peeringsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_peeringsGetResponse(vpc_peeringsGetResponse = {}) {
    return {
        "links": n => { vpc_peeringsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { vpc_peeringsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "vpc_peerings": n => { vpc_peeringsGetResponse.vpcPeerings = n.getCollectionOfObjectValues(createVpc_peeringFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_peeringsPostRequestBody(vpc_peeringsPostRequestBody = {}) {
    return {
        "name": n => { vpc_peeringsPostRequestBody.name = n.getStringValue(); },
        "vpc_ids": n => { vpc_peeringsPostRequestBody.vpcIds = n.getCollectionOfPrimitiveValues(); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_peeringsPostResponse(vpc_peeringsPostResponse = {}) {
    return {
        "vpc_peering": n => { vpc_peeringsPostResponse.vpcPeering = n.getObjectValue(createVpc_peeringFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_peeringsGetResponse(writer, vpc_peeringsGetResponse = {}) {
    if (vpc_peeringsGetResponse) {
        writer.writeObjectValue("links", vpc_peeringsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", vpc_peeringsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("vpc_peerings", vpc_peeringsGetResponse.vpcPeerings, serializeVpc_peering);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_peeringsPostRequestBody(writer, vpc_peeringsPostRequestBody = {}) {
    if (vpc_peeringsPostRequestBody) {
        writer.writeStringValue("name", vpc_peeringsPostRequestBody.name);
        writer.writeCollectionOfPrimitiveValues("vpc_ids", vpc_peeringsPostRequestBody.vpcIds);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_peeringsPostResponse(writer, vpc_peeringsPostResponse = {}) {
    if (vpc_peeringsPostResponse) {
        writer.writeObjectValue("vpc_peering", vpc_peeringsPostResponse.vpcPeering, serializeVpc_peering);
    }
}
/**
 * Uri template for the request builder.
 */
export const Vpc_peeringsRequestBuilderUriTemplate = "{+baseurl}/v2/vpc_peerings{?page*,per_page*,region*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Vpc_peeringsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Vpc_peeringsRequestBuilderNavigationMetadata = {
    byVpc_peering_id: {
        requestsMetadata: WithVpc_peering_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["vpc_peering_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Vpc_peeringsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: Vpc_peeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createVpc_peeringsGetResponseFromDiscriminatorValue,
        queryParametersMapper: Vpc_peeringsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: Vpc_peeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createVpc_peeringsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVpc_peeringsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
