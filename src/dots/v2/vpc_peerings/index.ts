/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVpc_peeringFromDiscriminatorValue, Region_slug, serializeMeta_properties, serializePage_links, serializeVpc_peering, type ErrorEscaped, type Meta_properties, type Page_links, type Vpc_peering } from '../../models/index.js';
// @ts-ignore
import { type WithVpc_peering_ItemRequestBuilder, WithVpc_peering_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_peeringsGetResponse}
 */
// @ts-ignore
export function createVpc_peeringsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_peeringsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_peeringsPostRequestBody}
 */
// @ts-ignore
export function createVpc_peeringsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_peeringsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vpc_peeringsPostResponse}
 */
// @ts-ignore
export function createVpc_peeringsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVpc_peeringsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param Vpc_peeringsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_peeringsGetResponse(vpc_peeringsGetResponse: Partial<Vpc_peeringsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { vpc_peeringsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { vpc_peeringsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "vpc_peerings": n => { vpc_peeringsGetResponse.vpcPeerings = n.getCollectionOfObjectValues<Vpc_peering>(createVpc_peeringFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Vpc_peeringsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_peeringsPostRequestBody(vpc_peeringsPostRequestBody: Partial<Vpc_peeringsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { vpc_peeringsPostRequestBody.name = n.getStringValue(); },
        "vpc_ids": n => { vpc_peeringsPostRequestBody.vpcIds = n.getCollectionOfPrimitiveValues<Guid>(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Vpc_peeringsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVpc_peeringsPostResponse(vpc_peeringsPostResponse: Partial<Vpc_peeringsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "vpc_peering": n => { vpc_peeringsPostResponse.vpcPeering = n.getObjectValue<Vpc_peering>(createVpc_peeringFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_peeringsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_peeringsGetResponse(writer: SerializationWriter, vpc_peeringsGetResponse: Partial<Vpc_peeringsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_peeringsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Page_links>("links", vpc_peeringsGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", vpc_peeringsGetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues<Vpc_peering>("vpc_peerings", vpc_peeringsGetResponse.vpcPeerings, serializeVpc_peering);
    writer.writeAdditionalData(vpc_peeringsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_peeringsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_peeringsPostRequestBody(writer: SerializationWriter, vpc_peeringsPostRequestBody: Partial<Vpc_peeringsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_peeringsPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", vpc_peeringsPostRequestBody.name);
    writer.writeCollectionOfPrimitiveValues<Guid>("vpc_ids", vpc_peeringsPostRequestBody.vpcIds);
    writer.writeAdditionalData(vpc_peeringsPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Vpc_peeringsPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVpc_peeringsPostResponse(writer: SerializationWriter, vpc_peeringsPostResponse: Partial<Vpc_peeringsPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!vpc_peeringsPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Vpc_peering>("vpc_peering", vpc_peeringsPostResponse.vpcPeering, serializeVpc_peering);
    writer.writeAdditionalData(vpc_peeringsPostResponse.additionalData);
}
export interface Vpc_peeringsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The vpc_peerings property
     */
    vpcPeerings?: Vpc_peering[] | null;
}
export interface Vpc_peeringsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The name of the VPC peering. Must be unique within the team and may only contain alphanumeric characters and dashes.
     */
    name?: string | null;
    /**
     * An array of the two peered VPCs IDs.
     */
    vpcIds?: Guid[] | null;
}
export interface Vpc_peeringsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The vpc_peering property
     */
    vpcPeering?: Vpc_peering | null;
}
/**
 * Builds and executes requests for operations under /v2/vpc_peerings
 */
export interface Vpc_peeringsRequestBuilder extends BaseRequestBuilder<Vpc_peeringsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.vpc_peerings.item collection
     * @param vpc_peering_id A unique identifier for a VPC peering.
     * @returns {WithVpc_peering_ItemRequestBuilder}
     */
     byVpc_peering_id(vpc_peering_id: Guid) : WithVpc_peering_ItemRequestBuilder;
    /**
     * To list all of the VPC peerings on your account, send a GET request to `/v2/vpc_peerings`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vpc_peeringsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<Vpc_peeringsRequestBuilderGetQueryParameters> | undefined) : Promise<Vpc_peeringsGetResponse | undefined>;
    /**
     * To create a new VPC Peering, send a POST request to `/v2/vpc_peerings` specifying a name and a list of two VPC IDs to peer. The response code, 202 Accepted, does not indicate the success or failure of the operation, just that the request has been accepted for processing.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Vpc_peeringsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Vpc_peeringsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Vpc_peeringsPostResponse | undefined>;
    /**
     * To list all of the VPC peerings on your account, send a GET request to `/v2/vpc_peerings`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Vpc_peeringsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new VPC Peering, send a POST request to `/v2/vpc_peerings` specifying a name and a list of two VPC IDs to peer. The response code, 202 Accepted, does not indicate the success or failure of the operation, just that the request has been accepted for processing.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Vpc_peeringsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the VPC peerings on your account, send a GET request to `/v2/vpc_peerings`.
 */
export interface Vpc_peeringsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * The slug identifier for the region where the resource is available.
     */
    region?: Region_slug;
}
/**
 * Uri template for the request builder.
 */
export const Vpc_peeringsRequestBuilderUriTemplate = "{+baseurl}/v2/vpc_peerings{?page*,per_page*,region*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Vpc_peeringsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Vpc_peeringsRequestBuilderNavigationMetadata: Record<Exclude<keyof Vpc_peeringsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byVpc_peering_id: {
        requestsMetadata: WithVpc_peering_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["vpc_peering_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Vpc_peeringsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Vpc_peeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVpc_peeringsGetResponseFromDiscriminatorValue,
        queryParametersMapper: Vpc_peeringsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: Vpc_peeringsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVpc_peeringsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVpc_peeringsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
