/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCertificateFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoCertificate_request_custom, deserializeIntoCertificate_request_lets_encrypt, serializeCertificate, serializeCertificate_request_custom, serializeCertificate_request_lets_encrypt, serializeMeta_properties, serializePage_links } from '../../models/index.js';
// @ts-ignore
import { WithCertificate_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CertificatesGetResponse}
 */
// @ts-ignore
export function createCertificatesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoCertificatesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Certificate_request_custom | Certificate_request_lets_encrypt}
 */
// @ts-ignore
export function createCertificatesPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoCertificatesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CertificatesPostResponse}
 */
// @ts-ignore
export function createCertificatesPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoCertificatesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCertificatesGetResponse(certificatesGetResponse = {}) {
    return {
        "certificates": n => { certificatesGetResponse.certificates = n.getCollectionOfObjectValues(createCertificateFromDiscriminatorValue); },
        "links": n => { certificatesGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { certificatesGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCertificatesPostRequestBody(certificatesPostRequestBody = {}) {
    return {
        ...deserializeIntoCertificate_request_custom(certificatesPostRequestBody),
        ...deserializeIntoCertificate_request_lets_encrypt(certificatesPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCertificatesPostResponse(certificatesPostResponse = {}) {
    return {
        "certificate": n => { certificatesPostResponse.certificate = n.getObjectValue(createCertificateFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCertificatesGetResponse(writer, certificatesGetResponse = {}) {
    if (certificatesGetResponse) {
        writer.writeCollectionOfObjectValues("certificates", certificatesGetResponse.certificates, serializeCertificate);
        writer.writeObjectValue("links", certificatesGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", certificatesGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCertificatesPostRequestBody(writer, certificatesPostRequestBody = {}) {
    serializeCertificate_request_custom(writer, certificatesPostRequestBody);
    serializeCertificate_request_lets_encrypt(writer, certificatesPostRequestBody);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCertificatesPostResponse(writer, certificatesPostResponse = {}) {
    if (certificatesPostResponse) {
        writer.writeObjectValue("certificate", certificatesPostResponse.certificate, serializeCertificate);
    }
}
/**
 * Uri template for the request builder.
 */
export const CertificatesRequestBuilderUriTemplate = "{+baseurl}/v2/certificates{?name*,page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CertificatesRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CertificatesRequestBuilderNavigationMetadata = {
    byCertificate_id: {
        requestsMetadata: WithCertificate_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["certificate_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CertificatesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: CertificatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createCertificatesGetResponseFromDiscriminatorValue,
        queryParametersMapper: CertificatesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CertificatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createCertificatesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCertificatesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
