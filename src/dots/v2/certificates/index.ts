/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCertificate_request_customFromDiscriminatorValue, createCertificate_request_lets_encryptFromDiscriminatorValue, createCertificateFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoCertificate_request_custom, deserializeIntoCertificate_request_lets_encrypt, serializeCertificate, serializeCertificate_request_custom, serializeCertificate_request_lets_encrypt, serializeMeta_properties, serializePage_links, type Certificate, type Certificate_request_custom, type Certificate_request_lets_encrypt, type ErrorEscaped, type Meta_properties, type Page_links } from '../../models/index.js';
// @ts-ignore
import { type WithCertificate_ItemRequestBuilder, WithCertificate_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CertificatesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The certificates property
     */
    certificates?: Certificate[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type CertificatesPostRequestBody = Certificate_request_custom | Certificate_request_lets_encrypt;
export interface CertificatesPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The certificate property
     */
    certificate?: Certificate | null;
}
/**
 * Builds and executes requests for operations under /v2/certificates
 */
export interface CertificatesRequestBuilder extends BaseRequestBuilder<CertificatesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.certificates.item collection
     * @param certificate_id A unique identifier for a certificate.
     * @returns {WithCertificate_ItemRequestBuilder}
     */
     byCertificate_id(certificate_id: Guid) : WithCertificate_ItemRequestBuilder;
    /**
     * To list all of the certificates available on your account, send a GET request to `/v2/certificates`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CertificatesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CertificatesRequestBuilderGetQueryParameters> | undefined) : Promise<CertificatesGetResponse | undefined>;
    /**
     * To upload new SSL certificate which you have previously generated, send a POSTrequest to `/v2/certificates`.When uploading a user-generated certificate, the `private_key`,`leaf_certificate`, and optionally the `certificate_chain` attributes shouldbe provided. The type must be set to `custom`.When using Let's Encrypt to create a certificate, the `dns_names` attributemust be provided, and the type must be set to `lets_encrypt`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CertificatesPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Certificate_request_custom | Certificate_request_lets_encrypt, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CertificatesPostResponse | undefined>;
    /**
     * To list all of the certificates available on your account, send a GET request to `/v2/certificates`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CertificatesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To upload new SSL certificate which you have previously generated, send a POSTrequest to `/v2/certificates`.When uploading a user-generated certificate, the `private_key`,`leaf_certificate`, and optionally the `certificate_chain` attributes shouldbe provided. The type must be set to `custom`.When using Let's Encrypt to create a certificate, the `dns_names` attributemust be provided, and the type must be set to `lets_encrypt`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Certificate_request_custom | Certificate_request_lets_encrypt, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the certificates available on your account, send a GET request to `/v2/certificates`.
 */
export interface CertificatesRequestBuilderGetQueryParameters {
    /**
     * Name of expected certificate
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CertificatesGetResponse}
 */
// @ts-ignore
export function createCertificatesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCertificatesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Certificate_request_custom | Certificate_request_lets_encrypt}
 */
// @ts-ignore
export function createCertificatesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCertificatesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CertificatesPostResponse}
 */
// @ts-ignore
export function createCertificatesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCertificatesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCertificatesGetResponse(certificatesGetResponse: Partial<CertificatesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "certificates": n => { certificatesGetResponse.certificates = n.getCollectionOfObjectValues<Certificate>(createCertificateFromDiscriminatorValue); },
        "links": n => { certificatesGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { certificatesGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCertificatesPostRequestBody(certificatesPostRequestBody: Partial<Certificate_request_custom | Certificate_request_lets_encrypt> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCertificate_request_custom(certificatesPostRequestBody as Certificate_request_custom),
        ...deserializeIntoCertificate_request_lets_encrypt(certificatesPostRequestBody as Certificate_request_lets_encrypt),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCertificatesPostResponse(certificatesPostResponse: Partial<CertificatesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "certificate": n => { certificatesPostResponse.certificate = n.getObjectValue<Certificate>(createCertificateFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCertificatesGetResponse(writer: SerializationWriter, certificatesGetResponse: Partial<CertificatesGetResponse> | undefined | null = {}) : void {
    if (certificatesGetResponse) {
        writer.writeCollectionOfObjectValues<Certificate>("certificates", certificatesGetResponse.certificates, serializeCertificate);
        writer.writeObjectValue<Page_links>("links", certificatesGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", certificatesGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(certificatesGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCertificatesPostRequestBody(writer: SerializationWriter, certificatesPostRequestBody: Partial<Certificate_request_custom | Certificate_request_lets_encrypt> | undefined | null = {}) : void {
    serializeCertificate_request_custom(writer, certificatesPostRequestBody as Certificate_request_custom);
    serializeCertificate_request_lets_encrypt(writer, certificatesPostRequestBody as Certificate_request_lets_encrypt);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCertificatesPostResponse(writer: SerializationWriter, certificatesPostResponse: Partial<CertificatesPostResponse> | undefined | null = {}) : void {
    if (certificatesPostResponse) {
        writer.writeObjectValue<Certificate>("certificate", certificatesPostResponse.certificate, serializeCertificate);
        writer.writeAdditionalData(certificatesPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const CertificatesRequestBuilderUriTemplate = "{+baseurl}/v2/certificates{?name*,page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CertificatesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CertificatesRequestBuilderNavigationMetadata: Record<Exclude<keyof CertificatesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCertificate_id: {
        requestsMetadata: WithCertificate_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["certificate_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CertificatesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CertificatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCertificatesGetResponseFromDiscriminatorValue,
        queryParametersMapper: CertificatesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CertificatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCertificatesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCertificatesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
