/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCertificateFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeCertificate } from '../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCertificate_GetResponse}
 */
// @ts-ignore
export function createWithCertificate_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithCertificate_GetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCertificate_GetResponse(withCertificate_GetResponse = {}) {
    return {
        "certificate": n => { withCertificate_GetResponse.certificate = n.getObjectValue(createCertificateFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCertificate_GetResponse(writer, withCertificate_GetResponse = {}) {
    if (withCertificate_GetResponse) {
        writer.writeObjectValue("certificate", withCertificate_GetResponse.certificate, serializeCertificate);
        writer.writeAdditionalData(withCertificate_GetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithCertificate_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/certificates/{certificate_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCertificate_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithCertificate_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCertificate_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithCertificate_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
