/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCertificateFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeCertificate, type Certificate, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCertificate_GetResponse}
 */
// @ts-ignore
export function createWithCertificate_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCertificate_GetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithCertificate_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCertificate_GetResponse(withCertificate_GetResponse: Partial<WithCertificate_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "certificate": n => { withCertificate_GetResponse.certificate = n.getObjectValue<Certificate>(createCertificateFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithCertificate_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCertificate_GetResponse(writer: SerializationWriter, withCertificate_GetResponse: Partial<WithCertificate_GetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withCertificate_GetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Certificate>("certificate", withCertificate_GetResponse.certificate, serializeCertificate);
    writer.writeAdditionalData(withCertificate_GetResponse.additionalData);
}
export interface WithCertificate_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The certificate property
     */
    certificate?: Certificate | null;
}
/**
 * Builds and executes requests for operations under /v2/certificates/{certificate_id}
 */
export interface WithCertificate_ItemRequestBuilder extends BaseRequestBuilder<WithCertificate_ItemRequestBuilder> {
    /**
     * To delete a specific certificate, send a DELETE request to`/v2/certificates/$CERTIFICATE_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing certificate, send a GET request to `/v2/certificates/$CERTIFICATE_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCertificate_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCertificate_GetResponse | undefined>;
    /**
     * To delete a specific certificate, send a DELETE request to`/v2/certificates/$CERTIFICATE_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing certificate, send a GET request to `/v2/certificates/$CERTIFICATE_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithCertificate_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/certificates/{certificate_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCertificate_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithCertificate_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCertificate_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCertificate_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
