/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createLoad_balancerFromDiscriminatorValue, serializeLoad_balancer } from '../../../models/index.js';
// @ts-ignore
import { CacheRequestBuilderRequestsMetadata } from './cache/index.js';
// @ts-ignore
import { DropletsRequestBuilderRequestsMetadata } from './droplets/index.js';
// @ts-ignore
import { Forwarding_rulesRequestBuilderRequestsMetadata } from './forwarding_rules/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithLb_GetResponse}
 */
// @ts-ignore
export function createWithLb_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithLb_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithLb_PutResponse}
 */
// @ts-ignore
export function createWithLb_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithLb_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithLb_GetResponse(withLb_GetResponse = {}) {
    return {
        "load_balancer": n => { withLb_GetResponse.loadBalancer = n.getObjectValue(createLoad_balancerFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithLb_PutResponse(withLb_PutResponse = {}) {
    return {
        "load_balancer": n => { withLb_PutResponse.loadBalancer = n.getObjectValue(createLoad_balancerFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithLb_GetResponse(writer, withLb_GetResponse = {}) {
    if (withLb_GetResponse) {
        writer.writeObjectValue("load_balancer", withLb_GetResponse.loadBalancer, serializeLoad_balancer);
        writer.writeAdditionalData(withLb_GetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithLb_PutResponse(writer, withLb_PutResponse = {}) {
    if (withLb_PutResponse) {
        writer.writeObjectValue("load_balancer", withLb_PutResponse.loadBalancer, serializeLoad_balancer);
        writer.writeAdditionalData(withLb_PutResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithLb_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/load_balancers/{lb_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithLb_ItemRequestBuilderNavigationMetadata = {
    cache: {
        requestsMetadata: CacheRequestBuilderRequestsMetadata,
    },
    droplets: {
        requestsMetadata: DropletsRequestBuilderRequestsMetadata,
    },
    forwarding_rules: {
        requestsMetadata: Forwarding_rulesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithLb_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithLb_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithLb_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithLb_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithLb_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithLb_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestInformationContentSetMethod: "setContentFromScalar",
    },
};
/* tslint:enable */
/* eslint-enable */
