/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createPartner_attachmentFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializePartner_attachment, serializePartner_attachment_writable } from '../../../models/index.js';
// @ts-ignore
import { WithPa_ItemRequestBuilderNavigationMetadata, WithPa_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachmentsGetResponse}
 */
// @ts-ignore
export function createAttachmentsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoAttachmentsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachmentsPostResponse}
 */
// @ts-ignore
export function createAttachmentsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoAttachmentsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachmentsGetResponse(attachmentsGetResponse = {}) {
    return {
        "links": n => { attachmentsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { attachmentsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "partner_attachments": n => { attachmentsGetResponse.partnerAttachments = n.getCollectionOfObjectValues(createPartner_attachmentFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachmentsPostResponse(attachmentsPostResponse = {}) {
    return {
        "partner_attachment": n => { attachmentsPostResponse.partnerAttachment = n.getObjectValue(createPartner_attachmentFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachmentsGetResponse(writer, attachmentsGetResponse = {}) {
    if (attachmentsGetResponse) {
        writer.writeObjectValue("links", attachmentsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", attachmentsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("partner_attachments", attachmentsGetResponse.partnerAttachments, serializePartner_attachment);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachmentsPostResponse(writer, attachmentsPostResponse = {}) {
    if (attachmentsPostResponse) {
        writer.writeObjectValue("partner_attachment", attachmentsPostResponse.partnerAttachment, serializePartner_attachment);
    }
}
/**
 * Uri template for the request builder.
 */
export const AttachmentsRequestBuilderUriTemplate = "{+baseurl}/v2/partner_network_connect/attachments{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AttachmentsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AttachmentsRequestBuilderNavigationMetadata = {
    byPa_id: {
        requestsMetadata: WithPa_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithPa_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["pa_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AttachmentsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createAttachmentsGetResponseFromDiscriminatorValue,
        queryParametersMapper: AttachmentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            422: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createAttachmentsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePartner_attachment_writable,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
