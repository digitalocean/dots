/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createPartner_attachmentFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializePartner_attachment, serializePartner_attachment_writable, type ErrorEscaped, type Meta_properties, type Page_links, type Partner_attachment, type Partner_attachment_writable } from '../../../models/index.js';
// @ts-ignore
import { type WithPa_ItemRequestBuilder, WithPa_ItemRequestBuilderNavigationMetadata, WithPa_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttachmentsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The partner_attachments property
     */
    partnerAttachments?: Partner_attachment[] | null;
}
export interface AttachmentsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The partner_attachment property
     */
    partnerAttachment?: Partner_attachment | null;
}
/**
 * Builds and executes requests for operations under /v2/partner_network_connect/attachments
 */
export interface AttachmentsRequestBuilder extends BaseRequestBuilder<AttachmentsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.partner_network_connect.attachments.item collection
     * @param pa_id A unique identifier for a partner attachment.
     * @returns {WithPa_ItemRequestBuilder}
     */
     byPa_id(pa_id: string) : WithPa_ItemRequestBuilder;
    /**
     * To list all of the Partner Attachments on your account, send a `GET` request to `/v2/partner_network_connect/attachments`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AttachmentsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AttachmentsRequestBuilderGetQueryParameters> | undefined) : Promise<AttachmentsGetResponse | undefined>;
    /**
     * To create a new partner attachment, send a `POST` request to`/v2/partner_network_connect/attachments` with a JSON object containing therequired configuration details.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AttachmentsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 422 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Partner_attachment_writable, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AttachmentsPostResponse | undefined>;
    /**
     * To list all of the Partner Attachments on your account, send a `GET` request to `/v2/partner_network_connect/attachments`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AttachmentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new partner attachment, send a `POST` request to`/v2/partner_network_connect/attachments` with a JSON object containing therequired configuration details.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Partner_attachment_writable, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the Partner Attachments on your account, send a `GET` request to `/v2/partner_network_connect/attachments`.
 */
export interface AttachmentsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachmentsGetResponse}
 */
// @ts-ignore
export function createAttachmentsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttachmentsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttachmentsPostResponse}
 */
// @ts-ignore
export function createAttachmentsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttachmentsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param AttachmentsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachmentsGetResponse(attachmentsGetResponse: Partial<AttachmentsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { attachmentsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { attachmentsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "partner_attachments": n => { attachmentsGetResponse.partnerAttachments = n.getCollectionOfObjectValues<Partner_attachment>(createPartner_attachmentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AttachmentsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttachmentsPostResponse(attachmentsPostResponse: Partial<AttachmentsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "partner_attachment": n => { attachmentsPostResponse.partnerAttachment = n.getObjectValue<Partner_attachment>(createPartner_attachmentFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param AttachmentsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachmentsGetResponse(writer: SerializationWriter, attachmentsGetResponse: Partial<AttachmentsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attachmentsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Page_links>("links", attachmentsGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", attachmentsGetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues<Partner_attachment>("partner_attachments", attachmentsGetResponse.partnerAttachments, serializePartner_attachment);
    writer.writeAdditionalData(attachmentsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param AttachmentsPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttachmentsPostResponse(writer: SerializationWriter, attachmentsPostResponse: Partial<AttachmentsPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!attachmentsPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Partner_attachment>("partner_attachment", attachmentsPostResponse.partnerAttachment, serializePartner_attachment);
    writer.writeAdditionalData(attachmentsPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const AttachmentsRequestBuilderUriTemplate = "{+baseurl}/v2/partner_network_connect/attachments{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AttachmentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AttachmentsRequestBuilderNavigationMetadata: Record<Exclude<keyof AttachmentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPa_id: {
        requestsMetadata: WithPa_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithPa_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["pa_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AttachmentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAttachmentsGetResponseFromDiscriminatorValue,
        queryParametersMapper: AttachmentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            422: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAttachmentsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePartner_attachment_writable,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
