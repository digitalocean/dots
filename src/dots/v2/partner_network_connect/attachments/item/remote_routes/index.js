/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createPartner_attachment_remote_route_writableFromDiscriminatorValue, createPartner_attachment_remote_routeFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializePartner_attachment_remote_route, serializePartner_attachment_remote_route_writable } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Remote_routesGetResponse}
 */
// @ts-ignore
export function createRemote_routesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRemote_routesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Remote_routesPutRequestBody}
 */
// @ts-ignore
export function createRemote_routesPutRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoRemote_routesPutRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Remote_routesPutResponse}
 */
// @ts-ignore
export function createRemote_routesPutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRemote_routesPutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRemote_routesGetResponse(remote_routesGetResponse = {}) {
    return {
        "links": n => { remote_routesGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { remote_routesGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "remote_routes": n => { remote_routesGetResponse.remoteRoutes = n.getCollectionOfObjectValues(createPartner_attachment_remote_routeFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRemote_routesPutRequestBody(remote_routesPutRequestBody = {}) {
    return {
        "remote_routes": n => { remote_routesPutRequestBody.remoteRoutes = n.getCollectionOfObjectValues(createPartner_attachment_remote_route_writableFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRemote_routesPutResponse(remote_routesPutResponse = {}) {
    return {
        "links": n => { remote_routesPutResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { remote_routesPutResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "remote_routes": n => { remote_routesPutResponse.remoteRoutes = n.getCollectionOfObjectValues(createPartner_attachment_remote_routeFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRemote_routesGetResponse(writer, remote_routesGetResponse = {}) {
    if (remote_routesGetResponse) {
        writer.writeObjectValue("links", remote_routesGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", remote_routesGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("remote_routes", remote_routesGetResponse.remoteRoutes, serializePartner_attachment_remote_route);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRemote_routesPutRequestBody(writer, remote_routesPutRequestBody = {}) {
    if (remote_routesPutRequestBody) {
        writer.writeCollectionOfObjectValues("remote_routes", remote_routesPutRequestBody.remoteRoutes, serializePartner_attachment_remote_route_writable);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRemote_routesPutResponse(writer, remote_routesPutResponse = {}) {
    if (remote_routesPutResponse) {
        writer.writeObjectValue("links", remote_routesPutResponse.links, serializePage_links);
        writer.writeObjectValue("meta", remote_routesPutResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("remote_routes", remote_routesPutResponse.remoteRoutes, serializePartner_attachment_remote_route);
    }
}
/**
 * Uri template for the request builder.
 */
export const Remote_routesRequestBuilderUriTemplate = "{+baseurl}/v2/partner_network_connect/attachments/{pa_id}/remote_routes{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Remote_routesRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Remote_routesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: Remote_routesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRemote_routesGetResponseFromDiscriminatorValue,
        queryParametersMapper: Remote_routesRequestBuilderGetQueryParametersMapper,
    },
    put: {
        uriTemplate: Remote_routesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRemote_routesPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRemote_routesPutRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
