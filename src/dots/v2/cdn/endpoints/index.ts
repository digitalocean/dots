/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCdn_endpointFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeCdn_endpoint, serializeMeta_properties, serializePage_links, type Cdn_endpoint, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../models/index.js';
// @ts-ignore
import { type WithCdn_ItemRequestBuilder, WithCdn_ItemRequestBuilderNavigationMetadata, WithCdn_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EndpointsGetResponse}
 */
// @ts-ignore
export function createEndpointsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpointsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EndpointsPostResponse}
 */
// @ts-ignore
export function createEndpointsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEndpointsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpointsGetResponse(endpointsGetResponse: Partial<EndpointsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endpoints": n => { endpointsGetResponse.endpoints = n.getCollectionOfObjectValues<Cdn_endpoint>(createCdn_endpointFromDiscriminatorValue); },
        "links": n => { endpointsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { endpointsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEndpointsPostResponse(endpointsPostResponse: Partial<EndpointsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endpoint": n => { endpointsPostResponse.endpoint = n.getObjectValue<Cdn_endpoint>(createCdn_endpointFromDiscriminatorValue); },
    }
}
export interface EndpointsGetResponse extends Parsable {
    /**
     * The endpoints property
     */
    endpoints?: Cdn_endpoint[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface EndpointsPostResponse extends Parsable {
    /**
     * The endpoint property
     */
    endpoint?: Cdn_endpoint | null;
}
/**
 * Builds and executes requests for operations under /v2/cdn/endpoints
 */
export interface EndpointsRequestBuilder extends BaseRequestBuilder<EndpointsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.cdn.endpoints.item collection
     * @param cdn_id A unique identifier for a CDN endpoint.
     * @returns {WithCdn_ItemRequestBuilder}
     */
     byCdn_id(cdn_id: Guid) : WithCdn_ItemRequestBuilder;
    /**
     * To list all of the CDN endpoints available on your account, send a GET request to `/v2/cdn/endpoints`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EndpointsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<EndpointsRequestBuilderGetQueryParameters> | undefined) : Promise<EndpointsGetResponse | undefined>;
    /**
     * To create a new CDN endpoint, send a POST request to `/v2/cdn/endpoints`. Theorigin attribute must be set to the fully qualified domain name (FQDN) of aDigitalOcean Space. Optionally, the TTL may be configured by setting the `ttl`attribute.A custom subdomain may be configured by specifying the `custom_domain` and`certificate_id` attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EndpointsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Cdn_endpoint, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EndpointsPostResponse | undefined>;
    /**
     * To list all of the CDN endpoints available on your account, send a GET request to `/v2/cdn/endpoints`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EndpointsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new CDN endpoint, send a POST request to `/v2/cdn/endpoints`. Theorigin attribute must be set to the fully qualified domain name (FQDN) of aDigitalOcean Space. Optionally, the TTL may be configured by setting the `ttl`attribute.A custom subdomain may be configured by specifying the `custom_domain` and`certificate_id` attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Cdn_endpoint, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the CDN endpoints available on your account, send a GET request to `/v2/cdn/endpoints`.
 */
export interface EndpointsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpointsGetResponse(writer: SerializationWriter, endpointsGetResponse: Partial<EndpointsGetResponse> | undefined | null = {}) : void {
    if (endpointsGetResponse) {
        writer.writeCollectionOfObjectValues<Cdn_endpoint>("endpoints", endpointsGetResponse.endpoints, serializeCdn_endpoint);
        writer.writeObjectValue<Page_links>("links", endpointsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", endpointsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEndpointsPostResponse(writer: SerializationWriter, endpointsPostResponse: Partial<EndpointsPostResponse> | undefined | null = {}) : void {
    if (endpointsPostResponse) {
        writer.writeObjectValue<Cdn_endpoint>("endpoint", endpointsPostResponse.endpoint, serializeCdn_endpoint);
    }
}
/**
 * Uri template for the request builder.
 */
export const EndpointsRequestBuilderUriTemplate = "{+baseurl}/v2/cdn/endpoints{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EndpointsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EndpointsRequestBuilderNavigationMetadata: Record<Exclude<keyof EndpointsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCdn_id: {
        requestsMetadata: WithCdn_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithCdn_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["cdn_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EndpointsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: EndpointsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEndpointsGetResponseFromDiscriminatorValue,
        queryParametersMapper: EndpointsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: EndpointsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEndpointsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCdn_endpoint,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
