/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCdn_endpointFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeCdn_endpoint, serializeUpdate_endpoint, type Cdn_endpoint, type ErrorEscaped, type Update_endpoint } from '../../../../models/index.js';
// @ts-ignore
import { CacheRequestBuilderRequestsMetadata, type CacheRequestBuilder } from './cache/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCdn_GetResponse}
 */
// @ts-ignore
export function createWithCdn_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCdn_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCdn_PutResponse}
 */
// @ts-ignore
export function createWithCdn_PutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCdn_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCdn_GetResponse(withCdn_GetResponse: Partial<WithCdn_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endpoint": n => { withCdn_GetResponse.endpoint = n.getObjectValue<Cdn_endpoint>(createCdn_endpointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCdn_PutResponse(withCdn_PutResponse: Partial<WithCdn_PutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "endpoint": n => { withCdn_PutResponse.endpoint = n.getObjectValue<Cdn_endpoint>(createCdn_endpointFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCdn_GetResponse(writer: SerializationWriter, withCdn_GetResponse: Partial<WithCdn_GetResponse> | undefined | null = {}) : void {
    if (withCdn_GetResponse) {
        writer.writeObjectValue<Cdn_endpoint>("endpoint", withCdn_GetResponse.endpoint, serializeCdn_endpoint);
        writer.writeAdditionalData(withCdn_GetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCdn_PutResponse(writer: SerializationWriter, withCdn_PutResponse: Partial<WithCdn_PutResponse> | undefined | null = {}) : void {
    if (withCdn_PutResponse) {
        writer.writeObjectValue<Cdn_endpoint>("endpoint", withCdn_PutResponse.endpoint, serializeCdn_endpoint);
        writer.writeAdditionalData(withCdn_PutResponse.additionalData);
    }
}
export interface WithCdn_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The endpoint property
     */
    endpoint?: Cdn_endpoint | null;
}
/**
 * Builds and executes requests for operations under /v2/cdn/endpoints/{cdn_id}
 */
export interface WithCdn_ItemRequestBuilder extends BaseRequestBuilder<WithCdn_ItemRequestBuilder> {
    /**
     * The cache property
     */
    get cache(): CacheRequestBuilder;
    /**
     * To delete a specific CDN endpoint, send a DELETE request to`/v2/cdn/endpoints/$ENDPOINT_ID`.A status of 204 will be given. This indicates that the request was processedsuccessfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing CDN endpoint, send a GET request to `/v2/cdn/endpoints/$ENDPOINT_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCdn_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCdn_GetResponse | undefined>;
    /**
     * To update the TTL, certificate ID, or the FQDN of the custom subdomain foran existing CDN endpoint, send a PUT request to`/v2/cdn/endpoints/$ENDPOINT_ID`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCdn_PutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Update_endpoint, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCdn_PutResponse | undefined>;
    /**
     * To delete a specific CDN endpoint, send a DELETE request to`/v2/cdn/endpoints/$ENDPOINT_ID`.A status of 204 will be given. This indicates that the request was processedsuccessfully, but that no response body is needed.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing CDN endpoint, send a GET request to `/v2/cdn/endpoints/$ENDPOINT_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the TTL, certificate ID, or the FQDN of the custom subdomain foran existing CDN endpoint, send a PUT request to`/v2/cdn/endpoints/$ENDPOINT_ID`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Update_endpoint, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithCdn_PutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The endpoint property
     */
    endpoint?: Cdn_endpoint | null;
}
/**
 * Uri template for the request builder.
 */
export const WithCdn_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/cdn/endpoints/{cdn_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithCdn_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithCdn_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cache: {
        requestsMetadata: CacheRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCdn_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithCdn_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCdn_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCdn_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithCdn_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCdn_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdate_endpoint,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
