/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, serializePurge_cache, type ErrorEscaped, type Purge_cache } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/cdn/endpoints/{cdn_id}/cache
 */
export interface CacheRequestBuilder extends BaseRequestBuilder<CacheRequestBuilder> {
    /**
     * To purge cached content from a CDN endpoint, send a DELETE request to`/v2/cdn/endpoints/$ENDPOINT_ID/cache`. The body of the request should includea `files` attribute containing a list of cached file paths to be purged. Apath may be for a single file or may contain a wildcard (`*`) to recursivelypurge all files under a directory. When only a wildcard is provided, all cached files will be purged. There is a rate limit of 50 files per 20 seconds that can be purged. CDN endpoints have a rate limit of 5 requests per 10 seconds. Purging files using a wildcard path counts as a single request against the API's rate limit. Two identical purge requests cannot be sent at the same time.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(body: Purge_cache, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To purge cached content from a CDN endpoint, send a DELETE request to`/v2/cdn/endpoints/$ENDPOINT_ID/cache`. The body of the request should includea `files` attribute containing a list of cached file paths to be purged. Apath may be for a single file or may contain a wildcard (`*`) to recursivelypurge all files under a directory. When only a wildcard is provided, all cached files will be purged. There is a rate limit of 50 files per 20 seconds that can be purged. CDN endpoints have a rate limit of 5 requests per 10 seconds. Purging files using a wildcard path counts as a single request against the API's rate limit. Two identical purge requests cannot be sent at the same time.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: Purge_cache, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const CacheRequestBuilderUriTemplate = "{+baseurl}/v2/cdn/endpoints/{cdn_id}/cache";
/**
 * Metadata for all the requests in the request builder.
 */
export const CacheRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CacheRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePurge_cache,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
