/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createOneClicksFromDiscriminatorValue, serializeOneClicks, type ErrorEscaped, type OneClicks } from '../../models/index.js';
// @ts-ignore
import { KubernetesRequestBuilderRequestsMetadata, type KubernetesRequestBuilder } from './kubernetes/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OneClicksGetResponse}
 */
// @ts-ignore
export function createOneClicksGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOneClicksGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOneClicksGetResponse(oneClicksGetResponse: Partial<OneClicksGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "1_clicks": n => { oneClicksGetResponse.oneClicks = n.getCollectionOfObjectValues<OneClicks>(createOneClicksFromDiscriminatorValue); },
    }
}
export type GetTypeQueryParameterType = (typeof GetTypeQueryParameterTypeObject)[keyof typeof GetTypeQueryParameterTypeObject];
export interface OneClicksGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The One_clicks property
     */
    oneClicks?: OneClicks[] | null;
}
/**
 * Builds and executes requests for operations under /v2/1-clicks
 */
export interface OneClicksRequestBuilder extends BaseRequestBuilder<OneClicksRequestBuilder> {
    /**
     * The kubernetes property
     */
    get kubernetes(): KubernetesRequestBuilder;
    /**
     * To list all available 1-Click applications, send a GET request to `/v2/1-clicks`. The `type` maybe provided as query paramater in order to restrict results to a certain type of 1-Click, forexample: `/v2/1-clicks?type=droplet`. Current supported types are `kubernetes` and `droplet`.The response will be a JSON object with a key called `1_clicks`. This will be set to an array of1-Click application data, each of which will contain the the slug and type for the 1-Click.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OneClicksGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<OneClicksRequestBuilderGetQueryParameters> | undefined) : Promise<OneClicksGetResponse | undefined>;
    /**
     * To list all available 1-Click applications, send a GET request to `/v2/1-clicks`. The `type` maybe provided as query paramater in order to restrict results to a certain type of 1-Click, forexample: `/v2/1-clicks?type=droplet`. Current supported types are `kubernetes` and `droplet`.The response will be a JSON object with a key called `1_clicks`. This will be set to an array of1-Click application data, each of which will contain the the slug and type for the 1-Click.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<OneClicksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To list all available 1-Click applications, send a GET request to `/v2/1-clicks`. The `type` maybe provided as query paramater in order to restrict results to a certain type of 1-Click, forexample: `/v2/1-clicks?type=droplet`. Current supported types are `kubernetes` and `droplet`.The response will be a JSON object with a key called `1_clicks`. This will be set to an array of1-Click application data, each of which will contain the the slug and type for the 1-Click.
 */
export interface OneClicksRequestBuilderGetQueryParameters {
    /**
     * Restrict results to a certain type of 1-Click.
     */
    type?: GetTypeQueryParameterType;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOneClicksGetResponse(writer: SerializationWriter, oneClicksGetResponse: Partial<OneClicksGetResponse> | undefined | null = {}) : void {
    if (oneClicksGetResponse) {
        writer.writeCollectionOfObjectValues<OneClicks>("1_clicks", oneClicksGetResponse.oneClicks, serializeOneClicks);
        writer.writeAdditionalData(oneClicksGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const OneClicksRequestBuilderUriTemplate = "{+baseurl}/v2/1-clicks{?type*}";
export const GetTypeQueryParameterTypeObject = {
    Droplet: "droplet",
    Kubernetes: "kubernetes",
} as const;
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const OneClicksRequestBuilderNavigationMetadata: Record<Exclude<keyof OneClicksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    kubernetes: {
        requestsMetadata: KubernetesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const OneClicksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: OneClicksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOneClicksGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
