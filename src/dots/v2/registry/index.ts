/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createRegistryFromDiscriminatorValue, serializeRegistry, serializeRegistry_create, type ErrorEscaped, type Registry, type Registry_create } from '../../models/index.js';
// @ts-ignore
import { DockerCredentialsRequestBuilderRequestsMetadata, type DockerCredentialsRequestBuilder } from './dockerCredentials/index.js';
// @ts-ignore
import { type WithRegistry_nameItemRequestBuilder, WithRegistry_nameItemRequestBuilderNavigationMetadata } from './item/index.js';
// @ts-ignore
import { OptionsRequestBuilderRequestsMetadata, type OptionsRequestBuilder } from './options/index.js';
// @ts-ignore
import { SubscriptionRequestBuilderRequestsMetadata, type SubscriptionRequestBuilder } from './subscription/index.js';
// @ts-ignore
import { type ValidateNameRequestBuilder, ValidateNameRequestBuilderRequestsMetadata } from './validateName/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegistryGetResponse}
 */
// @ts-ignore
export function createRegistryGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegistryGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegistryPostResponse}
 */
// @ts-ignore
export function createRegistryPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegistryPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegistryGetResponse(registryGetResponse: Partial<RegistryGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "registry": n => { registryGetResponse.registry = n.getObjectValue<Registry>(createRegistryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegistryPostResponse(registryPostResponse: Partial<RegistryPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "registry": n => { registryPostResponse.registry = n.getObjectValue<Registry>(createRegistryFromDiscriminatorValue); },
    }
}
export interface RegistryGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The registry property
     */
    registry?: Registry | null;
}
export interface RegistryPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The registry property
     */
    registry?: Registry | null;
}
/**
 * Builds and executes requests for operations under /v2/registry
 */
export interface RegistryRequestBuilder extends BaseRequestBuilder<RegistryRequestBuilder> {
    /**
     * The dockerCredentials property
     */
    get dockerCredentials(): DockerCredentialsRequestBuilder;
    /**
     * The optionsPath property
     */
    get optionsPath(): OptionsRequestBuilder;
    /**
     * The subscription property
     */
    get subscription(): SubscriptionRequestBuilder;
    /**
     * The validateName property
     */
    get validateName(): ValidateNameRequestBuilder;
    /**
     * Gets an item from the ApiSdk.v2.registry.item collection
     * @param registry_name The name of a container registry.
     * @returns {WithRegistry_nameItemRequestBuilder}
     */
     byRegistry_name(registry_name: string) : WithRegistry_nameItemRequestBuilder;
    /**
     * To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registry`.This operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 412 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get information about your container registry, send a GET request to `/v2/registry`.This operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RegistryGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 412 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RegistryGetResponse | undefined>;
    /**
     * To create your container registry, send a POST request to `/v2/registry`.The `name` becomes part of the URL for images stored in the registry. Forexample, if your registry is called `example`, an image in it will have theURL `registry.digitalocean.com/example/image:tag`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RegistryPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Registry_create, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RegistryPostResponse | undefined>;
    /**
     * To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registry`.This operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get information about your container registry, send a GET request to `/v2/registry`.This operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create your container registry, send a POST request to `/v2/registry`.The `name` becomes part of the URL for images stored in the registry. Forexample, if your registry is called `example`, an image in it will have theURL `registry.digitalocean.com/example/image:tag`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Registry_create, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegistryGetResponse(writer: SerializationWriter, registryGetResponse: Partial<RegistryGetResponse> | undefined | null = {}) : void {
    if (registryGetResponse) {
        writer.writeObjectValue<Registry>("registry", registryGetResponse.registry, serializeRegistry);
        writer.writeAdditionalData(registryGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegistryPostResponse(writer: SerializationWriter, registryPostResponse: Partial<RegistryPostResponse> | undefined | null = {}) : void {
    if (registryPostResponse) {
        writer.writeObjectValue<Registry>("registry", registryPostResponse.registry, serializeRegistry);
        writer.writeAdditionalData(registryPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const RegistryRequestBuilderUriTemplate = "{+baseurl}/v2/registry";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RegistryRequestBuilderNavigationMetadata: Record<Exclude<keyof RegistryRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRegistry_name: {
        navigationMetadata: WithRegistry_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["registry_name"],
    },
    dockerCredentials: {
        requestsMetadata: DockerCredentialsRequestBuilderRequestsMetadata,
    },
    optionsPath: {
        requestsMetadata: OptionsRequestBuilderRequestsMetadata,
    },
    subscription: {
        requestsMetadata: SubscriptionRequestBuilderRequestsMetadata,
    },
    validateName: {
        requestsMetadata: ValidateNameRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RegistryRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            412: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: RegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            412: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRegistryGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: RegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRegistryPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRegistry_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
