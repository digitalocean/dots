/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue } from '../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OptionsGetResponse_options_subscription_tiers}
 */
// @ts-ignore
export function createOptionsGetResponse_options_subscription_tiersFromDiscriminatorValue(parseNode) {
    return deserializeIntoOptionsGetResponse_options_subscription_tiers;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OptionsGetResponse_options}
 */
// @ts-ignore
export function createOptionsGetResponse_optionsFromDiscriminatorValue(parseNode) {
    return deserializeIntoOptionsGetResponse_options;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OptionsGetResponse}
 */
// @ts-ignore
export function createOptionsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoOptionsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOptionsGetResponse(optionsGetResponse = {}) {
    return {
        "options": n => { optionsGetResponse.options = n.getObjectValue(createOptionsGetResponse_optionsFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOptionsGetResponse_options(optionsGetResponse_options = {}) {
    return {
        "available_regions": n => { optionsGetResponse_options.availableRegions = n.getCollectionOfPrimitiveValues(); },
        "subscription_tiers": n => { optionsGetResponse_options.subscriptionTiers = n.getCollectionOfObjectValues(createOptionsGetResponse_options_subscription_tiersFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOptionsGetResponse_options_subscription_tiers(optionsGetResponse_options_subscription_tiers = {}) {
    return {
        "allow_storage_overage": n => { optionsGetResponse_options_subscription_tiers.allowStorageOverage = n.getBooleanValue(); },
        "eligibility_reasons": n => { optionsGetResponse_options_subscription_tiers.eligibilityReasons = n.getCollectionOfEnumValues(OptionsGetResponse_options_subscription_tiers_eligibility_reasonsObject); },
        "eligible": n => { optionsGetResponse_options_subscription_tiers.eligible = n.getBooleanValue(); },
        "included_bandwidth_bytes": n => { optionsGetResponse_options_subscription_tiers.includedBandwidthBytes = n.getNumberValue(); },
        "included_repositories": n => { optionsGetResponse_options_subscription_tiers.includedRepositories = n.getNumberValue(); },
        "included_storage_bytes": n => { optionsGetResponse_options_subscription_tiers.includedStorageBytes = n.getNumberValue(); },
        "monthly_price_in_cents": n => { optionsGetResponse_options_subscription_tiers.monthlyPriceInCents = n.getNumberValue(); },
        "name": n => { optionsGetResponse_options_subscription_tiers.name = n.getStringValue(); },
        "slug": n => { optionsGetResponse_options_subscription_tiers.slug = n.getStringValue(); },
        "storage_overage_price_in_cents": n => { optionsGetResponse_options_subscription_tiers.storageOveragePriceInCents = n.getNumberValue(); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOptionsGetResponse(writer, optionsGetResponse = {}) {
    if (optionsGetResponse) {
        writer.writeObjectValue("options", optionsGetResponse.options, serializeOptionsGetResponse_options);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOptionsGetResponse_options(writer, optionsGetResponse_options = {}) {
    if (optionsGetResponse_options) {
        writer.writeCollectionOfPrimitiveValues("available_regions", optionsGetResponse_options.availableRegions);
        writer.writeCollectionOfObjectValues("subscription_tiers", optionsGetResponse_options.subscriptionTiers, serializeOptionsGetResponse_options_subscription_tiers);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOptionsGetResponse_options_subscription_tiers(writer, optionsGetResponse_options_subscription_tiers = {}) {
    if (optionsGetResponse_options_subscription_tiers) {
        writer.writeBooleanValue("allow_storage_overage", optionsGetResponse_options_subscription_tiers.allowStorageOverage);
        if (optionsGetResponse_options_subscription_tiers.eligibilityReasons)
            writer.writeCollectionOfEnumValues("eligibility_reasons", optionsGetResponse_options_subscription_tiers.eligibilityReasons);
        writer.writeBooleanValue("eligible", optionsGetResponse_options_subscription_tiers.eligible);
        writer.writeNumberValue("included_bandwidth_bytes", optionsGetResponse_options_subscription_tiers.includedBandwidthBytes);
        writer.writeNumberValue("included_repositories", optionsGetResponse_options_subscription_tiers.includedRepositories);
        writer.writeNumberValue("included_storage_bytes", optionsGetResponse_options_subscription_tiers.includedStorageBytes);
        writer.writeNumberValue("monthly_price_in_cents", optionsGetResponse_options_subscription_tiers.monthlyPriceInCents);
        writer.writeStringValue("name", optionsGetResponse_options_subscription_tiers.name);
        writer.writeStringValue("slug", optionsGetResponse_options_subscription_tiers.slug);
        writer.writeNumberValue("storage_overage_price_in_cents", optionsGetResponse_options_subscription_tiers.storageOveragePriceInCents);
    }
}
/**
 * Uri template for the request builder.
 */
export const OptionsRequestBuilderUriTemplate = "{+baseurl}/v2/registry/options";
export const OptionsGetResponse_options_subscription_tiers_eligibility_reasonsObject = {
    OverRepositoryLimit: "OverRepositoryLimit",
    OverStorageLimit: "OverStorageLimit",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const OptionsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: OptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createOptionsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
