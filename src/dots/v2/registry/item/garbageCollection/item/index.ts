/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createGarbage_collectionFromDiscriminatorValue, serializeGarbage_collection, serializeUpdate_registry, type ErrorEscaped, type Garbage_collection, type Update_registry } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithGarbage_collection_uuPutResponse}
 */
// @ts-ignore
export function createWithGarbage_collection_uuPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithGarbage_collection_uuPutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithGarbage_collection_uuPutResponse(withGarbage_collection_uuPutResponse: Partial<WithGarbage_collection_uuPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "garbage_collection": n => { withGarbage_collection_uuPutResponse.garbageCollection = n.getObjectValue<Garbage_collection>(createGarbage_collectionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithGarbage_collection_uuPutResponse(writer: SerializationWriter, withGarbage_collection_uuPutResponse: Partial<WithGarbage_collection_uuPutResponse> | undefined | null = {}) : void {
    if (withGarbage_collection_uuPutResponse) {
        writer.writeObjectValue<Garbage_collection>("garbage_collection", withGarbage_collection_uuPutResponse.garbageCollection, serializeGarbage_collection);
        writer.writeAdditionalData(withGarbage_collection_uuPutResponse.additionalData);
    }
}
/**
 * Builds and executes requests for operations under /v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid}
 */
export interface WithGarbage_collection_uuItemRequestBuilder extends BaseRequestBuilder<WithGarbage_collection_uuItemRequestBuilder> {
    /**
     * To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registry/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithGarbage_collection_uuPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Update_registry, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithGarbage_collection_uuPutResponse | undefined>;
    /**
     * To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registry/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Update_registry, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithGarbage_collection_uuPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The garbage_collection property
     */
    garbageCollection?: Garbage_collection | null;
}
/**
 * Uri template for the request builder.
 */
export const WithGarbage_collection_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithGarbage_collection_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    put: {
        uriTemplate: WithGarbage_collection_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithGarbage_collection_uuPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdate_registry,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
