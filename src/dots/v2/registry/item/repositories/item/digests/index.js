/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createRepository_manifestFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeRepository_manifest } from '../../../../../../models/index.js';
// @ts-ignore
import { WithManifest_digestItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DigestsGetResponse}
 */
// @ts-ignore
export function createDigestsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDigestsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDigestsGetResponse(digestsGetResponse = {}) {
    return {
        "links": n => { digestsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "manifests": n => { digestsGetResponse.manifests = n.getCollectionOfObjectValues(createRepository_manifestFromDiscriminatorValue); },
        "meta": n => { digestsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDigestsGetResponse(writer, digestsGetResponse = {}) {
    if (digestsGetResponse) {
        writer.writeObjectValue("links", digestsGetResponse.links, serializePage_links);
        writer.writeCollectionOfObjectValues("manifests", digestsGetResponse.manifests, serializeRepository_manifest);
        writer.writeObjectValue("meta", digestsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Uri template for the request builder.
 */
export const DigestsRequestBuilderUriTemplate = "{+baseurl}/v2/registry/{registry_name}/repositories/{repository_name}/digests{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DigestsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DigestsRequestBuilderNavigationMetadata = {
    byManifest_digest: {
        requestsMetadata: WithManifest_digestItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["manifest_digest"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DigestsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: DigestsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDigestsGetResponseFromDiscriminatorValue,
        queryParametersMapper: DigestsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
