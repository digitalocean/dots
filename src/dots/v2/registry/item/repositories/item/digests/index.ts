/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createRepository_manifestFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeRepository_manifest, type ErrorEscaped, type Meta_properties, type Page_links, type Repository_manifest } from '../../../../../../models/index.js';
// @ts-ignore
import { type WithManifest_digestItemRequestBuilder, WithManifest_digestItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DigestsGetResponse}
 */
// @ts-ignore
export function createDigestsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDigestsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDigestsGetResponse(digestsGetResponse: Partial<DigestsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { digestsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "manifests": n => { digestsGetResponse.manifests = n.getCollectionOfObjectValues<Repository_manifest>(createRepository_manifestFromDiscriminatorValue); },
        "meta": n => { digestsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
export interface DigestsGetResponse extends Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The manifests property
     */
    manifests?: Repository_manifest[] | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
/**
 * Builds and executes requests for operations under /v2/registry/{registry_name}/repositories/{repository_name}/digests
 */
export interface DigestsRequestBuilder extends BaseRequestBuilder<DigestsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.registry.item.repositories.item.digests.item collection
     * @param manifest_digest The manifest digest of a container registry repository tag.
     * @returns {WithManifest_digestItemRequestBuilder}
     */
     byManifest_digest(manifest_digest: string) : WithManifest_digestItemRequestBuilder;
    /**
     * To list all manifests in your container registry repository, send a GETrequest to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.Note that if your repository name contains `/` characters, it must beURL-encoded in the request URL. For example, to list manifests for`registry.digitalocean.com/example/my/repo`, the path would be`/v2/registry/example/repositories/my%2Frepo/digests`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DigestsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DigestsRequestBuilderGetQueryParameters> | undefined) : Promise<DigestsGetResponse | undefined>;
    /**
     * To list all manifests in your container registry repository, send a GETrequest to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.Note that if your repository name contains `/` characters, it must beURL-encoded in the request URL. For example, to list manifests for`registry.digitalocean.com/example/my/repo`, the path would be`/v2/registry/example/repositories/my%2Frepo/digests`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DigestsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To list all manifests in your container registry repository, send a GETrequest to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.Note that if your repository name contains `/` characters, it must beURL-encoded in the request URL. For example, to list manifests for`registry.digitalocean.com/example/my/repo`, the path would be`/v2/registry/example/repositories/my%2Frepo/digests`.
 */
export interface DigestsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDigestsGetResponse(writer: SerializationWriter, digestsGetResponse: Partial<DigestsGetResponse> | undefined | null = {}) : void {
    if (digestsGetResponse) {
        writer.writeObjectValue<Page_links>("links", digestsGetResponse.links, serializePage_links);
        writer.writeCollectionOfObjectValues<Repository_manifest>("manifests", digestsGetResponse.manifests, serializeRepository_manifest);
        writer.writeObjectValue<Meta_properties>("meta", digestsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Uri template for the request builder.
 */
export const DigestsRequestBuilderUriTemplate = "{+baseurl}/v2/registry/{registry_name}/repositories/{repository_name}/digests{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DigestsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DigestsRequestBuilderNavigationMetadata: Record<Exclude<keyof DigestsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byManifest_digest: {
        requestsMetadata: WithManifest_digestItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["manifest_digest"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DigestsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DigestsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDigestsGetResponseFromDiscriminatorValue,
        queryParametersMapper: DigestsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
