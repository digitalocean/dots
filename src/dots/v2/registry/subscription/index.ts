/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSubscriptionFromDiscriminatorValue, serializeSubscription, type ErrorEscaped, type Subscription } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionGetResponse}
 */
// @ts-ignore
export function createSubscriptionGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPostRequestBody}
 */
// @ts-ignore
export function createSubscriptionPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPostResponse}
 */
// @ts-ignore
export function createSubscriptionPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionGetResponse(subscriptionGetResponse: Partial<SubscriptionGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "subscription": n => { subscriptionGetResponse.subscription = n.getObjectValue<Subscription>(createSubscriptionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPostRequestBody(subscriptionPostRequestBody: Partial<SubscriptionPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "tier_slug": n => { subscriptionPostRequestBody.tierSlug = n.getEnumValue<SubscriptionPostRequestBody_tier_slug>(SubscriptionPostRequestBody_tier_slugObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPostResponse(subscriptionPostResponse: Partial<SubscriptionPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "subscription": n => { subscriptionPostResponse.subscription = n.getObjectValue<Subscription>(createSubscriptionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionGetResponse(writer: SerializationWriter, subscriptionGetResponse: Partial<SubscriptionGetResponse> | undefined | null = {}) : void {
    if (subscriptionGetResponse) {
        writer.writeObjectValue<Subscription>("subscription", subscriptionGetResponse.subscription, serializeSubscription);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPostRequestBody(writer: SerializationWriter, subscriptionPostRequestBody: Partial<SubscriptionPostRequestBody> | undefined | null = {}) : void {
    if (subscriptionPostRequestBody) {
        writer.writeEnumValue<SubscriptionPostRequestBody_tier_slug>("tier_slug", subscriptionPostRequestBody.tierSlug);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPostResponse(writer: SerializationWriter, subscriptionPostResponse: Partial<SubscriptionPostResponse> | undefined | null = {}) : void {
    if (subscriptionPostResponse) {
        writer.writeObjectValue<Subscription>("subscription", subscriptionPostResponse.subscription, serializeSubscription);
    }
}
export interface SubscriptionGetResponse extends Parsable {
    /**
     * The subscription property
     */
    subscription?: Subscription | null;
}
export interface SubscriptionPostRequestBody extends Parsable {
    /**
     * The slug of the subscription tier to sign up for.
     */
    tierSlug?: SubscriptionPostRequestBody_tier_slug | null;
}
export type SubscriptionPostRequestBody_tier_slug = (typeof SubscriptionPostRequestBody_tier_slugObject)[keyof typeof SubscriptionPostRequestBody_tier_slugObject];
export interface SubscriptionPostResponse extends Parsable {
    /**
     * The subscription property
     */
    subscription?: Subscription | null;
}
/**
 * Builds and executes requests for operations under /v2/registry/subscription
 */
export interface SubscriptionRequestBuilder extends BaseRequestBuilder<SubscriptionRequestBuilder> {
    /**
     * A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registry/subscription`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionGetResponse | undefined>;
    /**
     * After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registry/subscription`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscriptionPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 412 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: SubscriptionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscriptionPostResponse | undefined>;
    /**
     * A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registry/subscription`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registry/subscription`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SubscriptionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionRequestBuilderUriTemplate = "{+baseurl}/v2/registry/subscription";
/**
 * The slug of the subscription tier to sign up for.
 */
export const SubscriptionPostRequestBody_tier_slugObject = {
    Starter: "starter",
    Basic: "basic",
    Professional: "professional",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubscriptionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: SubscriptionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            412: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSubscriptionPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
