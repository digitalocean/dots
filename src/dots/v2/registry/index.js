/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createRegistryFromDiscriminatorValue, serializeRegistry, serializeRegistry_create } from '../../models/index.js';
// @ts-ignore
import { DockerCredentialsRequestBuilderRequestsMetadata } from './dockerCredentials/index.js';
// @ts-ignore
import { WithRegistry_nameItemRequestBuilderNavigationMetadata } from './item/index.js';
// @ts-ignore
import { OptionsRequestBuilderRequestsMetadata } from './options/index.js';
// @ts-ignore
import { SubscriptionRequestBuilderRequestsMetadata } from './subscription/index.js';
// @ts-ignore
import { ValidateNameRequestBuilderRequestsMetadata } from './validateName/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegistryGetResponse}
 */
// @ts-ignore
export function createRegistryGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRegistryGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegistryPostResponse}
 */
// @ts-ignore
export function createRegistryPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRegistryPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegistryGetResponse(registryGetResponse = {}) {
    return {
        "registry": n => { registryGetResponse.registry = n.getObjectValue(createRegistryFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegistryPostResponse(registryPostResponse = {}) {
    return {
        "registry": n => { registryPostResponse.registry = n.getObjectValue(createRegistryFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegistryGetResponse(writer, registryGetResponse = {}) {
    if (registryGetResponse) {
        writer.writeObjectValue("registry", registryGetResponse.registry, serializeRegistry);
        writer.writeAdditionalData(registryGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegistryPostResponse(writer, registryPostResponse = {}) {
    if (registryPostResponse) {
        writer.writeObjectValue("registry", registryPostResponse.registry, serializeRegistry);
        writer.writeAdditionalData(registryPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const RegistryRequestBuilderUriTemplate = "{+baseurl}/v2/registry";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RegistryRequestBuilderNavigationMetadata = {
    byRegistry_name: {
        navigationMetadata: WithRegistry_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["registry_name"],
    },
    dockerCredentials: {
        requestsMetadata: DockerCredentialsRequestBuilderRequestsMetadata,
    },
    optionsPath: {
        requestsMetadata: OptionsRequestBuilderRequestsMetadata,
    },
    subscription: {
        requestsMetadata: SubscriptionRequestBuilderRequestsMetadata,
    },
    validateName: {
        requestsMetadata: ValidateNameRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RegistryRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: RegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: RegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRegistryGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: RegistryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRegistryPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRegistry_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
