/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createImageFromDiscriminatorValue, serializeImage, serializeImage_update } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata } from './actions/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithImage_GetResponse}
 */
// @ts-ignore
export function createWithImage_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithImage_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithImage_PutResponse}
 */
// @ts-ignore
export function createWithImage_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithImage_PutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithImage_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithImage_GetResponse(withImage_GetResponse = {}) {
    return {
        "image": n => { withImage_GetResponse.image = n.getObjectValue(createImageFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param WithImage_PutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithImage_PutResponse(withImage_PutResponse = {}) {
    return {
        "image": n => { withImage_PutResponse.image = n.getObjectValue(createImageFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithImage_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithImage_GetResponse(writer, withImage_GetResponse = {}, isSerializingDerivedType = false) {
    if (!withImage_GetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("image", withImage_GetResponse.image, serializeImage);
    writer.writeAdditionalData(withImage_GetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithImage_PutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithImage_PutResponse(writer, withImage_PutResponse = {}, isSerializingDerivedType = false) {
    if (!withImage_PutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("image", withImage_PutResponse.image, serializeImage);
    writer.writeAdditionalData(withImage_PutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithImage_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/images/{image_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithImage_ItemRequestBuilderNavigationMetadata = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithImage_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithImage_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithImage_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithImage_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithImage_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithImage_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImage_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
