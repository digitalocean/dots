/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createImage_action_baseFromDiscriminatorValue, createImage_action_transferFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoImage_action_base, deserializeIntoImage_action_transfer, serializeAction, serializeImage_action_base, serializeImage_action_transfer, serializeMeta_properties, serializePage_links, type Action, type ErrorEscaped, type Image_action_base, type Image_action_transfer, type Meta_properties, type Page_links } from '../../../../models/index.js';
// @ts-ignore
import { type WithAction_ItemRequestBuilder, WithAction_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActionsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The actions property
     */
    actions?: Action[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type ActionsPostRequestBody = Image_action_base | Image_action_transfer;
/**
 * Builds and executes requests for operations under /v2/images/{image_id}/actions
 */
export interface ActionsRequestBuilder extends BaseRequestBuilder<ActionsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.images.item.actions.item collection
     * @param action_id A unique numeric ID that can be used to identify and reference an action.
     * @returns {WithAction_ItemRequestBuilder}
     */
     byAction_id(action_id: number) : WithAction_ItemRequestBuilder;
    /**
     * To retrieve all actions that have been executed on an image, send a GET request to `/v2/images/$IMAGE_ID/actions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ActionsGetResponse | undefined>;
    /**
     * The following actions are available on an Image.## Convert an Image to a SnapshotTo convert an image, for example, a backup to a snapshot, send a POST requestto `/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `convert`.## Transfer an ImageTo transfer an image to another region, send a POST request to`/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `transfer` and set`region` attribute to the slug identifier of the region you wish to transferto.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Action>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Image_action_base | Image_action_transfer, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Action | undefined>;
    /**
     * To retrieve all actions that have been executed on an image, send a GET request to `/v2/images/$IMAGE_ID/actions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The following actions are available on an Image.## Convert an Image to a SnapshotTo convert an image, for example, a backup to a snapshot, send a POST requestto `/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `convert`.## Transfer an ImageTo transfer an image to another region, send a POST request to`/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `transfer` and set`region` attribute to the slug identifier of the region you wish to transferto.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Image_action_base | Image_action_transfer, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsGetResponse}
 */
// @ts-ignore
export function createActionsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Image_action_base | Image_action_transfer}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsGetResponse(actionsGetResponse: Partial<ActionsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { actionsGetResponse.actions = n.getCollectionOfObjectValues<Action>(createActionFromDiscriminatorValue); },
        "links": n => { actionsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { actionsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody: Partial<Image_action_base | Image_action_transfer> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoImage_action_base(actionsPostRequestBody as Image_action_base),
        ...deserializeIntoImage_action_transfer(actionsPostRequestBody as Image_action_transfer),
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsGetResponse(writer: SerializationWriter, actionsGetResponse: Partial<ActionsGetResponse> | undefined | null = {}) : void {
    if (actionsGetResponse) {
        writer.writeCollectionOfObjectValues<Action>("actions", actionsGetResponse.actions, serializeAction);
        writer.writeObjectValue<Page_links>("links", actionsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", actionsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(actionsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer: SerializationWriter, actionsPostRequestBody: Partial<Image_action_base | Image_action_transfer> | undefined | null = {}) : void {
    serializeImage_action_base(writer, actionsPostRequestBody as Image_action_base);
    serializeImage_action_transfer(writer, actionsPostRequestBody as Image_action_transfer);
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/images/{image_id}/actions";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ActionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ActionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAction_id: {
        requestsMetadata: WithAction_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["action_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
