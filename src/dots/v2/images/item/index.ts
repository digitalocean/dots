/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createImageFromDiscriminatorValue, serializeImage, serializeImage_update, type ErrorEscaped, type Image, type Image_update } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithImage_GetResponse}
 */
// @ts-ignore
export function createWithImage_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithImage_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithImage_PutResponse}
 */
// @ts-ignore
export function createWithImage_PutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithImage_PutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithImage_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithImage_GetResponse(withImage_GetResponse: Partial<WithImage_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "image": n => { withImage_GetResponse.image = n.getObjectValue<Image>(createImageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param WithImage_PutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithImage_PutResponse(withImage_PutResponse: Partial<WithImage_PutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "image": n => { withImage_PutResponse.image = n.getObjectValue<Image>(createImageFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithImage_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithImage_GetResponse(writer: SerializationWriter, withImage_GetResponse: Partial<WithImage_GetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withImage_GetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Image>("image", withImage_GetResponse.image, serializeImage);
    writer.writeAdditionalData(withImage_GetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithImage_PutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithImage_PutResponse(writer: SerializationWriter, withImage_PutResponse: Partial<WithImage_PutResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withImage_PutResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Image>("image", withImage_PutResponse.image, serializeImage);
    writer.writeAdditionalData(withImage_PutResponse.additionalData);
}
export interface WithImage_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The image property
     */
    image?: Image | null;
}
/**
 * Builds and executes requests for operations under /v2/images/{image_id}
 */
export interface WithImage_ItemRequestBuilder extends BaseRequestBuilder<WithImage_ItemRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * To delete a snapshot or custom image, send a `DELETE` request to `/v2/images/$IMAGE_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To retrieve information about an image, send a `GET` request to`/v2/images/$IDENTIFIER`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithImage_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithImage_GetResponse | undefined>;
    /**
     * To update an image, send a `PUT` request to `/v2/images/$IMAGE_ID`.Set the `name` attribute to the new value you would like to use.For custom images, the `description` and `distribution` attributes may also be updated.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithImage_PutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Image_update, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithImage_PutResponse | undefined>;
    /**
     * To delete a snapshot or custom image, send a `DELETE` request to `/v2/images/$IMAGE_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve information about an image, send a `GET` request to`/v2/images/$IDENTIFIER`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update an image, send a `PUT` request to `/v2/images/$IMAGE_ID`.Set the `name` attribute to the new value you would like to use.For custom images, the `description` and `distribution` attributes may also be updated.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Image_update, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithImage_PutResponse extends AdditionalDataHolder, Parsable {
    /**
     * The image property
     */
    image?: Image | null;
}
/**
 * Uri template for the request builder.
 */
export const WithImage_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/images/{image_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithImage_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithImage_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithImage_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithImage_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithImage_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithImage_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithImage_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithImage_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImage_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
