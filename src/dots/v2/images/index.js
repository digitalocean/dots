/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createImageFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeImage, serializeImage_new_custom, serializeMeta_properties, serializePage_links } from '../../models/index.js';
// @ts-ignore
import { WithImage_ItemRequestBuilderNavigationMetadata, WithImage_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImagesGetResponse}
 */
// @ts-ignore
export function createImagesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoImagesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImagesPostResponse}
 */
// @ts-ignore
export function createImagesPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoImagesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImagesGetResponse(imagesGetResponse = {}) {
    return {
        "images": n => { imagesGetResponse.images = n.getCollectionOfObjectValues(createImageFromDiscriminatorValue); },
        "links": n => { imagesGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { imagesGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImagesPostResponse(imagesPostResponse = {}) {
    return {
        "image": n => { imagesPostResponse.image = n.getObjectValue(createImageFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImagesGetResponse(writer, imagesGetResponse = {}) {
    if (imagesGetResponse) {
        writer.writeCollectionOfObjectValues("images", imagesGetResponse.images, serializeImage);
        writer.writeObjectValue("links", imagesGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", imagesGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(imagesGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImagesPostResponse(writer, imagesPostResponse = {}) {
    if (imagesPostResponse) {
        writer.writeObjectValue("image", imagesPostResponse.image, serializeImage);
        writer.writeAdditionalData(imagesPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const ImagesRequestBuilderUriTemplate = "{+baseurl}/v2/images{?page*,per_page*,private*,tag_name*,type*}";
export const GetTypeQueryParameterTypeObject = {
    Application: "application",
    Distribution: "distribution",
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ImagesRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
    "tagName": "tag_name",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ImagesRequestBuilderNavigationMetadata = {
    byImage_id: {
        requestsMetadata: WithImage_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithImage_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["image_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ImagesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: ImagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createImagesGetResponseFromDiscriminatorValue,
        queryParametersMapper: ImagesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ImagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createImagesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImage_new_custom,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
