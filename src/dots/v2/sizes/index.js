/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createSizeFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeSize } from '../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SizesGetResponse}
 */
// @ts-ignore
export function createSizesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoSizesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSizesGetResponse(sizesGetResponse = {}) {
    return {
        "links": n => { sizesGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { sizesGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "sizes": n => { sizesGetResponse.sizes = n.getCollectionOfObjectValues(createSizeFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSizesGetResponse(writer, sizesGetResponse = {}) {
    if (sizesGetResponse) {
        writer.writeObjectValue("links", sizesGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", sizesGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("sizes", sizesGetResponse.sizes, serializeSize);
    }
}
/**
 * Uri template for the request builder.
 */
export const SizesRequestBuilderUriTemplate = "{+baseurl}/v2/sizes{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SizesRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SizesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: SizesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createSizesGetResponseFromDiscriminatorValue,
        queryParametersMapper: SizesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
