/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDomain_recordFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDomain_record, type Domain_record, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDomain_record_GetResponse}
 */
// @ts-ignore
export function createWithDomain_record_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDomain_record_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDomain_record_PatchResponse}
 */
// @ts-ignore
export function createWithDomain_record_PatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDomain_record_PatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDomain_record_PutResponse}
 */
// @ts-ignore
export function createWithDomain_record_PutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDomain_record_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDomain_record_GetResponse(withDomain_record_GetResponse: Partial<WithDomain_record_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain_record": n => { withDomain_record_GetResponse.domainRecord = n.getObjectValue<Domain_record>(createDomain_recordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDomain_record_PatchResponse(withDomain_record_PatchResponse: Partial<WithDomain_record_PatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain_record": n => { withDomain_record_PatchResponse.domainRecord = n.getObjectValue<Domain_record>(createDomain_recordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDomain_record_PutResponse(withDomain_record_PutResponse: Partial<WithDomain_record_PutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain_record": n => { withDomain_record_PutResponse.domainRecord = n.getObjectValue<Domain_record>(createDomain_recordFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDomain_record_GetResponse(writer: SerializationWriter, withDomain_record_GetResponse: Partial<WithDomain_record_GetResponse> | undefined | null = {}) : void {
    if (withDomain_record_GetResponse) {
        writer.writeObjectValue<Domain_record>("domain_record", withDomain_record_GetResponse.domainRecord, serializeDomain_record);
        writer.writeAdditionalData(withDomain_record_GetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDomain_record_PatchResponse(writer: SerializationWriter, withDomain_record_PatchResponse: Partial<WithDomain_record_PatchResponse> | undefined | null = {}) : void {
    if (withDomain_record_PatchResponse) {
        writer.writeObjectValue<Domain_record>("domain_record", withDomain_record_PatchResponse.domainRecord, serializeDomain_record);
        writer.writeAdditionalData(withDomain_record_PatchResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDomain_record_PutResponse(writer: SerializationWriter, withDomain_record_PutResponse: Partial<WithDomain_record_PutResponse> | undefined | null = {}) : void {
    if (withDomain_record_PutResponse) {
        writer.writeObjectValue<Domain_record>("domain_record", withDomain_record_PutResponse.domainRecord, serializeDomain_record);
        writer.writeAdditionalData(withDomain_record_PutResponse.additionalData);
    }
}
export interface WithDomain_record_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain_record property
     */
    domainRecord?: Domain_record | null;
}
/**
 * Builds and executes requests for operations under /v2/domains/{domain_name}/records/{domain_record_id}
 */
export interface WithDomain_record_ItemRequestBuilder extends BaseRequestBuilder<WithDomain_record_ItemRequestBuilder> {
    /**
     * To delete a record for a domain, send a DELETE request to`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`.The record will be deleted and the response status will be a 204. Thisindicates a successful request with no body returned.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To retrieve a specific domain record, send a GET request to `/v2/domains/$DOMAIN_NAME/records/$RECORD_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDomain_record_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDomain_record_GetResponse | undefined>;
    /**
     * To update an existing record, send a PATCH request to`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid forthe record type can be set to a new value for the record.See the [attribute table](#tag/Domain-Records) for details regarding recordtypes and their respective attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDomain_record_PatchResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Domain_record, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDomain_record_PatchResponse | undefined>;
    /**
     * To update an existing record, send a PUT request to`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid forthe record type can be set to a new value for the record.See the [attribute table](#tag/Domain-Records) for details regarding recordtypes and their respective attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDomain_record_PutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Domain_record, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDomain_record_PutResponse | undefined>;
    /**
     * To delete a record for a domain, send a DELETE request to`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`.The record will be deleted and the response status will be a 204. Thisindicates a successful request with no body returned.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve a specific domain record, send a GET request to `/v2/domains/$DOMAIN_NAME/records/$RECORD_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update an existing record, send a PATCH request to`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid forthe record type can be set to a new value for the record.See the [attribute table](#tag/Domain-Records) for details regarding recordtypes and their respective attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Domain_record, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update an existing record, send a PUT request to`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid forthe record type can be set to a new value for the record.See the [attribute table](#tag/Domain-Records) for details regarding recordtypes and their respective attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Domain_record, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithDomain_record_PatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain_record property
     */
    domainRecord?: Domain_record | null;
}
export interface WithDomain_record_PutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain_record property
     */
    domainRecord?: Domain_record | null;
}
/**
 * Uri template for the request builder.
 */
export const WithDomain_record_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/domains/{domain_name}/records/{domain_record_id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDomain_record_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithDomain_record_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDomain_record_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDomain_record_GetResponseFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: WithDomain_record_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDomain_record_PatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDomain_record,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WithDomain_record_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDomain_record_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDomain_record,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
