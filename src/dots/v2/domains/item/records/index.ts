/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDomain_record_aaaaFromDiscriminatorValue, createDomain_record_aFromDiscriminatorValue, createDomain_record_caaFromDiscriminatorValue, createDomain_record_cnameFromDiscriminatorValue, createDomain_record_mxFromDiscriminatorValue, createDomain_record_nsFromDiscriminatorValue, createDomain_record_soaFromDiscriminatorValue, createDomain_record_srvFromDiscriminatorValue, createDomain_record_txtFromDiscriminatorValue, createDomain_recordFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoDomain_record_a, deserializeIntoDomain_record_aaaa, deserializeIntoDomain_record_caa, deserializeIntoDomain_record_cname, deserializeIntoDomain_record_mx, deserializeIntoDomain_record_ns, deserializeIntoDomain_record_soa, deserializeIntoDomain_record_srv, deserializeIntoDomain_record_txt, serializeDomain_record, serializeDomain_record_a, serializeDomain_record_aaaa, serializeDomain_record_caa, serializeDomain_record_cname, serializeDomain_record_mx, serializeDomain_record_ns, serializeDomain_record_soa, serializeDomain_record_srv, serializeDomain_record_txt, serializeMeta_properties, serializePage_links, type Domain_record, type Domain_record_a, type Domain_record_aaaa, type Domain_record_caa, type Domain_record_cname, type Domain_record_mx, type Domain_record_ns, type Domain_record_soa, type Domain_record_srv, type Domain_record_txt, type ErrorEscaped, type Meta_properties, type Page_links } from '../../../../models/index.js';
// @ts-ignore
import { type WithDomain_record_ItemRequestBuilder, WithDomain_record_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecordsGetResponse}
 */
// @ts-ignore
export function createRecordsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecordsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt}
 */
// @ts-ignore
export function createRecordsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecordsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecordsPostResponse}
 */
// @ts-ignore
export function createRecordsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecordsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecordsGetResponse(recordsGetResponse: Partial<RecordsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain_records": n => { recordsGetResponse.domainRecords = n.getCollectionOfObjectValues<Domain_record>(createDomain_recordFromDiscriminatorValue); },
        "links": n => { recordsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { recordsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecordsPostRequestBody(recordsPostRequestBody: Partial<Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDomain_record_aaaa(recordsPostRequestBody as Domain_record_aaaa),
        ...deserializeIntoDomain_record_a(recordsPostRequestBody as Domain_record_a),
        ...deserializeIntoDomain_record_caa(recordsPostRequestBody as Domain_record_caa),
        ...deserializeIntoDomain_record_cname(recordsPostRequestBody as Domain_record_cname),
        ...deserializeIntoDomain_record_mx(recordsPostRequestBody as Domain_record_mx),
        ...deserializeIntoDomain_record_ns(recordsPostRequestBody as Domain_record_ns),
        ...deserializeIntoDomain_record_soa(recordsPostRequestBody as Domain_record_soa),
        ...deserializeIntoDomain_record_srv(recordsPostRequestBody as Domain_record_srv),
        ...deserializeIntoDomain_record_txt(recordsPostRequestBody as Domain_record_txt),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecordsPostResponse(recordsPostResponse: Partial<RecordsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain_record": n => { recordsPostResponse.domainRecord = n.getObjectValue<Domain_record>(createDomain_recordFromDiscriminatorValue); },
    }
}
export type GetTypeQueryParameterType = (typeof GetTypeQueryParameterTypeObject)[keyof typeof GetTypeQueryParameterTypeObject];
export interface RecordsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain_records property
     */
    domainRecords?: Domain_record[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type RecordsPostRequestBody = Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt;
export interface RecordsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain_record property
     */
    domainRecord?: Domain_record | null;
}
/**
 * Builds and executes requests for operations under /v2/domains/{domain_name}/records
 */
export interface RecordsRequestBuilder extends BaseRequestBuilder<RecordsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.domains.item.records.item collection
     * @param domain_record_id The unique identifier of the domain record.
     * @returns {WithDomain_record_ItemRequestBuilder}
     */
     byDomain_record_id(domain_record_id: number) : WithDomain_record_ItemRequestBuilder;
    /**
     * To get a listing of all records configured for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records`.The list of records returned can be filtered by using the `name` and `type` query parameters. For example, to only include A records for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records?type=A`. `name` must be a fully qualified record name. For example, to only include records matching `sub.example.com`, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`. Both name and type may be used together.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RecordsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RecordsRequestBuilderGetQueryParameters> | undefined) : Promise<RecordsGetResponse | undefined>;
    /**
     * To create a new record to a domain, send a POST request to`/v2/domains/$DOMAIN_NAME/records`.The request must include all of the required fields for the domain record typebeing added.See the [attribute table](#tag/Domain-Records) for details regarding recordtypes and their respective required attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RecordsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RecordsPostResponse | undefined>;
    /**
     * To get a listing of all records configured for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records`.The list of records returned can be filtered by using the `name` and `type` query parameters. For example, to only include A records for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records?type=A`. `name` must be a fully qualified record name. For example, to only include records matching `sub.example.com`, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`. Both name and type may be used together.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RecordsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new record to a domain, send a POST request to`/v2/domains/$DOMAIN_NAME/records`.The request must include all of the required fields for the domain record typebeing added.See the [attribute table](#tag/Domain-Records) for details regarding recordtypes and their respective required attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To get a listing of all records configured for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records`.The list of records returned can be filtered by using the `name` and `type` query parameters. For example, to only include A records for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records?type=A`. `name` must be a fully qualified record name. For example, to only include records matching `sub.example.com`, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`. Both name and type may be used together.
 */
export interface RecordsRequestBuilderGetQueryParameters {
    /**
     * A fully qualified record name. For example, to only include records matching sub.example.com, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`.
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * The type of the DNS record. For example: A, CNAME, TXT, ...
     */
    type?: GetTypeQueryParameterType;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecordsGetResponse(writer: SerializationWriter, recordsGetResponse: Partial<RecordsGetResponse> | undefined | null = {}) : void {
    if (recordsGetResponse) {
        writer.writeCollectionOfObjectValues<Domain_record>("domain_records", recordsGetResponse.domainRecords, serializeDomain_record);
        writer.writeObjectValue<Page_links>("links", recordsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", recordsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(recordsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecordsPostRequestBody(writer: SerializationWriter, recordsPostRequestBody: Partial<Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt> | undefined | null = {}) : void {
    serializeDomain_record_aaaa(writer, recordsPostRequestBody as Domain_record_aaaa);
    serializeDomain_record_a(writer, recordsPostRequestBody as Domain_record_a);
    serializeDomain_record_caa(writer, recordsPostRequestBody as Domain_record_caa);
    serializeDomain_record_cname(writer, recordsPostRequestBody as Domain_record_cname);
    serializeDomain_record_mx(writer, recordsPostRequestBody as Domain_record_mx);
    serializeDomain_record_ns(writer, recordsPostRequestBody as Domain_record_ns);
    serializeDomain_record_soa(writer, recordsPostRequestBody as Domain_record_soa);
    serializeDomain_record_srv(writer, recordsPostRequestBody as Domain_record_srv);
    serializeDomain_record_txt(writer, recordsPostRequestBody as Domain_record_txt);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecordsPostResponse(writer: SerializationWriter, recordsPostResponse: Partial<RecordsPostResponse> | undefined | null = {}) : void {
    if (recordsPostResponse) {
        writer.writeObjectValue<Domain_record>("domain_record", recordsPostResponse.domainRecord, serializeDomain_record);
        writer.writeAdditionalData(recordsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const RecordsRequestBuilderUriTemplate = "{+baseurl}/v2/domains/{domain_name}/records{?name*,page*,per_page*,type*}";
export const GetTypeQueryParameterTypeObject = {
    A: "A",
    AAAA: "AAAA",
    CAA: "CAA",
    CNAME: "CNAME",
    MX: "MX",
    NS: "NS",
    SOA: "SOA",
    SRV: "SRV",
    TXT: "TXT",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RecordsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RecordsRequestBuilderNavigationMetadata: Record<Exclude<keyof RecordsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDomain_record_id: {
        requestsMetadata: WithDomain_record_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["domain_record_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RecordsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RecordsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRecordsGetResponseFromDiscriminatorValue,
        queryParametersMapper: RecordsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RecordsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRecordsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRecordsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
