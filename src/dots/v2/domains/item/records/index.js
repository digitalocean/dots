/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDomain_recordFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoDomain_record_a, deserializeIntoDomain_record_aaaa, deserializeIntoDomain_record_caa, deserializeIntoDomain_record_cname, deserializeIntoDomain_record_mx, deserializeIntoDomain_record_ns, deserializeIntoDomain_record_soa, deserializeIntoDomain_record_srv, deserializeIntoDomain_record_txt, serializeDomain_record, serializeDomain_record_a, serializeDomain_record_aaaa, serializeDomain_record_caa, serializeDomain_record_cname, serializeDomain_record_mx, serializeDomain_record_ns, serializeDomain_record_soa, serializeDomain_record_srv, serializeDomain_record_txt, serializeMeta_properties, serializePage_links } from '../../../../models/index.js';
// @ts-ignore
import { WithDomain_record_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecordsGetResponse}
 */
// @ts-ignore
export function createRecordsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRecordsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Domain_record_aaaa | Domain_record_a | Domain_record_caa | Domain_record_cname | Domain_record_mx | Domain_record_ns | Domain_record_soa | Domain_record_srv | Domain_record_txt}
 */
// @ts-ignore
export function createRecordsPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoRecordsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecordsPostResponse}
 */
// @ts-ignore
export function createRecordsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRecordsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param RecordsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecordsGetResponse(recordsGetResponse = {}) {
    return {
        "domain_records": n => { recordsGetResponse.domainRecords = n.getCollectionOfObjectValues(createDomain_recordFromDiscriminatorValue); },
        "links": n => { recordsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { recordsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param RecordsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecordsPostRequestBody(recordsPostRequestBody = {}) {
    return {
        ...deserializeIntoDomain_record_aaaa(recordsPostRequestBody),
        ...deserializeIntoDomain_record_a(recordsPostRequestBody),
        ...deserializeIntoDomain_record_caa(recordsPostRequestBody),
        ...deserializeIntoDomain_record_cname(recordsPostRequestBody),
        ...deserializeIntoDomain_record_mx(recordsPostRequestBody),
        ...deserializeIntoDomain_record_ns(recordsPostRequestBody),
        ...deserializeIntoDomain_record_soa(recordsPostRequestBody),
        ...deserializeIntoDomain_record_srv(recordsPostRequestBody),
        ...deserializeIntoDomain_record_txt(recordsPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @param RecordsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecordsPostResponse(recordsPostResponse = {}) {
    return {
        "domain_record": n => { recordsPostResponse.domainRecord = n.getObjectValue(createDomain_recordFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RecordsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecordsGetResponse(writer, recordsGetResponse = {}, isSerializingDerivedType = false) {
    if (!recordsGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeCollectionOfObjectValues("domain_records", recordsGetResponse.domainRecords, serializeDomain_record);
    writer.writeObjectValue("links", recordsGetResponse.links, serializePage_links);
    writer.writeObjectValue("meta", recordsGetResponse.meta, serializeMeta_properties);
    writer.writeAdditionalData(recordsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RecordsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecordsPostRequestBody(writer, recordsPostRequestBody = {}, isSerializingDerivedType = false) {
    serializeDomain_record_aaaa(writer, recordsPostRequestBody);
    serializeDomain_record_a(writer, recordsPostRequestBody);
    serializeDomain_record_caa(writer, recordsPostRequestBody);
    serializeDomain_record_cname(writer, recordsPostRequestBody);
    serializeDomain_record_mx(writer, recordsPostRequestBody);
    serializeDomain_record_ns(writer, recordsPostRequestBody);
    serializeDomain_record_soa(writer, recordsPostRequestBody);
    serializeDomain_record_srv(writer, recordsPostRequestBody);
    serializeDomain_record_txt(writer, recordsPostRequestBody);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RecordsPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecordsPostResponse(writer, recordsPostResponse = {}, isSerializingDerivedType = false) {
    if (!recordsPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("domain_record", recordsPostResponse.domainRecord, serializeDomain_record);
    writer.writeAdditionalData(recordsPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const RecordsRequestBuilderUriTemplate = "{+baseurl}/v2/domains/{domain_name}/records{?name*,page*,per_page*,type*}";
export const GetTypeQueryParameterTypeObject = {
    A: "A",
    AAAA: "AAAA",
    CAA: "CAA",
    CNAME: "CNAME",
    MX: "MX",
    NS: "NS",
    SOA: "SOA",
    SRV: "SRV",
    TXT: "TXT",
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RecordsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RecordsRequestBuilderNavigationMetadata = {
    byDomain_record_id: {
        requestsMetadata: WithDomain_record_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["domain_record_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RecordsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: RecordsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRecordsGetResponseFromDiscriminatorValue,
        queryParametersMapper: RecordsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RecordsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRecordsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRecordsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
