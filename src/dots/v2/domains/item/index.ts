/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDomainFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDomain, type Domain, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { RecordsRequestBuilderNavigationMetadata, RecordsRequestBuilderRequestsMetadata, type RecordsRequestBuilder } from './records/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithDomain_nameGetResponse}
 */
// @ts-ignore
export function createWithDomain_nameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithDomain_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithDomain_nameGetResponse(withDomain_nameGetResponse: Partial<WithDomain_nameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain": n => { withDomain_nameGetResponse.domain = n.getObjectValue<Domain>(createDomainFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithDomain_nameGetResponse(writer: SerializationWriter, withDomain_nameGetResponse: Partial<WithDomain_nameGetResponse> | undefined | null = {}) : void {
    if (withDomain_nameGetResponse) {
        writer.writeObjectValue<Domain>("domain", withDomain_nameGetResponse.domain, serializeDomain);
        writer.writeAdditionalData(withDomain_nameGetResponse.additionalData);
    }
}
export interface WithDomain_nameGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain property
     */
    domain?: Domain | null;
}
/**
 * Builds and executes requests for operations under /v2/domains/{domain_name}
 */
export interface WithDomain_nameItemRequestBuilder extends BaseRequestBuilder<WithDomain_nameItemRequestBuilder> {
    /**
     * The records property
     */
    get records(): RecordsRequestBuilder;
    /**
     * To delete a domain, send a DELETE request to `/v2/domains/$DOMAIN_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get details about a specific domain, send a GET request to `/v2/domains/$DOMAIN_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithDomain_nameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithDomain_nameGetResponse | undefined>;
    /**
     * To delete a domain, send a DELETE request to `/v2/domains/$DOMAIN_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get details about a specific domain, send a GET request to `/v2/domains/$DOMAIN_NAME`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithDomain_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/domains/{domain_name}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithDomain_nameItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithDomain_nameItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    records: {
        requestsMetadata: RecordsRequestBuilderRequestsMetadata,
        navigationMetadata: RecordsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDomain_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithDomain_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithDomain_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithDomain_nameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
