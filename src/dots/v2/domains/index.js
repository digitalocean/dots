/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDomainFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeDomain, serializeMeta_properties, serializePage_links } from '../../models/index.js';
// @ts-ignore
import { WithDomain_nameItemRequestBuilderNavigationMetadata, WithDomain_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DomainsGetResponse}
 */
// @ts-ignore
export function createDomainsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDomainsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DomainsPostResponse}
 */
// @ts-ignore
export function createDomainsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoDomainsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDomainsGetResponse(domainsGetResponse = {}) {
    return {
        "domains": n => { domainsGetResponse.domains = n.getCollectionOfObjectValues(createDomainFromDiscriminatorValue); },
        "links": n => { domainsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { domainsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDomainsPostResponse(domainsPostResponse = {}) {
    return {
        "domain": n => { domainsPostResponse.domain = n.getObjectValue(createDomainFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDomainsGetResponse(writer, domainsGetResponse = {}) {
    if (domainsGetResponse) {
        writer.writeCollectionOfObjectValues("domains", domainsGetResponse.domains, serializeDomain);
        writer.writeObjectValue("links", domainsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", domainsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDomainsPostResponse(writer, domainsPostResponse = {}) {
    if (domainsPostResponse) {
        writer.writeObjectValue("domain", domainsPostResponse.domain, serializeDomain);
    }
}
/**
 * Uri template for the request builder.
 */
export const DomainsRequestBuilderUriTemplate = "{+baseurl}/v2/domains{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DomainsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DomainsRequestBuilderNavigationMetadata = {
    byDomain_name: {
        requestsMetadata: WithDomain_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithDomain_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["domain_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DomainsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: DomainsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDomainsGetResponseFromDiscriminatorValue,
        queryParametersMapper: DomainsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DomainsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createDomainsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDomain,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
