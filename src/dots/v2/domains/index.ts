/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDomainFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeDomain, serializeMeta_properties, serializePage_links, type Domain, type ErrorEscaped, type Meta_properties, type Page_links } from '../../models/index.js';
// @ts-ignore
import { type WithDomain_nameItemRequestBuilder, WithDomain_nameItemRequestBuilderNavigationMetadata, WithDomain_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DomainsGetResponse}
 */
// @ts-ignore
export function createDomainsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDomainsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DomainsPostResponse}
 */
// @ts-ignore
export function createDomainsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDomainsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDomainsGetResponse(domainsGetResponse: Partial<DomainsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domains": n => { domainsGetResponse.domains = n.getCollectionOfObjectValues<Domain>(createDomainFromDiscriminatorValue); },
        "links": n => { domainsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { domainsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDomainsPostResponse(domainsPostResponse: Partial<DomainsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "domain": n => { domainsPostResponse.domain = n.getObjectValue<Domain>(createDomainFromDiscriminatorValue); },
    }
}
export interface DomainsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Array of volumes.
     */
    domains?: Domain[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface DomainsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The domain property
     */
    domain?: Domain | null;
}
/**
 * Builds and executes requests for operations under /v2/domains
 */
export interface DomainsRequestBuilder extends BaseRequestBuilder<DomainsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.domains.item collection
     * @param domain_name The name of the domain itself.
     * @returns {WithDomain_nameItemRequestBuilder}
     */
     byDomain_name(domain_name: string) : WithDomain_nameItemRequestBuilder;
    /**
     * To retrieve a list of all of the domains in your account, send a GET request to `/v2/domains`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DomainsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DomainsRequestBuilderGetQueryParameters> | undefined) : Promise<DomainsGetResponse | undefined>;
    /**
     * To create a new domain, send a POST request to `/v2/domains`. Set the "name"attribute to the domain name you are adding. Optionally, you may set the"ip_address" attribute, and an A record will be automatically created pointingto the apex domain.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DomainsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Domain, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DomainsPostResponse | undefined>;
    /**
     * To retrieve a list of all of the domains in your account, send a GET request to `/v2/domains`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DomainsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new domain, send a POST request to `/v2/domains`. Set the "name"attribute to the domain name you are adding. Optionally, you may set the"ip_address" attribute, and an A record will be automatically created pointingto the apex domain.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Domain, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To retrieve a list of all of the domains in your account, send a GET request to `/v2/domains`.
 */
export interface DomainsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDomainsGetResponse(writer: SerializationWriter, domainsGetResponse: Partial<DomainsGetResponse> | undefined | null = {}) : void {
    if (domainsGetResponse) {
        writer.writeCollectionOfObjectValues<Domain>("domains", domainsGetResponse.domains, serializeDomain);
        writer.writeObjectValue<Page_links>("links", domainsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", domainsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(domainsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDomainsPostResponse(writer: SerializationWriter, domainsPostResponse: Partial<DomainsPostResponse> | undefined | null = {}) : void {
    if (domainsPostResponse) {
        writer.writeObjectValue<Domain>("domain", domainsPostResponse.domain, serializeDomain);
        writer.writeAdditionalData(domainsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const DomainsRequestBuilderUriTemplate = "{+baseurl}/v2/domains{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DomainsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DomainsRequestBuilderNavigationMetadata: Record<Exclude<keyof DomainsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDomain_name: {
        requestsMetadata: WithDomain_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithDomain_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["domain_name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DomainsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DomainsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDomainsGetResponseFromDiscriminatorValue,
        queryParametersMapper: DomainsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DomainsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDomainsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDomain,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
