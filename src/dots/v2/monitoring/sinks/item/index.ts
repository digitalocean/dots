/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSinks_responseFromDiscriminatorValue, serializeSinks_response, type ErrorEscaped, type Sinks_response } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithSink_uuGetResponse}
 */
// @ts-ignore
export function createWithSink_uuGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithSink_uuGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithSink_uuGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithSink_uuGetResponse(withSink_uuGetResponse: Partial<WithSink_uuGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "sink": n => { withSink_uuGetResponse.sink = n.getObjectValue<Sinks_response>(createSinks_responseFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithSink_uuGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithSink_uuGetResponse(writer: SerializationWriter, withSink_uuGetResponse: Partial<WithSink_uuGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withSink_uuGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Sinks_response>("sink", withSink_uuGetResponse.sink, serializeSinks_response);
    writer.writeAdditionalData(withSink_uuGetResponse.additionalData);
}
export interface WithSink_uuGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The sink property
     */
    sink?: Sinks_response | null;
}
/**
 * Builds and executes requests for operations under /v2/monitoring/sinks/{sink_uuid}
 */
export interface WithSink_uuItemRequestBuilder extends BaseRequestBuilder<WithSink_uuItemRequestBuilder> {
    /**
     * To delete a sink, send a DELETE request to `/v2/monitoring/sinks/${sink_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get the details of a sink (resources and destination), send a GET request to `/v2/monitoring/sinks/${sink_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithSink_uuGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithSink_uuGetResponse | undefined>;
    /**
     * To delete a sink, send a DELETE request to `/v2/monitoring/sinks/${sink_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get the details of a sink (resources and destination), send a GET request to `/v2/monitoring/sinks/${sink_uuid}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithSink_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/sinks/{sink_uuid}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithSink_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithSink_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithSink_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithSink_uuGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
