/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSink_resourceFromDiscriminatorValue, createSinks_responseFromDiscriminatorValue, serializeSink_resource, serializeSinks_response } from '../../../models/index.js';
// @ts-ignore
import { DestinationsRequestBuilderNavigationMetadata, DestinationsRequestBuilderRequestsMetadata } from './destinations/index.js';
// @ts-ignore
import { WithSink_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SinksGetResponse}
 */
// @ts-ignore
export function createSinksGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoSinksGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SinksPostRequestBody}
 */
// @ts-ignore
export function createSinksPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoSinksPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSinksGetResponse(sinksGetResponse = {}) {
    return {
        "sinks": n => { sinksGetResponse.sinks = n.getCollectionOfObjectValues(createSinks_responseFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSinksPostRequestBody(sinksPostRequestBody = {}) {
    return {
        "destination_uuid": n => { sinksPostRequestBody.destinationUuid = n.getStringValue(); },
        "resources": n => { sinksPostRequestBody.resources = n.getCollectionOfObjectValues(createSink_resourceFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSinksGetResponse(writer, sinksGetResponse = {}) {
    if (sinksGetResponse) {
        writer.writeCollectionOfObjectValues("sinks", sinksGetResponse.sinks, serializeSinks_response);
        writer.writeAdditionalData(sinksGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSinksPostRequestBody(writer, sinksPostRequestBody = {}) {
    if (sinksPostRequestBody) {
        writer.writeStringValue("destination_uuid", sinksPostRequestBody.destinationUuid);
        writer.writeCollectionOfObjectValues("resources", sinksPostRequestBody.resources, serializeSink_resource);
        writer.writeAdditionalData(sinksPostRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const SinksRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/sinks{?resource_id*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SinksRequestBuilderGetQueryParametersMapper = {
    "resourceId": "resource_id",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SinksRequestBuilderNavigationMetadata = {
    bySink_uuid: {
        requestsMetadata: WithSink_uuItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["sink_uuid"],
    },
    destinations: {
        requestsMetadata: DestinationsRequestBuilderRequestsMetadata,
        navigationMetadata: DestinationsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SinksRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: SinksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createSinksGetResponseFromDiscriminatorValue,
        queryParametersMapper: SinksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SinksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSinksPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
