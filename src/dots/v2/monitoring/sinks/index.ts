/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSink_resourceFromDiscriminatorValue, createSinks_responseFromDiscriminatorValue, serializeSink_resource, serializeSinks_response, type ErrorEscaped, type Sink_resource, type Sinks_response } from '../../../models/index.js';
// @ts-ignore
import { DestinationsRequestBuilderNavigationMetadata, DestinationsRequestBuilderRequestsMetadata, type DestinationsRequestBuilder } from './destinations/index.js';
// @ts-ignore
import { type WithSink_uuItemRequestBuilder, WithSink_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SinksGetResponse}
 */
// @ts-ignore
export function createSinksGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSinksGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SinksPostRequestBody}
 */
// @ts-ignore
export function createSinksPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSinksPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSinksGetResponse(sinksGetResponse: Partial<SinksGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "sinks": n => { sinksGetResponse.sinks = n.getCollectionOfObjectValues<Sinks_response>(createSinks_responseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSinksPostRequestBody(sinksPostRequestBody: Partial<SinksPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "destination_uuid": n => { sinksPostRequestBody.destinationUuid = n.getStringValue(); },
        "resources": n => { sinksPostRequestBody.resources = n.getCollectionOfObjectValues<Sink_resource>(createSink_resourceFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSinksGetResponse(writer: SerializationWriter, sinksGetResponse: Partial<SinksGetResponse> | undefined | null = {}) : void {
    if (sinksGetResponse) {
        writer.writeCollectionOfObjectValues<Sinks_response>("sinks", sinksGetResponse.sinks, serializeSinks_response);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSinksPostRequestBody(writer: SerializationWriter, sinksPostRequestBody: Partial<SinksPostRequestBody> | undefined | null = {}) : void {
    if (sinksPostRequestBody) {
        writer.writeStringValue("destination_uuid", sinksPostRequestBody.destinationUuid);
        writer.writeCollectionOfObjectValues<Sink_resource>("resources", sinksPostRequestBody.resources, serializeSink_resource);
    }
}
export interface SinksGetResponse extends Parsable {
    /**
     * List of sinks identified by their URNs.
     */
    sinks?: Sinks_response[] | null;
}
export interface SinksPostRequestBody extends Parsable {
    /**
     * A unique identifier for an already-existing destination.
     */
    destinationUuid?: string | null;
    /**
     * List of resources identified by their URNs.
     */
    resources?: Sink_resource[] | null;
}
/**
 * Builds and executes requests for operations under /v2/monitoring/sinks
 */
export interface SinksRequestBuilder extends BaseRequestBuilder<SinksRequestBuilder> {
    /**
     * The destinations property
     */
    get destinations(): DestinationsRequestBuilder;
    /**
     * Gets an item from the dots.v2.monitoring.sinks.item collection
     * @param sink_uuid A unique identifier for a sink.
     * @returns {WithSink_uuItemRequestBuilder}
     */
     bySink_uuid(sink_uuid: string) : WithSink_uuItemRequestBuilder;
    /**
     * To list all sinks, send a GET request to `/v2/monitoring/sinks`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SinksGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SinksRequestBuilderGetQueryParameters> | undefined) : Promise<SinksGetResponse | undefined>;
    /**
     * To create a new sink, send a POST request to `/v2/monitoring/sinks`. Forwards logs from the resources identified in `resources` to the specified pre-existing destination.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: SinksPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To list all sinks, send a GET request to `/v2/monitoring/sinks`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SinksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new sink, send a POST request to `/v2/monitoring/sinks`. Forwards logs from the resources identified in `resources` to the specified pre-existing destination.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SinksPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all sinks, send a GET request to `/v2/monitoring/sinks`.
 */
export interface SinksRequestBuilderGetQueryParameters {
    /**
     * A unique URN for a resource.
     */
    resourceId?: string;
}
/**
 * Uri template for the request builder.
 */
export const SinksRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/sinks{?resource_id*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SinksRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "resourceId": "resource_id",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SinksRequestBuilderNavigationMetadata: Record<Exclude<keyof SinksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySink_uuid: {
        requestsMetadata: WithSink_uuItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["sink_uuid"],
    },
    destinations: {
        requestsMetadata: DestinationsRequestBuilderRequestsMetadata,
        navigationMetadata: DestinationsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SinksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SinksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSinksGetResponseFromDiscriminatorValue,
        queryParametersMapper: SinksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SinksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSinksPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
