/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDestination_omit_credentialsFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeDestination_omit_credentials, serializeDestination_request, type Destination_omit_credentials, type Destination_request, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithDestination_uuItemRequestBuilder, WithDestination_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DestinationsGetResponse}
 */
// @ts-ignore
export function createDestinationsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDestinationsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DestinationsPostResponse}
 */
// @ts-ignore
export function createDestinationsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDestinationsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDestinationsGetResponse(destinationsGetResponse: Partial<DestinationsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "destinations": n => { destinationsGetResponse.destinations = n.getCollectionOfObjectValues<Destination_omit_credentials>(createDestination_omit_credentialsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDestinationsPostResponse(destinationsPostResponse: Partial<DestinationsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "destination": n => { destinationsPostResponse.destination = n.getObjectValue<Destination_omit_credentials>(createDestination_omit_credentialsFromDiscriminatorValue); },
    }
}
export interface DestinationsGetResponse extends Parsable {
    /**
     * The destinations property
     */
    destinations?: Destination_omit_credentials[] | null;
}
export interface DestinationsPostResponse extends Parsable {
    /**
     * The destination property
     */
    destination?: Destination_omit_credentials | null;
}
/**
 * Builds and executes requests for operations under /v2/monitoring/sinks/destinations
 */
export interface DestinationsRequestBuilder extends BaseRequestBuilder<DestinationsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.monitoring.sinks.destinations.item collection
     * @param destination_uuid A unique identifier for a destination.
     * @returns {WithDestination_uuItemRequestBuilder}
     */
     byDestination_uuid(destination_uuid: string) : WithDestination_uuItemRequestBuilder;
    /**
     * To list all logging destinations, send a GET request to `/v2/monitoring/sinks/destinations`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DestinationsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DestinationsGetResponse | undefined>;
    /**
     * To create a new destination, send a POST request to `/v2/monitoring/sinks/destinations`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DestinationsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Destination_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DestinationsPostResponse | undefined>;
    /**
     * To list all logging destinations, send a GET request to `/v2/monitoring/sinks/destinations`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To create a new destination, send a POST request to `/v2/monitoring/sinks/destinations`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Destination_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDestinationsGetResponse(writer: SerializationWriter, destinationsGetResponse: Partial<DestinationsGetResponse> | undefined | null = {}) : void {
    if (destinationsGetResponse) {
        writer.writeCollectionOfObjectValues<Destination_omit_credentials>("destinations", destinationsGetResponse.destinations, serializeDestination_omit_credentials);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDestinationsPostResponse(writer: SerializationWriter, destinationsPostResponse: Partial<DestinationsPostResponse> | undefined | null = {}) : void {
    if (destinationsPostResponse) {
        writer.writeObjectValue<Destination_omit_credentials>("destination", destinationsPostResponse.destination, serializeDestination_omit_credentials);
    }
}
/**
 * Uri template for the request builder.
 */
export const DestinationsRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/sinks/destinations";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DestinationsRequestBuilderNavigationMetadata: Record<Exclude<keyof DestinationsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDestination_uuid: {
        requestsMetadata: WithDestination_uuItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["destination_uuid"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DestinationsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DestinationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDestinationsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: DestinationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDestinationsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDestination_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
