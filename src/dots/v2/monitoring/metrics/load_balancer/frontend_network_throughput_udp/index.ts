/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMetricsFromDiscriminatorValue, type ErrorEscaped, type Metrics } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp
 */
export interface Frontend_network_throughput_udpRequestBuilder extends BaseRequestBuilder<Frontend_network_throughput_udpRequestBuilder> {
    /**
     * To retrieve frontend UDP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Metrics>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<Frontend_network_throughput_udpRequestBuilderGetQueryParameters> | undefined) : Promise<Metrics | undefined>;
    /**
     * To retrieve frontend UDP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Frontend_network_throughput_udpRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve frontend UDP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp`.
 */
export interface Frontend_network_throughput_udpRequestBuilderGetQueryParameters {
    /**
     * UNIX timestamp to end metric window.
     */
    end?: string;
    /**
     * A unique identifier for a load balancer.
     */
    lbId?: string;
    /**
     * UNIX timestamp to start metric window.
     */
    start?: string;
}
/**
 * Uri template for the request builder.
 */
export const Frontend_network_throughput_udpRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp?end={end}&lb_id={lb_id}&start={start}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Frontend_network_throughput_udpRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "lbId": "lb_id",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Frontend_network_throughput_udpRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Frontend_network_throughput_udpRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMetricsFromDiscriminatorValue,
        queryParametersMapper: Frontend_network_throughput_udpRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
