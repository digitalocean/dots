/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMetricsFromDiscriminatorValue, type ErrorEscaped, type Metrics } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/monitoring/metrics/droplet/bandwidth
 */
export interface BandwidthRequestBuilder extends BaseRequestBuilder<BandwidthRequestBuilder> {
    /**
     * To retrieve bandwidth metrics for a given Droplet, send a GET request to `/v2/monitoring/metrics/droplet/bandwidth`. Use the `interface` query parameter to specify if the results should be for the `private` or `public` interface. Use the `direction` query parameter to specify if the results should be for `inbound` or `outbound` traffic.The metrics in the response body are in megabits per second (Mbps).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Metrics>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<BandwidthRequestBuilderGetQueryParameters> | undefined) : Promise<Metrics | undefined>;
    /**
     * To retrieve bandwidth metrics for a given Droplet, send a GET request to `/v2/monitoring/metrics/droplet/bandwidth`. Use the `interface` query parameter to specify if the results should be for the `private` or `public` interface. Use the `direction` query parameter to specify if the results should be for `inbound` or `outbound` traffic.The metrics in the response body are in megabits per second (Mbps).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BandwidthRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve bandwidth metrics for a given Droplet, send a GET request to `/v2/monitoring/metrics/droplet/bandwidth`. Use the `interface` query parameter to specify if the results should be for the `private` or `public` interface. Use the `direction` query parameter to specify if the results should be for `inbound` or `outbound` traffic.The metrics in the response body are in megabits per second (Mbps).
 */
export interface BandwidthRequestBuilderGetQueryParameters {
    /**
     * The traffic direction.
     */
    direction?: GetDirectionQueryParameterType;
    /**
     * UNIX timestamp to end metric window.
     */
    end?: string;
    /**
     * The droplet ID.
     */
    hostId?: string;
    /**
     * The network interface.
     */
    interface?: GetInterfaceQueryParameterType;
    /**
     * UNIX timestamp to start metric window.
     */
    start?: string;
}
export type GetDirectionQueryParameterType = (typeof GetDirectionQueryParameterTypeObject)[keyof typeof GetDirectionQueryParameterTypeObject];
export type GetInterfaceQueryParameterType = (typeof GetInterfaceQueryParameterTypeObject)[keyof typeof GetInterfaceQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const BandwidthRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/metrics/droplet/bandwidth?direction={direction}&end={end}&host_id={host_id}&interface={interface}&start={start}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BandwidthRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "hostId": "host_id",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BandwidthRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BandwidthRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMetricsFromDiscriminatorValue,
        queryParametersMapper: BandwidthRequestBuilderGetQueryParametersMapper,
    },
};
export const GetDirectionQueryParameterTypeObject = {
    Inbound: "inbound",
    Outbound: "outbound",
} as const;
export const GetInterfaceQueryParameterTypeObject = {
    Private: "private",
    Public: "public",
} as const;
/* tslint:enable */
/* eslint-enable */
