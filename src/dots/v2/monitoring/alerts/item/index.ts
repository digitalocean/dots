/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAlert_policyFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeAlert_policy, serializeAlert_policy_request, type Alert_policy, type Alert_policy_request, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAlert_uuGetResponse}
 */
// @ts-ignore
export function createWithAlert_uuGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAlert_uuGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAlert_uuPutResponse}
 */
// @ts-ignore
export function createWithAlert_uuPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAlert_uuPutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAlert_uuGetResponse(withAlert_uuGetResponse: Partial<WithAlert_uuGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "policy": n => { withAlert_uuGetResponse.policy = n.getObjectValue<Alert_policy>(createAlert_policyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAlert_uuPutResponse(withAlert_uuPutResponse: Partial<WithAlert_uuPutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "policy": n => { withAlert_uuPutResponse.policy = n.getObjectValue<Alert_policy>(createAlert_policyFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAlert_uuGetResponse(writer: SerializationWriter, withAlert_uuGetResponse: Partial<WithAlert_uuGetResponse> | undefined | null = {}) : void {
    if (withAlert_uuGetResponse) {
        writer.writeObjectValue<Alert_policy>("policy", withAlert_uuGetResponse.policy, serializeAlert_policy);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAlert_uuPutResponse(writer: SerializationWriter, withAlert_uuPutResponse: Partial<WithAlert_uuPutResponse> | undefined | null = {}) : void {
    if (withAlert_uuPutResponse) {
        writer.writeObjectValue<Alert_policy>("policy", withAlert_uuPutResponse.policy, serializeAlert_policy);
    }
}
export interface WithAlert_uuGetResponse extends Parsable {
    /**
     * The policy property
     */
    policy?: Alert_policy | null;
}
/**
 * Builds and executes requests for operations under /v2/monitoring/alerts/{alert_uuid}
 */
export interface WithAlert_uuItemRequestBuilder extends BaseRequestBuilder<WithAlert_uuItemRequestBuilder> {
    /**
     * To delete an alert policy, send a DELETE request to `/v2/monitoring/alerts/{alert_uuid}`
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To retrieve a given alert policy, send a GET request to `/v2/monitoring/alerts/{alert_uuid}`
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAlert_uuGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithAlert_uuGetResponse | undefined>;
    /**
     * To update en existing policy, send a PUT request to `v2/monitoring/alerts/{alert_uuid}`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAlert_uuPutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Alert_policy_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithAlert_uuPutResponse | undefined>;
    /**
     * To delete an alert policy, send a DELETE request to `/v2/monitoring/alerts/{alert_uuid}`
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To retrieve a given alert policy, send a GET request to `/v2/monitoring/alerts/{alert_uuid}`
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update en existing policy, send a PUT request to `v2/monitoring/alerts/{alert_uuid}`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Alert_policy_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithAlert_uuPutResponse extends Parsable {
    /**
     * The policy property
     */
    policy?: Alert_policy | null;
}
/**
 * Uri template for the request builder.
 */
export const WithAlert_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/monitoring/alerts/{alert_uuid}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAlert_uuItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithAlert_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithAlert_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAlert_uuGetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithAlert_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAlert_uuPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAlert_policy_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
