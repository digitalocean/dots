/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createReserved_ipv6FromDiscriminatorValue, serializeReserved_ipv6 } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderRequestsMetadata } from './actions/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithReserved_ipv6GetResponse}
 */
// @ts-ignore
export function createWithReserved_ipv6GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithReserved_ipv6GetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithReserved_ipv6GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithReserved_ipv6GetResponse(withReserved_ipv6GetResponse = {}) {
    return {
        "reserved_ipv6": n => { withReserved_ipv6GetResponse.reservedIpv6 = n.getObjectValue(createReserved_ipv6FromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithReserved_ipv6GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithReserved_ipv6GetResponse(writer, withReserved_ipv6GetResponse = {}, isSerializingDerivedType = false) {
    if (!withReserved_ipv6GetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("reserved_ipv6", withReserved_ipv6GetResponse.reservedIpv6, serializeReserved_ipv6);
    writer.writeAdditionalData(withReserved_ipv6GetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithReserved_ipv6ItemRequestBuilderUriTemplate = "{+baseurl}/v2/reserved_ipv6/{reserved_ipv6}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithReserved_ipv6ItemRequestBuilderNavigationMetadata = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithReserved_ipv6ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithReserved_ipv6ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            422: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithReserved_ipv6ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithReserved_ipv6GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
