/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createFloating_ip_action_assignFromDiscriminatorValue, createFloating_ip_action_unassignFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoAction, deserializeIntoFloating_ip_action_assign, deserializeIntoFloating_ip_action_unassign, serializeAction, serializeFloating_ip_action_assign, serializeFloating_ip_action_unassign, serializeMeta_properties, serializePage_links, type Action, type ErrorEscaped, type Floating_ip_action_assign, type Floating_ip_action_unassign, type Meta_properties, type Page_links } from '../../../../models/index.js';
// @ts-ignore
import { type WithAction_ItemRequestBuilder, WithAction_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActionsGetResponse extends Parsable {
    /**
     * The actions property
     */
    actions?: Action[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type ActionsPostRequestBody = Floating_ip_action_assign | Floating_ip_action_unassign;
export interface ActionsPostResponse extends Parsable {
    /**
     * The action property
     */
    action?: ActionsPostResponse_action | null;
}
export interface ActionsPostResponse_action extends Action, Parsable {
    /**
     * The UUID of the project to which the reserved IP currently belongs.
     */
    projectId?: Guid | null;
}
/**
 * Builds and executes requests for operations under /v2/floating_ips/{floating_ip}/actions
 */
export interface ActionsRequestBuilder extends BaseRequestBuilder<ActionsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.floating_ips.item.actions.item collection
     * @param action_id A unique numeric ID that can be used to identify and reference an action.
     * @returns {WithAction_ItemRequestBuilder}
     */
     byAction_id(action_id: number) : WithAction_ItemRequestBuilder;
    /**
     * To retrieve all actions that have been executed on a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP/actions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ActionsGetResponse | undefined>;
    /**
     * To initiate an action on a floating IP send a POST request to`/v2/floating_ips/$FLOATING_IP/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action     | Details|------------|--------| `assign`   | Assigns a floating IP to a Droplet| `unassign` | Unassign a floating IP from a Droplet
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Floating_ip_action_assign | Floating_ip_action_unassign, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ActionsPostResponse | undefined>;
    /**
     * To retrieve all actions that have been executed on a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP/actions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To initiate an action on a floating IP send a POST request to`/v2/floating_ips/$FLOATING_IP/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action     | Details|------------|--------| `assign`   | Assigns a floating IP to a Droplet| `unassign` | Unassign a floating IP from a Droplet
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Floating_ip_action_assign | Floating_ip_action_unassign, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsGetResponse}
 */
// @ts-ignore
export function createActionsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Floating_ip_action_assign | Floating_ip_action_unassign}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse_action}
 */
// @ts-ignore
export function createActionsPostResponse_actionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostResponse_action;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsGetResponse(actionsGetResponse: Partial<ActionsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { actionsGetResponse.actions = n.getCollectionOfObjectValues<Action>(createActionFromDiscriminatorValue); },
        "links": n => { actionsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { actionsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody: Partial<Floating_ip_action_assign | Floating_ip_action_unassign> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFloating_ip_action_assign(actionsPostRequestBody as Floating_ip_action_assign),
        ...deserializeIntoFloating_ip_action_unassign(actionsPostRequestBody as Floating_ip_action_unassign),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse: Partial<ActionsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { actionsPostResponse.action = n.getObjectValue<ActionsPostResponse_action>(createActionsPostResponse_actionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse_action(actionsPostResponse_action: Partial<ActionsPostResponse_action> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAction(actionsPostResponse_action),
        "project_id": n => { actionsPostResponse_action.projectId = n.getGuidValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsGetResponse(writer: SerializationWriter, actionsGetResponse: Partial<ActionsGetResponse> | undefined | null = {}) : void {
    if (actionsGetResponse) {
        writer.writeCollectionOfObjectValues<Action>("actions", actionsGetResponse.actions, serializeAction);
        writer.writeObjectValue<Page_links>("links", actionsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", actionsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer: SerializationWriter, actionsPostRequestBody: Partial<Floating_ip_action_assign | Floating_ip_action_unassign> | undefined | null = {}) : void {
    serializeFloating_ip_action_assign(writer, actionsPostRequestBody as Floating_ip_action_assign);
    serializeFloating_ip_action_unassign(writer, actionsPostRequestBody as Floating_ip_action_unassign);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer: SerializationWriter, actionsPostResponse: Partial<ActionsPostResponse> | undefined | null = {}) : void {
    if (actionsPostResponse) {
        writer.writeObjectValue<ActionsPostResponse_action>("action", actionsPostResponse.action, serializeActionsPostResponse_action);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse_action(writer: SerializationWriter, actionsPostResponse_action: Partial<ActionsPostResponse_action> | undefined | null = {}) : void {
    if (actionsPostResponse_action) {
        serializeAction(writer, actionsPostResponse_action)
        writer.writeGuidValue("project_id", actionsPostResponse_action.projectId);
    }
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/floating_ips/{floating_ip}/actions";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ActionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ActionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAction_id: {
        requestsMetadata: WithAction_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["action_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
