/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createFloating_ipFromDiscriminatorValue, serializeFloating_ip, type ErrorEscaped, type Floating_ip } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithFloating_ipGetResponse}
 */
// @ts-ignore
export function createWithFloating_ipGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithFloating_ipGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithFloating_ipGetResponse(withFloating_ipGetResponse: Partial<WithFloating_ipGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "floating_ip": n => { withFloating_ipGetResponse.floatingIp = n.getObjectValue<Floating_ip>(createFloating_ipFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithFloating_ipGetResponse(writer: SerializationWriter, withFloating_ipGetResponse: Partial<WithFloating_ipGetResponse> | undefined | null = {}) : void {
    if (withFloating_ipGetResponse) {
        writer.writeObjectValue<Floating_ip>("floating_ip", withFloating_ipGetResponse.floatingIp, serializeFloating_ip);
        writer.writeAdditionalData(withFloating_ipGetResponse.additionalData);
    }
}
export interface WithFloating_ipGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The floating_ip property
     */
    floatingIp?: Floating_ip | null;
}
/**
 * Builds and executes requests for operations under /v2/floating_ips/{floating_ip}
 */
export interface WithFloating_ipItemRequestBuilder extends BaseRequestBuilder<WithFloating_ipItemRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * To delete a floating IP and remove it from your account, send a DELETE requestto `/v2/floating_ips/$FLOATING_IP_ADDR`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP_ADDR`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithFloating_ipGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithFloating_ipGetResponse | undefined>;
    /**
     * To delete a floating IP and remove it from your account, send a DELETE requestto `/v2/floating_ips/$FLOATING_IP_ADDR`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP_ADDR`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithFloating_ipItemRequestBuilderUriTemplate = "{+baseurl}/v2/floating_ips/{floating_ip}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithFloating_ipItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithFloating_ipItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithFloating_ipItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithFloating_ipItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithFloating_ipItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithFloating_ipGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
