/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createFloating_ipFromDiscriminatorValue, serializeFloating_ip } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata } from './actions/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithFloating_ipGetResponse}
 */
// @ts-ignore
export function createWithFloating_ipGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithFloating_ipGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithFloating_ipGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithFloating_ipGetResponse(withFloating_ipGetResponse = {}) {
    return {
        "floating_ip": n => { withFloating_ipGetResponse.floatingIp = n.getObjectValue(createFloating_ipFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithFloating_ipGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithFloating_ipGetResponse(writer, withFloating_ipGetResponse = {}, isSerializingDerivedType = false) {
    if (!withFloating_ipGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("floating_ip", withFloating_ipGetResponse.floatingIp, serializeFloating_ip);
    writer.writeAdditionalData(withFloating_ipGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithFloating_ipItemRequestBuilderUriTemplate = "{+baseurl}/v2/floating_ips/{floating_ip}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithFloating_ipItemRequestBuilderNavigationMetadata = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithFloating_ipItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithFloating_ipItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithFloating_ipItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithFloating_ipGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
