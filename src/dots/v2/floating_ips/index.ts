/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAction_linkFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createFloating_ip_createMember1FromDiscriminatorValue, createFloating_ip_createMember2FromDiscriminatorValue, createFloating_ipFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, deserializeIntoFloating_ip_createMember1, deserializeIntoFloating_ip_createMember2, serializeAction_link, serializeFloating_ip, serializeFloating_ip_createMember1, serializeFloating_ip_createMember2, serializeMeta_properties, serializePage_links, type Action_link, type ErrorEscaped, type Floating_ip, type Floating_ip_createMember1, type Floating_ip_createMember2, type Meta_properties, type Page_links } from '../../models/index.js';
// @ts-ignore
import { type WithFloating_ipItemRequestBuilder, WithFloating_ipItemRequestBuilderNavigationMetadata, WithFloating_ipItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Floating_ip_createMember1 | Floating_ip_createMember2}
 */
// @ts-ignore
export function createFloating_ip_createFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFloating_ip_create;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Floating_ipsGetResponse}
 */
// @ts-ignore
export function createFloating_ipsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFloating_ipsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Floating_ipsPostResponse_links}
 */
// @ts-ignore
export function createFloating_ipsPostResponse_linksFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFloating_ipsPostResponse_links;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Floating_ipsPostResponse}
 */
// @ts-ignore
export function createFloating_ipsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFloating_ipsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFloating_ip_create(floating_ip_create: Partial<Floating_ip_createMember1 | Floating_ip_createMember2> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFloating_ip_createMember1(floating_ip_create as Floating_ip_createMember1),
        ...deserializeIntoFloating_ip_createMember2(floating_ip_create as Floating_ip_createMember2),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFloating_ipsGetResponse(floating_ipsGetResponse: Partial<Floating_ipsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "floating_ips": n => { floating_ipsGetResponse.floatingIps = n.getCollectionOfObjectValues<Floating_ip>(createFloating_ipFromDiscriminatorValue); },
        "links": n => { floating_ipsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { floating_ipsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFloating_ipsPostResponse(floating_ipsPostResponse: Partial<Floating_ipsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "floating_ip": n => { floating_ipsPostResponse.floatingIp = n.getObjectValue<Floating_ip>(createFloating_ipFromDiscriminatorValue); },
        "links": n => { floating_ipsPostResponse.links = n.getObjectValue<Floating_ipsPostResponse_links>(createFloating_ipsPostResponse_linksFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFloating_ipsPostResponse_links(floating_ipsPostResponse_links: Partial<Floating_ipsPostResponse_links> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { floating_ipsPostResponse_links.actions = n.getCollectionOfObjectValues<Action_link>(createAction_linkFromDiscriminatorValue); },
        "droplets": n => { floating_ipsPostResponse_links.droplets = n.getCollectionOfObjectValues<Action_link>(createAction_linkFromDiscriminatorValue); },
    }
}
export type Floating_ip_create = Floating_ip_createMember1 | Floating_ip_createMember2;
export interface Floating_ipsGetResponse extends Parsable {
    /**
     * The floating_ips property
     */
    floatingIps?: Floating_ip[] | null;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export interface Floating_ipsPostResponse extends Parsable {
    /**
     * The floating_ip property
     */
    floatingIp?: Floating_ip | null;
    /**
     * The links property
     */
    links?: Floating_ipsPostResponse_links | null;
}
export interface Floating_ipsPostResponse_links extends Parsable {
    /**
     * The actions property
     */
    actions?: Action_link[] | null;
    /**
     * The droplets property
     */
    droplets?: Action_link[] | null;
}
/**
 * Builds and executes requests for operations under /v2/floating_ips
 */
export interface Floating_ipsRequestBuilder extends BaseRequestBuilder<Floating_ipsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.floating_ips.item collection
     * @param floating_ip A floating IP address.
     * @returns {WithFloating_ipItemRequestBuilder}
     */
     byFloating_ip(floating_ip: string) : WithFloating_ipItemRequestBuilder;
    /**
     * To list all of the floating IPs available on your account, send a GET request to `/v2/floating_ips`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Floating_ipsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<Floating_ipsRequestBuilderGetQueryParameters> | undefined) : Promise<Floating_ipsGetResponse | undefined>;
    /**
     * On creation, a floating IP must be either assigned to a Droplet or reserved to a region.* To create a new floating IP assigned to a Droplet, send a POST  request to `/v2/floating_ips` with the `droplet_id` attribute.* To create a new floating IP reserved to a region, send a POST request to  `/v2/floating_ips` with the `region` attribute.**Note**:  In addition to the standard rate limiting, only 12 floating IPs may be created per 60 seconds.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Floating_ipsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Floating_ip_createMember1 | Floating_ip_createMember2, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Floating_ipsPostResponse | undefined>;
    /**
     * To list all of the floating IPs available on your account, send a GET request to `/v2/floating_ips`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Floating_ipsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * On creation, a floating IP must be either assigned to a Droplet or reserved to a region.* To create a new floating IP assigned to a Droplet, send a POST  request to `/v2/floating_ips` with the `droplet_id` attribute.* To create a new floating IP reserved to a region, send a POST request to  `/v2/floating_ips` with the `region` attribute.**Note**:  In addition to the standard rate limiting, only 12 floating IPs may be created per 60 seconds.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Floating_ip_createMember1 | Floating_ip_createMember2, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list all of the floating IPs available on your account, send a GET request to `/v2/floating_ips`.
 */
export interface Floating_ipsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFloating_ip_create(writer: SerializationWriter, floating_ip_create: Partial<Floating_ip_createMember1 | Floating_ip_createMember2> | undefined | null = {}) : void {
    serializeFloating_ip_createMember1(writer, floating_ip_create as Floating_ip_createMember1);
    serializeFloating_ip_createMember2(writer, floating_ip_create as Floating_ip_createMember2);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFloating_ipsGetResponse(writer: SerializationWriter, floating_ipsGetResponse: Partial<Floating_ipsGetResponse> | undefined | null = {}) : void {
    if (floating_ipsGetResponse) {
        writer.writeCollectionOfObjectValues<Floating_ip>("floating_ips", floating_ipsGetResponse.floatingIps, serializeFloating_ip);
        writer.writeObjectValue<Page_links>("links", floating_ipsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", floating_ipsGetResponse.meta, serializeMeta_properties);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFloating_ipsPostResponse(writer: SerializationWriter, floating_ipsPostResponse: Partial<Floating_ipsPostResponse> | undefined | null = {}) : void {
    if (floating_ipsPostResponse) {
        writer.writeObjectValue<Floating_ip>("floating_ip", floating_ipsPostResponse.floatingIp, serializeFloating_ip);
        writer.writeObjectValue<Floating_ipsPostResponse_links>("links", floating_ipsPostResponse.links, serializeFloating_ipsPostResponse_links);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFloating_ipsPostResponse_links(writer: SerializationWriter, floating_ipsPostResponse_links: Partial<Floating_ipsPostResponse_links> | undefined | null = {}) : void {
    if (floating_ipsPostResponse_links) {
        writer.writeCollectionOfObjectValues<Action_link>("actions", floating_ipsPostResponse_links.actions, serializeAction_link);
        writer.writeCollectionOfObjectValues<Action_link>("droplets", floating_ipsPostResponse_links.droplets, serializeAction_link);
    }
}
/**
 * Uri template for the request builder.
 */
export const Floating_ipsRequestBuilderUriTemplate = "{+baseurl}/v2/floating_ips{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Floating_ipsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Floating_ipsRequestBuilderNavigationMetadata: Record<Exclude<keyof Floating_ipsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byFloating_ip: {
        requestsMetadata: WithFloating_ipItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithFloating_ipItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["floating_ip"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Floating_ipsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Floating_ipsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFloating_ipsGetResponseFromDiscriminatorValue,
        queryParametersMapper: Floating_ipsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: Floating_ipsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFloating_ipsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeFloating_ip_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
