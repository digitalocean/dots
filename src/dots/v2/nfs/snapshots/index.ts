/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createNfs_snapshot_list_responseFromDiscriminatorValue, type ErrorEscaped, type Nfs_snapshot_list_response } from '../../../models/index.js';
// @ts-ignore
import { type WithNfs_snapshot_ItemRequestBuilder, WithNfs_snapshot_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/nfs/snapshots
 */
export interface SnapshotsRequestBuilder extends BaseRequestBuilder<SnapshotsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.nfs.snapshots.item collection
     * @param nfs_snapshot_id The unique ID of the NFS snapshot
     * @returns {WithNfs_snapshot_ItemRequestBuilder}
     */
     byNfs_snapshot_id(nfs_snapshot_id: string) : WithNfs_snapshot_ItemRequestBuilder;
    /**
     * To list all NFS snapshots, send a GET request to `/v2/nfs/snapshots?region=${region}&share_id={share_id}`.A successful request will return all NFS snapshots belonging to the authenticated user in the specified region.Optionally, you can filter snapshots by a specific NFS share by including the `share_id` query parameter.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Nfs_snapshot_list_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : Promise<Nfs_snapshot_list_response | undefined>;
    /**
     * To list all NFS snapshots, send a GET request to `/v2/nfs/snapshots?region=${region}&share_id={share_id}`.A successful request will return all NFS snapshots belonging to the authenticated user in the specified region.Optionally, you can filter snapshots by a specific NFS share by including the `share_id` query parameter.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To list all NFS snapshots, send a GET request to `/v2/nfs/snapshots?region=${region}&share_id={share_id}`.A successful request will return all NFS snapshots belonging to the authenticated user in the specified region.Optionally, you can filter snapshots by a specific NFS share by including the `share_id` query parameter.
 */
export interface SnapshotsRequestBuilderGetQueryParameters {
    /**
     * The DigitalOcean region slug (e.g., nyc2, atl1) where the NFS share resides.
     */
    region?: string;
    /**
     * The unique ID of an NFS share. If provided, only snapshots of this specific share will be returned.
     */
    shareId?: string;
}
/**
 * Uri template for the request builder.
 */
export const SnapshotsRequestBuilderUriTemplate = "{+baseurl}/v2/nfs/snapshots?region={region}{&share_id*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SnapshotsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "shareId": "share_id",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SnapshotsRequestBuilderNavigationMetadata: Record<Exclude<keyof SnapshotsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byNfs_snapshot_id: {
        requestsMetadata: WithNfs_snapshot_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["nfs_snapshot_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SnapshotsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SnapshotsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNfs_snapshot_list_responseFromDiscriminatorValue,
        queryParametersMapper: SnapshotsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
