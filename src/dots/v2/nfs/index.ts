/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createNfs_create_responseFromDiscriminatorValue, createNfs_list_responseFromDiscriminatorValue, serializeNfs_create_response, serializeNfs_request, type ErrorEscaped, type Nfs_create_response, type Nfs_list_response, type Nfs_request } from '../../models/index.js';
// @ts-ignore
import { type WithNfs_ItemRequestBuilder, WithNfs_ItemRequestBuilderNavigationMetadata, WithNfs_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { SnapshotsRequestBuilderNavigationMetadata, SnapshotsRequestBuilderRequestsMetadata, type SnapshotsRequestBuilder } from './snapshots/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/nfs
 */
export interface NfsRequestBuilder extends BaseRequestBuilder<NfsRequestBuilder> {
    /**
     * The snapshots property
     */
    get snapshots(): SnapshotsRequestBuilder;
    /**
     * Gets an item from the ApiSdk.v2.nfs.item collection
     * @param nfs_id The unique ID of the NFS share
     * @returns {WithNfs_ItemRequestBuilder}
     */
     byNfs_id(nfs_id: string) : WithNfs_ItemRequestBuilder;
    /**
     * To list NFS shares, send a GET request to `/v2/nfs?region=${region}`.A successful request will return all NFS shares belonging to the authenticated user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Nfs_list_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<NfsRequestBuilderGetQueryParameters> | undefined) : Promise<Nfs_list_response | undefined>;
    /**
     * To create a new NFS share, send a POST request to `/v2/nfs`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Nfs_create_response>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Nfs_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Nfs_create_response | undefined>;
    /**
     * To list NFS shares, send a GET request to `/v2/nfs?region=${region}`.A successful request will return all NFS shares belonging to the authenticated user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<NfsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new NFS share, send a POST request to `/v2/nfs`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Nfs_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To list NFS shares, send a GET request to `/v2/nfs?region=${region}`.A successful request will return all NFS shares belonging to the authenticated user.
 */
export interface NfsRequestBuilderGetQueryParameters {
    /**
     * The DigitalOcean region slug (e.g., nyc2, atl1) where the NFS share resides.
     */
    region?: string;
}
/**
 * Uri template for the request builder.
 */
export const NfsRequestBuilderUriTemplate = "{+baseurl}/v2/nfs?region={region}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const NfsRequestBuilderNavigationMetadata: Record<Exclude<keyof NfsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byNfs_id: {
        requestsMetadata: WithNfs_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithNfs_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["nfs_id"],
    },
    snapshots: {
        requestsMetadata: SnapshotsRequestBuilderRequestsMetadata,
        navigationMetadata: SnapshotsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const NfsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: NfsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNfs_list_responseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: NfsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNfs_create_responseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeNfs_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
