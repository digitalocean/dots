/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createNfs_get_responseFromDiscriminatorValue, type ErrorEscaped, type Nfs_get_response } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/nfs/{nfs_id}
 */
export interface WithNfs_ItemRequestBuilder extends BaseRequestBuilder<WithNfs_ItemRequestBuilder> {
    /**
     * To delete an NFS share, send a DELETE request to `/v2/nfs/$ID?region=${region}`.A successful request will return a `204 No Content` status code.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<WithNfs_ItemRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * To get an NFS share, send a GET request to `/v2/nfs/$ID?region=${region}`.A successful request will return the NFS share.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Nfs_get_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<WithNfs_ItemRequestBuilderGetQueryParameters> | undefined) : Promise<Nfs_get_response | undefined>;
    /**
     * To delete an NFS share, send a DELETE request to `/v2/nfs/$ID?region=${region}`.A successful request will return a `204 No Content` status code.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<WithNfs_ItemRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * To get an NFS share, send a GET request to `/v2/nfs/$ID?region=${region}`.A successful request will return the NFS share.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithNfs_ItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To delete an NFS share, send a DELETE request to `/v2/nfs/$ID?region=${region}`.A successful request will return a `204 No Content` status code.
 */
export interface WithNfs_ItemRequestBuilderDeleteQueryParameters {
    /**
     * The DigitalOcean region slug (e.g., nyc2, atl1) where the NFS share resides.
     */
    region?: string;
}
/**
 * To get an NFS share, send a GET request to `/v2/nfs/$ID?region=${region}`.A successful request will return the NFS share.
 */
export interface WithNfs_ItemRequestBuilderGetQueryParameters {
    /**
     * The DigitalOcean region slug (e.g., nyc2, atl1) where the NFS share resides.
     */
    region?: string;
}
/**
 * Uri template for the request builder.
 */
export const WithNfs_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/nfs/{nfs_id}?region={region}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithNfs_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithNfs_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithNfs_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNfs_get_responseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
