/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createSnapshotsFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeSnapshots, type ErrorEscaped, type Meta_properties, type Page_links, type Snapshots } from '../../models/index.js';
// @ts-ignore
import { type WithSnapshot_ItemRequestBuilder, WithSnapshot_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SnapshotsGetResponse}
 */
// @ts-ignore
export function createSnapshotsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSnapshotsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSnapshotsGetResponse(snapshotsGetResponse: Partial<SnapshotsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { snapshotsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { snapshotsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "snapshots": n => { snapshotsGetResponse.snapshots = n.getCollectionOfObjectValues<Snapshots>(createSnapshotsFromDiscriminatorValue); },
    }
}
export type GetResource_typeQueryParameterType = (typeof GetResource_typeQueryParameterTypeObject)[keyof typeof GetResource_typeQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSnapshotsGetResponse(writer: SerializationWriter, snapshotsGetResponse: Partial<SnapshotsGetResponse> | undefined | null = {}) : void {
    if (snapshotsGetResponse) {
        writer.writeObjectValue<Page_links>("links", snapshotsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", snapshotsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<Snapshots>("snapshots", snapshotsGetResponse.snapshots, serializeSnapshots);
    }
}
export interface SnapshotsGetResponse extends Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The snapshots property
     */
    snapshots?: Snapshots[] | null;
}
/**
 * Builds and executes requests for operations under /v2/snapshots
 */
export interface SnapshotsRequestBuilder extends BaseRequestBuilder<SnapshotsRequestBuilder> {
    /**
     * Gets an item from the dots.v2.snapshots.item collection
     * @param snapshot_id Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot.
     * @returns {WithSnapshot_ItemRequestBuilder}
     */
     bySnapshot_id(snapshot_id: number) : WithSnapshot_ItemRequestBuilder;
    /**
     * To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt's possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SnapshotsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : Promise<SnapshotsGetResponse | undefined>;
    /**
     * To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt's possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt's possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
 */
export interface SnapshotsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * Used to filter snapshots by a resource type.
     */
    resourceType?: GetResource_typeQueryParameterType;
}
/**
 * Uri template for the request builder.
 */
export const SnapshotsRequestBuilderUriTemplate = "{+baseurl}/v2/snapshots{?page*,per_page*,resource_type*}";
export const GetResource_typeQueryParameterTypeObject = {
    Droplet: "droplet",
    Volume: "volume",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SnapshotsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
    "resourceType": "resource_type",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SnapshotsRequestBuilderNavigationMetadata: Record<Exclude<keyof SnapshotsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySnapshot_id: {
        requestsMetadata: WithSnapshot_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["snapshot_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SnapshotsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SnapshotsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSnapshotsGetResponseFromDiscriminatorValue,
        queryParametersMapper: SnapshotsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
