/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createReserved_ipFromDiscriminatorValue, serializeReserved_ip, type ErrorEscaped, type Reserved_ip } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithReserved_ipGetResponse}
 */
// @ts-ignore
export function createWithReserved_ipGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithReserved_ipGetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithReserved_ipGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithReserved_ipGetResponse(withReserved_ipGetResponse: Partial<WithReserved_ipGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "reserved_ip": n => { withReserved_ipGetResponse.reservedIp = n.getObjectValue<Reserved_ip>(createReserved_ipFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithReserved_ipGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithReserved_ipGetResponse(writer: SerializationWriter, withReserved_ipGetResponse: Partial<WithReserved_ipGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withReserved_ipGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Reserved_ip>("reserved_ip", withReserved_ipGetResponse.reservedIp, serializeReserved_ip);
    writer.writeAdditionalData(withReserved_ipGetResponse.additionalData);
}
export interface WithReserved_ipGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The reserved_ip property
     */
    reservedIp?: Reserved_ip | null;
}
/**
 * Builds and executes requests for operations under /v2/reserved_ips/{reserved_ip}
 */
export interface WithReserved_ipItemRequestBuilder extends BaseRequestBuilder<WithReserved_ipItemRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * To delete a reserved IP and remove it from your account, send a DELETE requestto `/v2/reserved_ips/$RESERVED_IP_ADDR`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about a reserved IP, send a GET request to `/v2/reserved_ips/$RESERVED_IP_ADDR`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithReserved_ipGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithReserved_ipGetResponse | undefined>;
    /**
     * To delete a reserved IP and remove it from your account, send a DELETE requestto `/v2/reserved_ips/$RESERVED_IP_ADDR`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about a reserved IP, send a GET request to `/v2/reserved_ips/$RESERVED_IP_ADDR`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithReserved_ipItemRequestBuilderUriTemplate = "{+baseurl}/v2/reserved_ips/{reserved_ip}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithReserved_ipItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithReserved_ipItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithReserved_ipItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithReserved_ipItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithReserved_ipItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithReserved_ipGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
