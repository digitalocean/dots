/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVolumeActionFromDiscriminatorValue, deserializeIntoVolume_action_post_attach, deserializeIntoVolume_action_post_detach, serializeVolume_action_post_attach, serializeVolume_action_post_detach, serializeVolumeAction } from '../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Volume_action_post_attach | Volume_action_post_detach}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ActionsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody = {}) {
    return {
        ...deserializeIntoVolume_action_post_attach(actionsPostRequestBody),
        ...deserializeIntoVolume_action_post_detach(actionsPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @param ActionsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse = {}) {
    return {
        "action": n => { actionsPostResponse.action = n.getObjectValue(createVolumeActionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param ActionsPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer, actionsPostRequestBody = {}, isSerializingDerivedType = false) {
    serializeVolume_action_post_attach(writer, actionsPostRequestBody);
    serializeVolume_action_post_detach(writer, actionsPostRequestBody);
}
/**
 * Serializes information the current object
 * @param ActionsPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer, actionsPostResponse = {}, isSerializingDerivedType = false) {
    if (!actionsPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("action", actionsPostResponse.action, serializeVolumeAction);
    writer.writeAdditionalData(actionsPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/actions{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderPostQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata = {
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: ActionsRequestBuilderPostQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
