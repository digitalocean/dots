/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVolume_action_post_attachFromDiscriminatorValue, createVolume_action_post_detachFromDiscriminatorValue, createVolumeActionFromDiscriminatorValue, deserializeIntoVolume_action_post_attach, deserializeIntoVolume_action_post_detach, serializeVolume_action_post_attach, serializeVolume_action_post_detach, serializeVolumeAction, type ErrorEscaped, type Volume_action_post_attach, type Volume_action_post_detach, type VolumeAction } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type ActionsPostRequestBody = Volume_action_post_attach | Volume_action_post_detach;
export interface ActionsPostResponse extends Parsable {
    /**
     * The action property
     */
    action?: VolumeAction | null;
}
/**
 * Builds and executes requests for operations under /v2/volumes/actions
 */
export interface ActionsRequestBuilder extends BaseRequestBuilder<ActionsRequestBuilder> {
    /**
     * To initiate an action on a block storage volume by Name, send a POST request to`~/v2/volumes/actions`. The body should contain the appropriateattributes for the respective action.## Attach a Block Storage Volume to a Droplet| Attribute   | Details                                                             || ----------- | ------------------------------------------------------------------- || type        | This must be `attach`                                               || volume_name | The name of the block storage volume                                || droplet_id  | Set to the Droplet's ID                                             || region      | Set to the slug representing the region where the volume is located |Each volume may only be attached to a single Droplet. However, up to fifteenvolumes may be attached to a Droplet at a time. Pre-formatted volumes will beautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOSDroplets created on or after April 26, 2018 when attached. On older Droplets,[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)is required.## Remove a Block Storage Volume from a Droplet| Attribute   | Details                                                             || ----------- | ------------------------------------------------------------------- || type        | This must be `detach`                                               || volume_name | The name of the block storage volume                                || droplet_id  | Set to the Droplet's ID                                             || region      | Set to the slug representing the region where the volume is located |
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Volume_action_post_attach | Volume_action_post_detach, requestConfiguration?: RequestConfiguration<ActionsRequestBuilderPostQueryParameters> | undefined) : Promise<ActionsPostResponse | undefined>;
    /**
     * To initiate an action on a block storage volume by Name, send a POST request to`~/v2/volumes/actions`. The body should contain the appropriateattributes for the respective action.## Attach a Block Storage Volume to a Droplet| Attribute   | Details                                                             || ----------- | ------------------------------------------------------------------- || type        | This must be `attach`                                               || volume_name | The name of the block storage volume                                || droplet_id  | Set to the Droplet's ID                                             || region      | Set to the slug representing the region where the volume is located |Each volume may only be attached to a single Droplet. However, up to fifteenvolumes may be attached to a Droplet at a time. Pre-formatted volumes will beautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOSDroplets created on or after April 26, 2018 when attached. On older Droplets,[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)is required.## Remove a Block Storage Volume from a Droplet| Attribute   | Details                                                             || ----------- | ------------------------------------------------------------------- || type        | This must be `detach`                                               || volume_name | The name of the block storage volume                                || droplet_id  | Set to the Droplet's ID                                             || region      | Set to the slug representing the region where the volume is located |
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Volume_action_post_attach | Volume_action_post_detach, requestConfiguration?: RequestConfiguration<ActionsRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
/**
 * To initiate an action on a block storage volume by Name, send a POST request to`~/v2/volumes/actions`. The body should contain the appropriateattributes for the respective action.## Attach a Block Storage Volume to a Droplet| Attribute   | Details                                                             || ----------- | ------------------------------------------------------------------- || type        | This must be `attach`                                               || volume_name | The name of the block storage volume                                || droplet_id  | Set to the Droplet's ID                                             || region      | Set to the slug representing the region where the volume is located |Each volume may only be attached to a single Droplet. However, up to fifteenvolumes may be attached to a Droplet at a time. Pre-formatted volumes will beautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOSDroplets created on or after April 26, 2018 when attached. On older Droplets,[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)is required.## Remove a Block Storage Volume from a Droplet| Attribute   | Details                                                             || ----------- | ------------------------------------------------------------------- || type        | This must be `detach`                                               || volume_name | The name of the block storage volume                                || droplet_id  | Set to the Droplet's ID                                             || region      | Set to the slug representing the region where the volume is located |
 */
export interface ActionsRequestBuilderPostQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Volume_action_post_attach | Volume_action_post_detach}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody: Partial<Volume_action_post_attach | Volume_action_post_detach> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoVolume_action_post_attach(actionsPostRequestBody as Volume_action_post_attach),
        ...deserializeIntoVolume_action_post_detach(actionsPostRequestBody as Volume_action_post_detach),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse: Partial<ActionsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { actionsPostResponse.action = n.getObjectValue<VolumeAction>(createVolumeActionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer: SerializationWriter, actionsPostRequestBody: Partial<Volume_action_post_attach | Volume_action_post_detach> | undefined | null = {}) : void {
    serializeVolume_action_post_attach(writer, actionsPostRequestBody as Volume_action_post_attach);
    serializeVolume_action_post_detach(writer, actionsPostRequestBody as Volume_action_post_detach);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer: SerializationWriter, actionsPostResponse: Partial<ActionsPostResponse> | undefined | null = {}) : void {
    if (actionsPostResponse) {
        writer.writeObjectValue<VolumeAction>("action", actionsPostResponse.action, serializeVolumeAction);
    }
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/actions{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderPostQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: ActionsRequestBuilderPostQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
