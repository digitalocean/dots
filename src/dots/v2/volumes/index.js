/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVolume_fullFromDiscriminatorValue, deserializeIntoVolumes_ext4, deserializeIntoVolumes_xfs, serializeMeta_properties, serializePage_links, serializeVolume_full, serializeVolumes_ext4, serializeVolumes_xfs } from '../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderRequestsMetadata } from './actions/index.js';
// @ts-ignore
import { WithVolume_ItemRequestBuilderNavigationMetadata, WithVolume_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { SnapshotsRequestBuilderNavigationMetadata } from './snapshots/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumesGetResponse}
 */
// @ts-ignore
export function createVolumesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoVolumesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Volumes_ext4 | Volumes_xfs}
 */
// @ts-ignore
export function createVolumesPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoVolumesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumesPostResponse}
 */
// @ts-ignore
export function createVolumesPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoVolumesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumesGetResponse(volumesGetResponse = {}) {
    return {
        "links": n => { volumesGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { volumesGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "volumes": n => { volumesGetResponse.volumes = n.getCollectionOfObjectValues(createVolume_fullFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumesPostRequestBody(volumesPostRequestBody = {}) {
    return {
        ...deserializeIntoVolumes_ext4(volumesPostRequestBody),
        ...deserializeIntoVolumes_xfs(volumesPostRequestBody),
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumesPostResponse(volumesPostResponse = {}) {
    return {
        "volume": n => { volumesPostResponse.volume = n.getObjectValue(createVolume_fullFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumesGetResponse(writer, volumesGetResponse = {}) {
    if (volumesGetResponse) {
        writer.writeObjectValue("links", volumesGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", volumesGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues("volumes", volumesGetResponse.volumes, serializeVolume_full);
        writer.writeAdditionalData(volumesGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumesPostRequestBody(writer, volumesPostRequestBody = {}) {
    serializeVolumes_ext4(writer, volumesPostRequestBody);
    serializeVolumes_xfs(writer, volumesPostRequestBody);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumesPostResponse(writer, volumesPostResponse = {}) {
    if (volumesPostResponse) {
        writer.writeObjectValue("volume", volumesPostResponse.volume, serializeVolume_full);
        writer.writeAdditionalData(volumesPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const VolumesRequestBuilderUriTemplate = "{+baseurl}/v2/volumes{?name*,page*,per_page*,region*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const VolumesRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const VolumesRequestBuilderNavigationMetadata = {
    byVolume_id: {
        requestsMetadata: WithVolume_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithVolume_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["volume_id"],
    },
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
    },
    snapshots: {
        navigationMetadata: SnapshotsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VolumesRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: VolumesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: VolumesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createVolumesGetResponseFromDiscriminatorValue,
        queryParametersMapper: VolumesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: VolumesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue,
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createVolumesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVolumesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
