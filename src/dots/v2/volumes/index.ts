/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVolume_fullFromDiscriminatorValue, createVolumes_ext4FromDiscriminatorValue, createVolumes_xfsFromDiscriminatorValue, deserializeIntoVolumes_ext4, deserializeIntoVolumes_xfs, Region_slug, serializeMeta_properties, serializePage_links, serializeVolume_full, serializeVolumes_ext4, serializeVolumes_xfs, type ErrorEscaped, type Meta_properties, type Page_links, type Volume_full, type Volumes_ext4, type Volumes_xfs } from '../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { type WithVolume_ItemRequestBuilder, WithVolume_ItemRequestBuilderNavigationMetadata, WithVolume_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { SnapshotsRequestBuilderNavigationMetadata, type SnapshotsRequestBuilder } from './snapshots/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumesGetResponse}
 */
// @ts-ignore
export function createVolumesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Volumes_ext4 | Volumes_xfs}
 */
// @ts-ignore
export function createVolumesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VolumesPostResponse}
 */
// @ts-ignore
export function createVolumesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVolumesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumesGetResponse(volumesGetResponse: Partial<VolumesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { volumesGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { volumesGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "volumes": n => { volumesGetResponse.volumes = n.getCollectionOfObjectValues<Volume_full>(createVolume_fullFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumesPostRequestBody(volumesPostRequestBody: Partial<Volumes_ext4 | Volumes_xfs> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoVolumes_ext4(volumesPostRequestBody as Volumes_ext4),
        ...deserializeIntoVolumes_xfs(volumesPostRequestBody as Volumes_xfs),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVolumesPostResponse(volumesPostResponse: Partial<VolumesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "volume": n => { volumesPostResponse.volume = n.getObjectValue<Volume_full>(createVolume_fullFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumesGetResponse(writer: SerializationWriter, volumesGetResponse: Partial<VolumesGetResponse> | undefined | null = {}) : void {
    if (volumesGetResponse) {
        writer.writeObjectValue<Page_links>("links", volumesGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", volumesGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<Volume_full>("volumes", volumesGetResponse.volumes, serializeVolume_full);
        writer.writeAdditionalData(volumesGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumesPostRequestBody(writer: SerializationWriter, volumesPostRequestBody: Partial<Volumes_ext4 | Volumes_xfs> | undefined | null = {}) : void {
    serializeVolumes_ext4(writer, volumesPostRequestBody as Volumes_ext4);
    serializeVolumes_xfs(writer, volumesPostRequestBody as Volumes_xfs);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVolumesPostResponse(writer: SerializationWriter, volumesPostResponse: Partial<VolumesPostResponse> | undefined | null = {}) : void {
    if (volumesPostResponse) {
        writer.writeObjectValue<Volume_full>("volume", volumesPostResponse.volume, serializeVolume_full);
        writer.writeAdditionalData(volumesPostResponse.additionalData);
    }
}
export interface VolumesGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * Array of volumes.
     */
    volumes?: Volume_full[] | null;
}
export type VolumesPostRequestBody = Volumes_ext4 | Volumes_xfs;
export interface VolumesPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The volume property
     */
    volume?: Volume_full | null;
}
/**
 * Builds and executes requests for operations under /v2/volumes
 */
export interface VolumesRequestBuilder extends BaseRequestBuilder<VolumesRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * The snapshots property
     */
    get snapshots(): SnapshotsRequestBuilder;
    /**
     * Gets an item from the ApiSdk.v2.volumes.item collection
     * @param volume_id The ID of the block storage volume.
     * @returns {WithVolume_ItemRequestBuilder}
     */
     byVolume_id(volume_id: Guid) : WithVolume_ItemRequestBuilder;
    /**
     * Block storage volumes may also be deleted by name by sending a DELETE request with the volume's **name** and the **region slug** for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.No response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<VolumesRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * To list all of the block storage volumes available on your account, send a GET request to `/v2/volumes`.## Filtering Results### By RegionThe `region` may be provided as query parameter in order to restrict results to volumes available in a specific region. For example: `/v2/volumes?region=nyc1`### By NameIt is also possible to list volumes on your account that match a specified name. To do so, send a GET request with the volume's name as a query parameter to `/v2/volumes?name=$VOLUME_NAME`.**Note:** You can only create one volume per region with the same name.### By Name and RegionIt is also possible to retrieve information about a block storage volume by name. To do so, send a GET request with the volume's name and the region slug for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VolumesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<VolumesRequestBuilderGetQueryParameters> | undefined) : Promise<VolumesGetResponse | undefined>;
    /**
     * To create a new volume, send a POST request to `/v2/volumes`. Optionally, a `filesystem_type` attribute may be provided in order to automatically format the volume's filesystem. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to Droplets without support for auto-mounting is not recommended.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VolumesPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Volumes_ext4 | Volumes_xfs, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VolumesPostResponse | undefined>;
    /**
     * Block storage volumes may also be deleted by name by sending a DELETE request with the volume's **name** and the **region slug** for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.No response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<VolumesRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * To list all of the block storage volumes available on your account, send a GET request to `/v2/volumes`.## Filtering Results### By RegionThe `region` may be provided as query parameter in order to restrict results to volumes available in a specific region. For example: `/v2/volumes?region=nyc1`### By NameIt is also possible to list volumes on your account that match a specified name. To do so, send a GET request with the volume's name as a query parameter to `/v2/volumes?name=$VOLUME_NAME`.**Note:** You can only create one volume per region with the same name.### By Name and RegionIt is also possible to retrieve information about a block storage volume by name. To do so, send a GET request with the volume's name and the region slug for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VolumesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a new volume, send a POST request to `/v2/volumes`. Optionally, a `filesystem_type` attribute may be provided in order to automatically format the volume's filesystem. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to Droplets without support for auto-mounting is not recommended.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Volumes_ext4 | Volumes_xfs, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Block storage volumes may also be deleted by name by sending a DELETE request with the volume's **name** and the **region slug** for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.No response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.
 */
export interface VolumesRequestBuilderDeleteQueryParameters {
    /**
     * The block storage volume's name.
     */
    name?: string;
    /**
     * The slug identifier for the region where the resource is available.
     */
    region?: Region_slug;
}
/**
 * To list all of the block storage volumes available on your account, send a GET request to `/v2/volumes`.## Filtering Results### By RegionThe `region` may be provided as query parameter in order to restrict results to volumes available in a specific region. For example: `/v2/volumes?region=nyc1`### By NameIt is also possible to list volumes on your account that match a specified name. To do so, send a GET request with the volume's name as a query parameter to `/v2/volumes?name=$VOLUME_NAME`.**Note:** You can only create one volume per region with the same name.### By Name and RegionIt is also possible to retrieve information about a block storage volume by name. To do so, send a GET request with the volume's name and the region slug for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.
 */
export interface VolumesRequestBuilderGetQueryParameters {
    /**
     * The block storage volume's name.
     */
    name?: string;
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * The slug identifier for the region where the resource is available.
     */
    region?: Region_slug;
}
/**
 * Uri template for the request builder.
 */
export const VolumesRequestBuilderUriTemplate = "{+baseurl}/v2/volumes{?name*,page*,per_page*,region*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const VolumesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const VolumesRequestBuilderNavigationMetadata: Record<Exclude<keyof VolumesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byVolume_id: {
        requestsMetadata: WithVolume_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithVolume_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["volume_id"],
    },
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
    },
    snapshots: {
        navigationMetadata: SnapshotsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VolumesRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: VolumesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: VolumesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVolumesGetResponseFromDiscriminatorValue,
        queryParametersMapper: VolumesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: VolumesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVolumesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVolumesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
