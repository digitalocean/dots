/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVolumeActionFromDiscriminatorValue, serializeVolumeAction, type ErrorEscaped, type VolumeAction } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAction_GetResponse}
 */
// @ts-ignore
export function createWithAction_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAction_GetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAction_GetResponse(withAction_GetResponse: Partial<WithAction_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { withAction_GetResponse.action = n.getObjectValue<VolumeAction>(createVolumeActionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAction_GetResponse(writer: SerializationWriter, withAction_GetResponse: Partial<WithAction_GetResponse> | undefined | null = {}) : void {
    if (withAction_GetResponse) {
        writer.writeObjectValue<VolumeAction>("action", withAction_GetResponse.action, serializeVolumeAction);
    }
}
export interface WithAction_GetResponse extends Parsable {
    /**
     * The action property
     */
    action?: VolumeAction | null;
}
/**
 * Builds and executes requests for operations under /v2/volumes/{volume_id}/actions/{action_id}
 */
export interface WithAction_ItemRequestBuilder extends BaseRequestBuilder<WithAction_ItemRequestBuilder> {
    /**
     * To retrieve the status of a volume action, send a GET request to `/v2/volumes/$VOLUME_ID/actions/$ACTION_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAction_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<WithAction_ItemRequestBuilderGetQueryParameters> | undefined) : Promise<WithAction_GetResponse | undefined>;
    /**
     * To retrieve the status of a volume action, send a GET request to `/v2/volumes/$VOLUME_ID/actions/$ACTION_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithAction_ItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve the status of a volume action, send a GET request to `/v2/volumes/$VOLUME_ID/actions/$ACTION_ID`.
 */
export interface WithAction_ItemRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const WithAction_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/{volume_id}/actions/{action_id}{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithAction_ItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAction_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithAction_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAction_GetResponseFromDiscriminatorValue,
        queryParametersMapper: WithAction_ItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
