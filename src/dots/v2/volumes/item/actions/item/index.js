/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVolumeActionFromDiscriminatorValue, serializeVolumeAction } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAction_GetResponse}
 */
// @ts-ignore
export function createWithAction_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithAction_GetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAction_GetResponse(withAction_GetResponse = {}) {
    return {
        "action": n => { withAction_GetResponse.action = n.getObjectValue(createVolumeActionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAction_GetResponse(writer, withAction_GetResponse = {}) {
    if (withAction_GetResponse) {
        writer.writeObjectValue("action", withAction_GetResponse.action, serializeVolumeAction);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithAction_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/{volume_id}/actions/{action_id}{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithAction_ItemRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAction_ItemRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: WithAction_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithAction_GetResponseFromDiscriminatorValue,
        queryParametersMapper: WithAction_ItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
