/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createVolume_action_post_attachFromDiscriminatorValue, createVolume_action_post_detachFromDiscriminatorValue, createVolume_action_post_resizeFromDiscriminatorValue, createVolumeActionFromDiscriminatorValue, deserializeIntoVolume_action_post_attach, deserializeIntoVolume_action_post_detach, deserializeIntoVolume_action_post_resize, serializeMeta_properties, serializePage_links, serializeVolume_action_post_attach, serializeVolume_action_post_detach, serializeVolume_action_post_resize, serializeVolumeAction, type ErrorEscaped, type Meta_properties, type Page_links, type Volume_action_post_attach, type Volume_action_post_detach, type Volume_action_post_resize, type VolumeAction } from '../../../../models/index.js';
// @ts-ignore
import { type WithAction_ItemRequestBuilder, WithAction_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActionsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The actions property
     */
    actions?: VolumeAction[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
}
export type ActionsPostRequestBody = Volume_action_post_attach | Volume_action_post_detach | Volume_action_post_resize;
export interface ActionsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The action property
     */
    action?: VolumeAction | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Builds and executes requests for operations under /v2/volumes/{volume_id}/actions
 */
export interface ActionsRequestBuilder extends BaseRequestBuilder<ActionsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.volumes.item.actions.item collection
     * @param action_id A unique numeric ID that can be used to identify and reference an action.
     * @returns {WithAction_ItemRequestBuilder}
     */
     byAction_id(action_id: number) : WithAction_ItemRequestBuilder;
    /**
     * To retrieve all actions that have been executed on a volume, send a GET request to `/v2/volumes/$VOLUME_ID/actions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ActionsRequestBuilderGetQueryParameters> | undefined) : Promise<ActionsGetResponse | undefined>;
    /**
     * To initiate an action on a block storage volume by Id, send a POST request to`~/v2/volumes/$VOLUME_ID/actions`. The body should contain the appropriateattributes for the respective action.## Attach a Block Storage Volume to a Droplet| Attribute  | Details                                                             || ---------- | ------------------------------------------------------------------- || type       | This must be `attach`                                               || droplet_id | Set to the Droplet's ID                                             || region     | Set to the slug representing the region where the volume is located |Each volume may only be attached to a single Droplet. However, up to fifteenvolumes may be attached to a Droplet at a time. Pre-formatted volumes will beautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOSDroplets created on or after April 26, 2018 when attached. On older Droplets,[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)is required.## Remove a Block Storage Volume from a Droplet| Attribute  | Details                                                             || ---------- | ------------------------------------------------------------------- || type       | This must be `detach`                                               || droplet_id | Set to the Droplet's ID                                             || region     | Set to the slug representing the region where the volume is located |## Resize a Volume| Attribute      | Details                                                             || -------------- | ------------------------------------------------------------------- || type           | This must be `resize`                                               || size_gigabytes | The new size of the block storage volume in GiB (1024^3)            || region         | Set to the slug representing the region where the volume is located |Volumes may only be resized upwards. The maximum size for a volume is 16TiB.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ActionsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Volume_action_post_attach | Volume_action_post_detach | Volume_action_post_resize, requestConfiguration?: RequestConfiguration<ActionsRequestBuilderPostQueryParameters> | undefined) : Promise<ActionsPostResponse | undefined>;
    /**
     * To retrieve all actions that have been executed on a volume, send a GET request to `/v2/volumes/$VOLUME_ID/actions`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ActionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To initiate an action on a block storage volume by Id, send a POST request to`~/v2/volumes/$VOLUME_ID/actions`. The body should contain the appropriateattributes for the respective action.## Attach a Block Storage Volume to a Droplet| Attribute  | Details                                                             || ---------- | ------------------------------------------------------------------- || type       | This must be `attach`                                               || droplet_id | Set to the Droplet's ID                                             || region     | Set to the slug representing the region where the volume is located |Each volume may only be attached to a single Droplet. However, up to fifteenvolumes may be attached to a Droplet at a time. Pre-formatted volumes will beautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOSDroplets created on or after April 26, 2018 when attached. On older Droplets,[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)is required.## Remove a Block Storage Volume from a Droplet| Attribute  | Details                                                             || ---------- | ------------------------------------------------------------------- || type       | This must be `detach`                                               || droplet_id | Set to the Droplet's ID                                             || region     | Set to the slug representing the region where the volume is located |## Resize a Volume| Attribute      | Details                                                             || -------------- | ------------------------------------------------------------------- || type           | This must be `resize`                                               || size_gigabytes | The new size of the block storage volume in GiB (1024^3)            || region         | Set to the slug representing the region where the volume is located |Volumes may only be resized upwards. The maximum size for a volume is 16TiB.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Volume_action_post_attach | Volume_action_post_detach | Volume_action_post_resize, requestConfiguration?: RequestConfiguration<ActionsRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve all actions that have been executed on a volume, send a GET request to `/v2/volumes/$VOLUME_ID/actions`.
 */
export interface ActionsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * To initiate an action on a block storage volume by Id, send a POST request to`~/v2/volumes/$VOLUME_ID/actions`. The body should contain the appropriateattributes for the respective action.## Attach a Block Storage Volume to a Droplet| Attribute  | Details                                                             || ---------- | ------------------------------------------------------------------- || type       | This must be `attach`                                               || droplet_id | Set to the Droplet's ID                                             || region     | Set to the slug representing the region where the volume is located |Each volume may only be attached to a single Droplet. However, up to fifteenvolumes may be attached to a Droplet at a time. Pre-formatted volumes will beautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOSDroplets created on or after April 26, 2018 when attached. On older Droplets,[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)is required.## Remove a Block Storage Volume from a Droplet| Attribute  | Details                                                             || ---------- | ------------------------------------------------------------------- || type       | This must be `detach`                                               || droplet_id | Set to the Droplet's ID                                             || region     | Set to the slug representing the region where the volume is located |## Resize a Volume| Attribute      | Details                                                             || -------------- | ------------------------------------------------------------------- || type           | This must be `resize`                                               || size_gigabytes | The new size of the block storage volume in GiB (1024^3)            || region         | Set to the slug representing the region where the volume is located |Volumes may only be resized upwards. The maximum size for a volume is 16TiB.
 */
export interface ActionsRequestBuilderPostQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsGetResponse}
 */
// @ts-ignore
export function createActionsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Volume_action_post_attach | Volume_action_post_detach | Volume_action_post_resize}
 */
// @ts-ignore
export function createActionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionsPostResponse}
 */
// @ts-ignore
export function createActionsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsGetResponse(actionsGetResponse: Partial<ActionsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actions": n => { actionsGetResponse.actions = n.getCollectionOfObjectValues<VolumeAction>(createVolumeActionFromDiscriminatorValue); },
        "links": n => { actionsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { actionsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostRequestBody(actionsPostRequestBody: Partial<Volume_action_post_attach | Volume_action_post_detach | Volume_action_post_resize> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoVolume_action_post_attach(actionsPostRequestBody as Volume_action_post_attach),
        ...deserializeIntoVolume_action_post_detach(actionsPostRequestBody as Volume_action_post_detach),
        ...deserializeIntoVolume_action_post_resize(actionsPostRequestBody as Volume_action_post_resize),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionsPostResponse(actionsPostResponse: Partial<ActionsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { actionsPostResponse.action = n.getObjectValue<VolumeAction>(createVolumeActionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsGetResponse(writer: SerializationWriter, actionsGetResponse: Partial<ActionsGetResponse> | undefined | null = {}) : void {
    if (actionsGetResponse) {
        writer.writeCollectionOfObjectValues<VolumeAction>("actions", actionsGetResponse.actions, serializeVolumeAction);
        writer.writeObjectValue<Page_links>("links", actionsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", actionsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(actionsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostRequestBody(writer: SerializationWriter, actionsPostRequestBody: Partial<Volume_action_post_attach | Volume_action_post_detach | Volume_action_post_resize> | undefined | null = {}) : void {
    serializeVolume_action_post_attach(writer, actionsPostRequestBody as Volume_action_post_attach);
    serializeVolume_action_post_detach(writer, actionsPostRequestBody as Volume_action_post_detach);
    serializeVolume_action_post_resize(writer, actionsPostRequestBody as Volume_action_post_resize);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionsPostResponse(writer: SerializationWriter, actionsPostResponse: Partial<ActionsPostResponse> | undefined | null = {}) : void {
    if (actionsPostResponse) {
        writer.writeObjectValue<VolumeAction>("action", actionsPostResponse.action, serializeVolumeAction);
        writer.writeAdditionalData(actionsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const ActionsRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/{volume_id}/actions{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ActionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ActionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAction_id: {
        requestsMetadata: WithAction_ItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["action_id"],
    },
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ActionsRequestBuilderPostQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ActionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsGetResponseFromDiscriminatorValue,
        queryParametersMapper: ActionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ActionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createActionsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeActionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: ActionsRequestBuilderPostQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
