/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createSnapshotsFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeSnapshots, type ErrorEscaped, type Meta_properties, type Page_links, type Snapshots } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SnapshotsGetResponse}
 */
// @ts-ignore
export function createSnapshotsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSnapshotsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SnapshotsPostRequestBody}
 */
// @ts-ignore
export function createSnapshotsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSnapshotsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SnapshotsPostResponse}
 */
// @ts-ignore
export function createSnapshotsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSnapshotsPostResponse;
}
/**
 * The deserialization information for the current model
 * @param SnapshotsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSnapshotsGetResponse(snapshotsGetResponse: Partial<SnapshotsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { snapshotsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { snapshotsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "snapshots": n => { snapshotsGetResponse.snapshots = n.getCollectionOfObjectValues<Snapshots>(createSnapshotsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SnapshotsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSnapshotsPostRequestBody(snapshotsPostRequestBody: Partial<SnapshotsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { snapshotsPostRequestBody.name = n.getStringValue(); },
        "tags": n => { snapshotsPostRequestBody.tags = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SnapshotsPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSnapshotsPostResponse(snapshotsPostResponse: Partial<SnapshotsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "snapshot": n => { snapshotsPostResponse.snapshot = n.getObjectValue<Snapshots>(createSnapshotsFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SnapshotsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSnapshotsGetResponse(writer: SerializationWriter, snapshotsGetResponse: Partial<SnapshotsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!snapshotsGetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Page_links>("links", snapshotsGetResponse.links, serializePage_links);
    writer.writeObjectValue<Meta_properties>("meta", snapshotsGetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues<Snapshots>("snapshots", snapshotsGetResponse.snapshots, serializeSnapshots);
    writer.writeAdditionalData(snapshotsGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SnapshotsPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSnapshotsPostRequestBody(writer: SerializationWriter, snapshotsPostRequestBody: Partial<SnapshotsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!snapshotsPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", snapshotsPostRequestBody.name);
    writer.writeCollectionOfPrimitiveValues<string>("tags", snapshotsPostRequestBody.tags);
    writer.writeAdditionalData(snapshotsPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SnapshotsPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSnapshotsPostResponse(writer: SerializationWriter, snapshotsPostResponse: Partial<SnapshotsPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!snapshotsPostResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Snapshots>("snapshot", snapshotsPostResponse.snapshot, serializeSnapshots);
    writer.writeAdditionalData(snapshotsPostResponse.additionalData);
}
export interface SnapshotsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The snapshots property
     */
    snapshots?: Snapshots[] | null;
}
export interface SnapshotsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * A human-readable name for the volume snapshot.
     */
    name?: string | null;
    /**
     * A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags. <br><br>Requires `tag:create` scope.
     */
    tags?: string[] | null;
}
export interface SnapshotsPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * The snapshot property
     */
    snapshot?: Snapshots | null;
}
/**
 * Builds and executes requests for operations under /v2/volumes/{volume_id}/snapshots
 */
export interface SnapshotsRequestBuilder extends BaseRequestBuilder<SnapshotsRequestBuilder> {
    /**
     * To retrieve the snapshots that have been created from a volume, send a GET request to `/v2/volumes/$VOLUME_ID/snapshots`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SnapshotsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : Promise<SnapshotsGetResponse | undefined>;
    /**
     * To create a snapshot from a volume, sent a POST request to `/v2/volumes/$VOLUME_ID/snapshots`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SnapshotsPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 400 status code
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: SnapshotsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SnapshotsPostResponse | undefined>;
    /**
     * To retrieve the snapshots that have been created from a volume, send a GET request to `/v2/volumes/$VOLUME_ID/snapshots`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SnapshotsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * To create a snapshot from a volume, sent a POST request to `/v2/volumes/$VOLUME_ID/snapshots`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SnapshotsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To retrieve the snapshots that have been created from a volume, send a GET request to `/v2/volumes/$VOLUME_ID/snapshots`.
 */
export interface SnapshotsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const SnapshotsRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/{volume_id}/snapshots{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SnapshotsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SnapshotsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SnapshotsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSnapshotsGetResponseFromDiscriminatorValue,
        queryParametersMapper: SnapshotsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SnapshotsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSnapshotsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSnapshotsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
