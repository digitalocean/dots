/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVolume_fullFromDiscriminatorValue, serializeVolume_full } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata } from './actions/index.js';
// @ts-ignore
import { SnapshotsRequestBuilderRequestsMetadata } from './snapshots/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithVolume_GetResponse}
 */
// @ts-ignore
export function createWithVolume_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithVolume_GetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithVolume_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVolume_GetResponse(withVolume_GetResponse = {}) {
    return {
        "volume": n => { withVolume_GetResponse.volume = n.getObjectValue(createVolume_fullFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithVolume_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVolume_GetResponse(writer, withVolume_GetResponse = {}, isSerializingDerivedType = false) {
    if (!withVolume_GetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("volume", withVolume_GetResponse.volume, serializeVolume_full);
    writer.writeAdditionalData(withVolume_GetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithVolume_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/{volume_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithVolume_ItemRequestBuilderNavigationMetadata = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
    snapshots: {
        requestsMetadata: SnapshotsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithVolume_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithVolume_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithVolume_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithVolume_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
