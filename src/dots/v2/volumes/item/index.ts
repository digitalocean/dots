/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createVolume_fullFromDiscriminatorValue, serializeVolume_full, type ErrorEscaped, type Volume_full } from '../../../models/index.js';
// @ts-ignore
import { ActionsRequestBuilderNavigationMetadata, ActionsRequestBuilderRequestsMetadata, type ActionsRequestBuilder } from './actions/index.js';
// @ts-ignore
import { SnapshotsRequestBuilderRequestsMetadata, type SnapshotsRequestBuilder } from './snapshots/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithVolume_GetResponse}
 */
// @ts-ignore
export function createWithVolume_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithVolume_GetResponse;
}
/**
 * The deserialization information for the current model
 * @param WithVolume_GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVolume_GetResponse(withVolume_GetResponse: Partial<WithVolume_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "volume": n => { withVolume_GetResponse.volume = n.getObjectValue<Volume_full>(createVolume_fullFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithVolume_GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVolume_GetResponse(writer: SerializationWriter, withVolume_GetResponse: Partial<WithVolume_GetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!withVolume_GetResponse || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Volume_full>("volume", withVolume_GetResponse.volume, serializeVolume_full);
    writer.writeAdditionalData(withVolume_GetResponse.additionalData);
}
export interface WithVolume_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The volume property
     */
    volume?: Volume_full | null;
}
/**
 * Builds and executes requests for operations under /v2/volumes/{volume_id}
 */
export interface WithVolume_ItemRequestBuilder extends BaseRequestBuilder<WithVolume_ItemRequestBuilder> {
    /**
     * The actions property
     */
    get actions(): ActionsRequestBuilder;
    /**
     * The snapshots property
     */
    get snapshots(): SnapshotsRequestBuilder;
    /**
     * To delete a block storage volume, destroying all data and removing it from your account, send a DELETE request to `/v2/volumes/$VOLUME_ID`.No response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about a block storage volume, send a GET request to `/v2/volumes/$VOLUME_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithVolume_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithVolume_GetResponse | undefined>;
    /**
     * To delete a block storage volume, destroying all data and removing it from your account, send a DELETE request to `/v2/volumes/$VOLUME_ID`.No response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about a block storage volume, send a GET request to `/v2/volumes/$VOLUME_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithVolume_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/volumes/{volume_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithVolume_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithVolume_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    actions: {
        requestsMetadata: ActionsRequestBuilderRequestsMetadata,
        navigationMetadata: ActionsRequestBuilderNavigationMetadata,
    },
    snapshots: {
        requestsMetadata: SnapshotsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithVolume_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithVolume_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithVolume_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithVolume_GetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
