/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, serializeCluster_registries, type Cluster_registries, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/kubernetes/registries
 */
export interface RegistriesRequestBuilder extends BaseRequestBuilder<RegistriesRequestBuilder> {
    /**
     * To remove the container registries from Kubernetes clusters, send a DELETE request to `/v2/kubernetes/registries`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(body: Cluster_registries, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To integrate the container registries with Kubernetes clusters, send a POST request to `/v2/kubernetes/registries`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Cluster_registries, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To remove the container registries from Kubernetes clusters, send a DELETE request to `/v2/kubernetes/registries`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: Cluster_registries, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To integrate the container registries with Kubernetes clusters, send a POST request to `/v2/kubernetes/registries`.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Cluster_registries, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const RegistriesRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/registries";
/**
 * Metadata for all the requests in the request builder.
 */
export const RegistriesRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RegistriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCluster_registries,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: RegistriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCluster_registries,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
