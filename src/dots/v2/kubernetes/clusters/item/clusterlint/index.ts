/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createClusterlint_resultsFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeClusterlint_request, type Clusterlint_request, type Clusterlint_results, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ClusterlintPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ID of the clusterlint run that can be used later to fetch the diagnostics.
     */
    runId?: string | null;
}
/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/clusterlint
 */
export interface ClusterlintRequestBuilder extends BaseRequestBuilder<ClusterlintRequestBuilder> {
    /**
     * To request clusterlint diagnostics for your cluster, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. If the `run_id` queryparameter is provided, then the diagnostics for the specific run is fetched.By default, the latest results are shown.To find out how to address clusterlint feedback, please refer to[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Clusterlint_results>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ClusterlintRequestBuilderGetQueryParameters> | undefined) : Promise<Clusterlint_results | undefined>;
    /**
     * Clusterlint helps operators conform to Kubernetes best practices aroundresources, security and reliability to avoid common problems while operatingor upgrading the clusters.To request a clusterlint run on your cluster, send a POST request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. This will run allchecks present in the `doks` group by default, if a request body is notspecified. Optionally specify the below attributes.For information about the available checks, please refer to[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ClusterlintPostResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Clusterlint_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ClusterlintPostResponse | undefined>;
    /**
     * To request clusterlint diagnostics for your cluster, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. If the `run_id` queryparameter is provided, then the diagnostics for the specific run is fetched.By default, the latest results are shown.To find out how to address clusterlint feedback, please refer to[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ClusterlintRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Clusterlint helps operators conform to Kubernetes best practices aroundresources, security and reliability to avoid common problems while operatingor upgrading the clusters.To request a clusterlint run on your cluster, send a POST request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. This will run allchecks present in the `doks` group by default, if a request body is notspecified. Optionally specify the below attributes.For information about the available checks, please refer to[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Clusterlint_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * To request clusterlint diagnostics for your cluster, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. If the `run_id` queryparameter is provided, then the diagnostics for the specific run is fetched.By default, the latest results are shown.To find out how to address clusterlint feedback, please refer to[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).
 */
export interface ClusterlintRequestBuilderGetQueryParameters {
    /**
     * Specifies the clusterlint run whose results will be retrieved.
     */
    runId?: Guid;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClusterlintPostResponse}
 */
// @ts-ignore
export function createClusterlintPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClusterlintPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoClusterlintPostResponse(clusterlintPostResponse: Partial<ClusterlintPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "run_id": n => { clusterlintPostResponse.runId = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeClusterlintPostResponse(writer: SerializationWriter, clusterlintPostResponse: Partial<ClusterlintPostResponse> | undefined | null = {}) : void {
    if (clusterlintPostResponse) {
        writer.writeStringValue("run_id", clusterlintPostResponse.runId);
        writer.writeAdditionalData(clusterlintPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const ClusterlintRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/clusterlint{?run_id*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ClusterlintRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "runId": "run_id",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ClusterlintRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ClusterlintRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createClusterlint_resultsFromDiscriminatorValue,
        queryParametersMapper: ClusterlintRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ClusterlintRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createClusterlintPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeClusterlint_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
