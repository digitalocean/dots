/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCluster_readFromDiscriminatorValue, createClusterFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeCluster, serializeCluster_read, serializeCluster_update } from '../../../../models/index.js';
// @ts-ignore
import { ClusterlintRequestBuilderRequestsMetadata } from './clusterlint/index.js';
// @ts-ignore
import { CredentialsRequestBuilderRequestsMetadata } from './credentials/index.js';
// @ts-ignore
import { Destroy_with_associated_resourcesRequestBuilderNavigationMetadata, Destroy_with_associated_resourcesRequestBuilderRequestsMetadata } from './destroy_with_associated_resources/index.js';
// @ts-ignore
import { KubeconfigRequestBuilderRequestsMetadata } from './kubeconfig/index.js';
// @ts-ignore
import { Node_poolsRequestBuilderNavigationMetadata, Node_poolsRequestBuilderRequestsMetadata } from './node_pools/index.js';
// @ts-ignore
import { Status_messagesRequestBuilderRequestsMetadata } from './status_messages/index.js';
// @ts-ignore
import { UpgradeRequestBuilderRequestsMetadata } from './upgrade/index.js';
// @ts-ignore
import { UpgradesRequestBuilderRequestsMetadata } from './upgrades/index.js';
// @ts-ignore
import { UserRequestBuilderRequestsMetadata } from './user/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCluster_GetResponse}
 */
// @ts-ignore
export function createWithCluster_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithCluster_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCluster_PutResponse}
 */
// @ts-ignore
export function createWithCluster_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithCluster_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCluster_GetResponse(withCluster_GetResponse = {}) {
    return {
        "kubernetes_cluster": n => { withCluster_GetResponse.kubernetesCluster = n.getObjectValue(createCluster_readFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCluster_PutResponse(withCluster_PutResponse = {}) {
    return {
        "kubernetes_cluster": n => { withCluster_PutResponse.kubernetesCluster = n.getObjectValue(createClusterFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCluster_GetResponse(writer, withCluster_GetResponse = {}) {
    if (withCluster_GetResponse) {
        writer.writeObjectValue("kubernetes_cluster", withCluster_GetResponse.kubernetesCluster, serializeCluster_read);
        writer.writeAdditionalData(withCluster_GetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCluster_PutResponse(writer, withCluster_PutResponse = {}) {
    if (withCluster_PutResponse) {
        writer.writeObjectValue("kubernetes_cluster", withCluster_PutResponse.kubernetesCluster, serializeCluster);
        writer.writeAdditionalData(withCluster_PutResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithCluster_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithCluster_ItemRequestBuilderNavigationMetadata = {
    clusterlint: {
        requestsMetadata: ClusterlintRequestBuilderRequestsMetadata,
    },
    credentials: {
        requestsMetadata: CredentialsRequestBuilderRequestsMetadata,
    },
    destroy_with_associated_resources: {
        requestsMetadata: Destroy_with_associated_resourcesRequestBuilderRequestsMetadata,
        navigationMetadata: Destroy_with_associated_resourcesRequestBuilderNavigationMetadata,
    },
    kubeconfig: {
        requestsMetadata: KubeconfigRequestBuilderRequestsMetadata,
    },
    node_pools: {
        requestsMetadata: Node_poolsRequestBuilderRequestsMetadata,
        navigationMetadata: Node_poolsRequestBuilderNavigationMetadata,
    },
    status_messages: {
        requestsMetadata: Status_messagesRequestBuilderRequestsMetadata,
    },
    upgrade: {
        requestsMetadata: UpgradeRequestBuilderRequestsMetadata,
    },
    upgrades: {
        requestsMetadata: UpgradesRequestBuilderRequestsMetadata,
    },
    user: {
        requestsMetadata: UserRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCluster_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithCluster_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCluster_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithCluster_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithCluster_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithCluster_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCluster_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
