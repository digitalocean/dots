/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, serializeDestroy_associated_kubernetes_resources, type Destroy_associated_kubernetes_resources, type ErrorEscaped } from '../../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/selective
 */
export interface SelectiveRequestBuilder extends BaseRequestBuilder<SelectiveRequestBuilder> {
    /**
     * To delete a Kubernetes cluster along with a subset of its associated resources,send a DELETE request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources/selective`.The JSON body of the request should include `load_balancers`, `volumes`, or`volume_snapshots` keys each set to an array of IDs for the associatedresources to be destroyed.The IDs can be found by querying the cluster's associated resources endpoint.Any associated resource not included in the request will remain and continueto accrue changes on your account.
     * @param body An object containing the IDs of resources to be destroyed along with their associated with a Kubernetes cluster.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(body: Destroy_associated_kubernetes_resources, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To delete a Kubernetes cluster along with a subset of its associated resources,send a DELETE request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources/selective`.The JSON body of the request should include `load_balancers`, `volumes`, or`volume_snapshots` keys each set to an array of IDs for the associatedresources to be destroyed.The IDs can be found by querying the cluster's associated resources endpoint.Any associated resource not included in the request will remain and continueto accrue changes on your account.
     * @param body An object containing the IDs of resources to be destroyed along with their associated with a Kubernetes cluster.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: Destroy_associated_kubernetes_resources, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SelectiveRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/selective";
/**
 * Metadata for all the requests in the request builder.
 */
export const SelectiveRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SelectiveRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDestroy_associated_kubernetes_resources,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
