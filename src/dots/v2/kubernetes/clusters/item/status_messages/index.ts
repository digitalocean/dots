/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createStatus_messagesFromDiscriminatorValue, serializeStatus_messages, type ErrorEscaped, type Status_messages } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Status_messagesGetResponse}
 */
// @ts-ignore
export function createStatus_messagesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStatus_messagesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStatus_messagesGetResponse(status_messagesGetResponse: Partial<Status_messagesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "messages": n => { status_messagesGetResponse.messages = n.getCollectionOfObjectValues<Status_messages>(createStatus_messagesFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStatus_messagesGetResponse(writer: SerializationWriter, status_messagesGetResponse: Partial<Status_messagesGetResponse> | undefined | null = {}) : void {
    if (status_messagesGetResponse) {
        writer.writeCollectionOfObjectValues<Status_messages>("messages", status_messagesGetResponse.messages, serializeStatus_messages);
    }
}
export interface Status_messagesGetResponse extends Parsable {
    /**
     * The messages property
     */
    messages?: Status_messages[] | null;
}
/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/status_messages
 */
export interface Status_messagesRequestBuilder extends BaseRequestBuilder<Status_messagesRequestBuilder> {
    /**
     * To retrieve status messages for a Kubernetes cluster, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/status_messages`. Status messages inform users of any issues that come up during the cluster lifecycle.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Status_messagesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<Status_messagesRequestBuilderGetQueryParameters> | undefined) : Promise<Status_messagesGetResponse | undefined>;
    /**
     * To retrieve status messages for a Kubernetes cluster, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/status_messages`. Status messages inform users of any issues that come up during the cluster lifecycle.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Status_messagesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To retrieve status messages for a Kubernetes cluster, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/status_messages`. Status messages inform users of any issues that come up during the cluster lifecycle.
 */
export interface Status_messagesRequestBuilderGetQueryParameters {
    /**
     * A timestamp used to return status messages emitted since the specified time. The timestamp should be in ISO8601 format.
     */
    since?: Date;
}
/**
 * Uri template for the request builder.
 */
export const Status_messagesRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/status_messages{?since*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const Status_messagesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Status_messagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createStatus_messagesGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
