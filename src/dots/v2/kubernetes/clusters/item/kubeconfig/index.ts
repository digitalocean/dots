/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/kubeconfig
 */
export interface KubeconfigRequestBuilder extends BaseRequestBuilder<KubeconfigRequestBuilder> {
    /**
     * This endpoint returns a kubeconfig file in YAML format. It can be used toconnect to and administer the cluster using the Kubernetes command line tool,`kubectl`, or other programs supporting kubeconfig files (e.g., client libraries).The resulting kubeconfig file uses token-based authentication for clusterssupporting it, and certificate-based authentication otherwise. For a list ofsupported versions and more information, see "[How to Connect to a DigitalOceanKubernetes Cluster](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/)".To retrieve a kubeconfig file for use with a Kubernetes cluster, send a GETrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig`.Clusters supporting token-based authentication may define an expiration bypassing a duration in seconds as a query parameter to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig?expiry_seconds=$DURATION_IN_SECONDS`.If not set or 0, then the token will have a 7 day expiry. The query parameterhas no impact in certificate-based authentication.Kubernetes Roles granted to a user with a token-based kubeconfig are derived from that user'sDigitalOcean role. Predefined roles (Owner, Member, Modifier etc.) have an automatic mappingto Kubernetes roles. Custom roles are not automatically mapped to any Kubernetes roles,and require [additional configuration](https://docs.digitalocean.com/products/kubernetes/how-to/set-up-custom-rolebindings/)by a cluster administrator.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<KubeconfigRequestBuilderGetQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * This endpoint returns a kubeconfig file in YAML format. It can be used toconnect to and administer the cluster using the Kubernetes command line tool,`kubectl`, or other programs supporting kubeconfig files (e.g., client libraries).The resulting kubeconfig file uses token-based authentication for clusterssupporting it, and certificate-based authentication otherwise. For a list ofsupported versions and more information, see "[How to Connect to a DigitalOceanKubernetes Cluster](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/)".To retrieve a kubeconfig file for use with a Kubernetes cluster, send a GETrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig`.Clusters supporting token-based authentication may define an expiration bypassing a duration in seconds as a query parameter to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig?expiry_seconds=$DURATION_IN_SECONDS`.If not set or 0, then the token will have a 7 day expiry. The query parameterhas no impact in certificate-based authentication.Kubernetes Roles granted to a user with a token-based kubeconfig are derived from that user'sDigitalOcean role. Predefined roles (Owner, Member, Modifier etc.) have an automatic mappingto Kubernetes roles. Custom roles are not automatically mapped to any Kubernetes roles,and require [additional configuration](https://docs.digitalocean.com/products/kubernetes/how-to/set-up-custom-rolebindings/)by a cluster administrator.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<KubeconfigRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * This endpoint returns a kubeconfig file in YAML format. It can be used toconnect to and administer the cluster using the Kubernetes command line tool,`kubectl`, or other programs supporting kubeconfig files (e.g., client libraries).The resulting kubeconfig file uses token-based authentication for clusterssupporting it, and certificate-based authentication otherwise. For a list ofsupported versions and more information, see "[How to Connect to a DigitalOceanKubernetes Cluster](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/)".To retrieve a kubeconfig file for use with a Kubernetes cluster, send a GETrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig`.Clusters supporting token-based authentication may define an expiration bypassing a duration in seconds as a query parameter to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig?expiry_seconds=$DURATION_IN_SECONDS`.If not set or 0, then the token will have a 7 day expiry. The query parameterhas no impact in certificate-based authentication.Kubernetes Roles granted to a user with a token-based kubeconfig are derived from that user'sDigitalOcean role. Predefined roles (Owner, Member, Modifier etc.) have an automatic mappingto Kubernetes roles. Custom roles are not automatically mapped to any Kubernetes roles,and require [additional configuration](https://docs.digitalocean.com/products/kubernetes/how-to/set-up-custom-rolebindings/)by a cluster administrator.
 */
export interface KubeconfigRequestBuilderGetQueryParameters {
    /**
     * The duration in seconds that the returned Kubernetes credentials will be valid. If not set or 0, the credentials will have a 7 day expiry.
     */
    expirySeconds?: number;
}
/**
 * Uri template for the request builder.
 */
export const KubeconfigRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/kubeconfig{?expiry_seconds*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const KubeconfigRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expirySeconds": "expiry_seconds",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KubeconfigRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: KubeconfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/yaml, application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        queryParametersMapper: KubeconfigRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
