/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecyclePostRequestBody}
 */
// @ts-ignore
export function createRecyclePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecyclePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRecyclePostRequestBody(recyclePostRequestBody: Partial<RecyclePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nodes": n => { recyclePostRequestBody.nodes = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface RecyclePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The nodes property
     */
    nodes?: string[] | null;
}
/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/recycle
 */
export interface RecycleRequestBuilder extends BaseRequestBuilder<RecycleRequestBuilder> {
    /**
     * The endpoint has been deprecated. Please use the DELETE`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`method instead.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     * @deprecated 
     */
     post(body: RecyclePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The endpoint has been deprecated. Please use the DELETE`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`method instead.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated 
     */
     toPostRequestInformation(body: RecyclePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRecyclePostRequestBody(writer: SerializationWriter, recyclePostRequestBody: Partial<RecyclePostRequestBody> | undefined | null = {}) : void {
    if (recyclePostRequestBody) {
        writer.writeCollectionOfPrimitiveValues<string>("nodes", recyclePostRequestBody.nodes);
        writer.writeAdditionalData(recyclePostRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const RecycleRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/recycle";
/**
 * Metadata for all the requests in the request builder.
 */
export const RecycleRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: RecycleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRecyclePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
