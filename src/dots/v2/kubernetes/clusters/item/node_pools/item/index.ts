/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKubernetes_node_poolFromDiscriminatorValue, serializeKubernetes_node_pool, serializeKubernetes_node_pool_update, type ErrorEscaped, type Kubernetes_node_pool, type Kubernetes_node_pool_update } from '../../../../../../models/index.js';
// @ts-ignore
import { NodesRequestBuilderNavigationMetadata, type NodesRequestBuilder } from './nodes/index.js';
// @ts-ignore
import { RecycleRequestBuilderRequestsMetadata, type RecycleRequestBuilder } from './recycle/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithNode_pool_GetResponse}
 */
// @ts-ignore
export function createWithNode_pool_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithNode_pool_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithNode_pool_PutResponse}
 */
// @ts-ignore
export function createWithNode_pool_PutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithNode_pool_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithNode_pool_GetResponse(withNode_pool_GetResponse: Partial<WithNode_pool_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "node_pool": n => { withNode_pool_GetResponse.nodePool = n.getObjectValue<Kubernetes_node_pool>(createKubernetes_node_poolFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithNode_pool_PutResponse(withNode_pool_PutResponse: Partial<WithNode_pool_PutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "node_pool": n => { withNode_pool_PutResponse.nodePool = n.getObjectValue<Kubernetes_node_pool>(createKubernetes_node_poolFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithNode_pool_GetResponse(writer: SerializationWriter, withNode_pool_GetResponse: Partial<WithNode_pool_GetResponse> | undefined | null = {}) : void {
    if (withNode_pool_GetResponse) {
        writer.writeObjectValue<Kubernetes_node_pool>("node_pool", withNode_pool_GetResponse.nodePool, serializeKubernetes_node_pool);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithNode_pool_PutResponse(writer: SerializationWriter, withNode_pool_PutResponse: Partial<WithNode_pool_PutResponse> | undefined | null = {}) : void {
    if (withNode_pool_PutResponse) {
        writer.writeObjectValue<Kubernetes_node_pool>("node_pool", withNode_pool_PutResponse.nodePool, serializeKubernetes_node_pool);
    }
}
export interface WithNode_pool_GetResponse extends Parsable {
    /**
     * The node_pool property
     */
    nodePool?: Kubernetes_node_pool | null;
}
/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}
 */
export interface WithNode_pool_ItemRequestBuilder extends BaseRequestBuilder<WithNode_pool_ItemRequestBuilder> {
    /**
     * The nodes property
     */
    get nodes(): NodesRequestBuilder;
    /**
     * The recycle property
     */
    get recycle(): RecycleRequestBuilder;
    /**
     * To delete a node pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.A 204 status code with no body will be returned in response to a successfulrequest. Nodes in the pool will subsequently be drained and deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about a specific node pool in a Kubernetes cluster, senda GET request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithNode_pool_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithNode_pool_GetResponse | undefined>;
    /**
     * To update the name of a node pool, edit the tags applied to it, or adjust itsnumber of nodes, send a PUT request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID` with thefollowing attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithNode_pool_PutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Kubernetes_node_pool_update, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithNode_pool_PutResponse | undefined>;
    /**
     * To delete a node pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.A 204 status code with no body will be returned in response to a successfulrequest. Nodes in the pool will subsequently be drained and deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about a specific node pool in a Kubernetes cluster, senda GET request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update the name of a node pool, edit the tags applied to it, or adjust itsnumber of nodes, send a PUT request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID` with thefollowing attributes.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Kubernetes_node_pool_update, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithNode_pool_PutResponse extends Parsable {
    /**
     * The node_pool property
     */
    nodePool?: Kubernetes_node_pool | null;
}
/**
 * Uri template for the request builder.
 */
export const WithNode_pool_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithNode_pool_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithNode_pool_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    nodes: {
        navigationMetadata: NodesRequestBuilderNavigationMetadata,
    },
    recycle: {
        requestsMetadata: RecycleRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithNode_pool_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithNode_pool_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithNode_pool_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithNode_pool_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithNode_pool_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithNode_pool_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKubernetes_node_pool_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
