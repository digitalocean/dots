/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}
 */
export interface WithNode_ItemRequestBuilder extends BaseRequestBuilder<WithNode_ItemRequestBuilder> {
    /**
     * To delete a single node in a pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.Appending the `skip_drain=1` query parameter to the request causes nodedraining to be skipped. Omitting the query parameter or setting its value to`0` carries out draining prior to deletion.Appending the `replace=1` query parameter to the request causes the node tobe replaced by a new one after deletion. Omitting the query parameter orsetting its value to `0` deletes without replacement.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<WithNode_ItemRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * To delete a single node in a pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.Appending the `skip_drain=1` query parameter to the request causes nodedraining to be skipped. Omitting the query parameter or setting its value to`0` carries out draining prior to deletion.Appending the `replace=1` query parameter to the request causes the node tobe replaced by a new one after deletion. Omitting the query parameter orsetting its value to `0` deletes without replacement.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<WithNode_ItemRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
}
/**
 * To delete a single node in a pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.Appending the `skip_drain=1` query parameter to the request causes nodedraining to be skipped. Omitting the query parameter or setting its value to`0` carries out draining prior to deletion.Appending the `replace=1` query parameter to the request causes the node tobe replaced by a new one after deletion. Omitting the query parameter orsetting its value to `0` deletes without replacement.
 */
export interface WithNode_ItemRequestBuilderDeleteQueryParameters {
    /**
     * Specifies whether or not to replace a node after it has been deleted. Setting it to `1` causes the node to be replaced by a new one after deletion. Omitting the query parameter or setting its value to `0` deletes without replacement.
     */
    replace?: number;
    /**
     * Specifies whether or not to drain workloads from a node before it is deleted. Setting it to `1` causes node draining to be skipped. Omitting the query parameter or setting its value to `0` carries out draining prior to deletion.
     */
    skipDrain?: number;
}
/**
 * Uri template for the request builder.
 */
export const WithNode_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}{?replace*,skip_drain*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithNode_ItemRequestBuilderDeleteQueryParametersMapper: Record<string, string> = {
    "skipDrain": "skip_drain",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithNode_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithNode_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        queryParametersMapper: WithNode_ItemRequestBuilderDeleteQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
