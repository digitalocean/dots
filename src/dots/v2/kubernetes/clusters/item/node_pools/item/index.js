/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKubernetes_node_poolFromDiscriminatorValue, serializeKubernetes_node_pool, serializeKubernetes_node_pool_update } from '../../../../../../models/index.js';
// @ts-ignore
import { NodesRequestBuilderNavigationMetadata } from './nodes/index.js';
// @ts-ignore
import { RecycleRequestBuilderRequestsMetadata } from './recycle/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithNode_pool_GetResponse}
 */
// @ts-ignore
export function createWithNode_pool_GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithNode_pool_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithNode_pool_PutResponse}
 */
// @ts-ignore
export function createWithNode_pool_PutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithNode_pool_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithNode_pool_GetResponse(withNode_pool_GetResponse = {}) {
    return {
        "node_pool": n => { withNode_pool_GetResponse.nodePool = n.getObjectValue(createKubernetes_node_poolFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithNode_pool_PutResponse(withNode_pool_PutResponse = {}) {
    return {
        "node_pool": n => { withNode_pool_PutResponse.nodePool = n.getObjectValue(createKubernetes_node_poolFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithNode_pool_GetResponse(writer, withNode_pool_GetResponse = {}) {
    if (withNode_pool_GetResponse) {
        writer.writeObjectValue("node_pool", withNode_pool_GetResponse.nodePool, serializeKubernetes_node_pool);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithNode_pool_PutResponse(writer, withNode_pool_PutResponse = {}) {
    if (withNode_pool_PutResponse) {
        writer.writeObjectValue("node_pool", withNode_pool_PutResponse.nodePool, serializeKubernetes_node_pool);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithNode_pool_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithNode_pool_ItemRequestBuilderNavigationMetadata = {
    nodes: {
        navigationMetadata: NodesRequestBuilderNavigationMetadata,
    },
    recycle: {
        requestsMetadata: RecycleRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithNode_pool_ItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithNode_pool_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithNode_pool_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithNode_pool_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithNode_pool_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithNode_pool_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKubernetes_node_pool_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
