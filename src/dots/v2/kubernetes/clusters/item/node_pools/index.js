/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKubernetes_node_poolFromDiscriminatorValue, serializeKubernetes_node_pool } from '../../../../../models/index.js';
// @ts-ignore
import { WithNode_pool_ItemRequestBuilderNavigationMetadata, WithNode_pool_ItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Node_poolsGetResponse}
 */
// @ts-ignore
export function createNode_poolsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoNode_poolsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Node_poolsPostResponse}
 */
// @ts-ignore
export function createNode_poolsPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoNode_poolsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNode_poolsGetResponse(node_poolsGetResponse = {}) {
    return {
        "node_pools": n => { node_poolsGetResponse.nodePools = n.getCollectionOfObjectValues(createKubernetes_node_poolFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNode_poolsPostResponse(node_poolsPostResponse = {}) {
    return {
        "node_pool": n => { node_poolsPostResponse.nodePool = n.getObjectValue(createKubernetes_node_poolFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNode_poolsGetResponse(writer, node_poolsGetResponse = {}) {
    if (node_poolsGetResponse) {
        writer.writeCollectionOfObjectValues("node_pools", node_poolsGetResponse.nodePools, serializeKubernetes_node_pool);
        writer.writeAdditionalData(node_poolsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNode_poolsPostResponse(writer, node_poolsPostResponse = {}) {
    if (node_poolsPostResponse) {
        writer.writeObjectValue("node_pool", node_poolsPostResponse.nodePool, serializeKubernetes_node_pool);
        writer.writeAdditionalData(node_poolsPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const Node_poolsRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Node_poolsRequestBuilderNavigationMetadata = {
    byNode_pool_id: {
        requestsMetadata: WithNode_pool_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithNode_pool_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["node_pool_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Node_poolsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: Node_poolsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createNode_poolsGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: Node_poolsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createNode_poolsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeKubernetes_node_pool,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
