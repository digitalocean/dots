/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCluster_readFromDiscriminatorValue, createClusterFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeCluster, serializeCluster_read, serializeCluster_update, type Cluster, type Cluster_read, type Cluster_update, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { ClusterlintRequestBuilderRequestsMetadata, type ClusterlintRequestBuilder } from './clusterlint/index.js';
// @ts-ignore
import { CredentialsRequestBuilderRequestsMetadata, type CredentialsRequestBuilder } from './credentials/index.js';
// @ts-ignore
import { Destroy_with_associated_resourcesRequestBuilderNavigationMetadata, Destroy_with_associated_resourcesRequestBuilderRequestsMetadata, type Destroy_with_associated_resourcesRequestBuilder } from './destroy_with_associated_resources/index.js';
// @ts-ignore
import { KubeconfigRequestBuilderRequestsMetadata, type KubeconfigRequestBuilder } from './kubeconfig/index.js';
// @ts-ignore
import { Node_poolsRequestBuilderNavigationMetadata, Node_poolsRequestBuilderRequestsMetadata, type Node_poolsRequestBuilder } from './node_pools/index.js';
// @ts-ignore
import { Status_messagesRequestBuilderRequestsMetadata, type Status_messagesRequestBuilder } from './status_messages/index.js';
// @ts-ignore
import { type UpgradeRequestBuilder, UpgradeRequestBuilderRequestsMetadata } from './upgrade/index.js';
// @ts-ignore
import { type UpgradesRequestBuilder, UpgradesRequestBuilderRequestsMetadata } from './upgrades/index.js';
// @ts-ignore
import { type UserRequestBuilder, UserRequestBuilderRequestsMetadata } from './user/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCluster_GetResponse}
 */
// @ts-ignore
export function createWithCluster_GetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCluster_GetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithCluster_PutResponse}
 */
// @ts-ignore
export function createWithCluster_PutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithCluster_PutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCluster_GetResponse(withCluster_GetResponse: Partial<WithCluster_GetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "kubernetes_cluster": n => { withCluster_GetResponse.kubernetesCluster = n.getObjectValue<Cluster_read>(createCluster_readFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithCluster_PutResponse(withCluster_PutResponse: Partial<WithCluster_PutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "kubernetes_cluster": n => { withCluster_PutResponse.kubernetesCluster = n.getObjectValue<Cluster>(createClusterFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCluster_GetResponse(writer: SerializationWriter, withCluster_GetResponse: Partial<WithCluster_GetResponse> | undefined | null = {}) : void {
    if (withCluster_GetResponse) {
        writer.writeObjectValue<Cluster_read>("kubernetes_cluster", withCluster_GetResponse.kubernetesCluster, serializeCluster_read);
        writer.writeAdditionalData(withCluster_GetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithCluster_PutResponse(writer: SerializationWriter, withCluster_PutResponse: Partial<WithCluster_PutResponse> | undefined | null = {}) : void {
    if (withCluster_PutResponse) {
        writer.writeObjectValue<Cluster>("kubernetes_cluster", withCluster_PutResponse.kubernetesCluster, serializeCluster);
        writer.writeAdditionalData(withCluster_PutResponse.additionalData);
    }
}
export interface WithCluster_GetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The kubernetes_cluster property
     */
    kubernetesCluster?: Cluster_read | null;
}
/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}
 */
export interface WithCluster_ItemRequestBuilder extends BaseRequestBuilder<WithCluster_ItemRequestBuilder> {
    /**
     * The clusterlint property
     */
    get clusterlint(): ClusterlintRequestBuilder;
    /**
     * The credentials property
     */
    get credentials(): CredentialsRequestBuilder;
    /**
     * The destroy_with_associated_resources property
     */
    get destroy_with_associated_resources(): Destroy_with_associated_resourcesRequestBuilder;
    /**
     * The kubeconfig property
     */
    get kubeconfig(): KubeconfigRequestBuilder;
    /**
     * The node_pools property
     */
    get node_pools(): Node_poolsRequestBuilder;
    /**
     * The status_messages property
     */
    get status_messages(): Status_messagesRequestBuilder;
    /**
     * The upgrade property
     */
    get upgrade(): UpgradeRequestBuilder;
    /**
     * The upgrades property
     */
    get upgrades(): UpgradesRequestBuilder;
    /**
     * The user property
     */
    get user(): UserRequestBuilder;
    /**
     * To delete a Kubernetes cluster and all services deployed to it, send a DELETErequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.A 204 status code with no body will be returned in response to a successfulrequest.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To show information about an existing Kubernetes cluster, send a GET requestto `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCluster_GetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCluster_GetResponse | undefined>;
    /**
     * To update a Kubernetes cluster, send a PUT request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID` and specify one or more of theattributes below.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithCluster_PutResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Cluster_update, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithCluster_PutResponse | undefined>;
    /**
     * To delete a Kubernetes cluster and all services deployed to it, send a DELETErequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.A 204 status code with no body will be returned in response to a successfulrequest.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To show information about an existing Kubernetes cluster, send a GET requestto `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To update a Kubernetes cluster, send a PUT request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID` and specify one or more of theattributes below.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Cluster_update, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithCluster_PutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The kubernetes_cluster property
     */
    kubernetesCluster?: Cluster | null;
}
/**
 * Uri template for the request builder.
 */
export const WithCluster_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithCluster_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithCluster_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    clusterlint: {
        requestsMetadata: ClusterlintRequestBuilderRequestsMetadata,
    },
    credentials: {
        requestsMetadata: CredentialsRequestBuilderRequestsMetadata,
    },
    destroy_with_associated_resources: {
        requestsMetadata: Destroy_with_associated_resourcesRequestBuilderRequestsMetadata,
        navigationMetadata: Destroy_with_associated_resourcesRequestBuilderNavigationMetadata,
    },
    kubeconfig: {
        requestsMetadata: KubeconfigRequestBuilderRequestsMetadata,
    },
    node_pools: {
        requestsMetadata: Node_poolsRequestBuilderRequestsMetadata,
        navigationMetadata: Node_poolsRequestBuilderNavigationMetadata,
    },
    status_messages: {
        requestsMetadata: Status_messagesRequestBuilderRequestsMetadata,
    },
    upgrade: {
        requestsMetadata: UpgradeRequestBuilderRequestsMetadata,
    },
    upgrades: {
        requestsMetadata: UpgradesRequestBuilderRequestsMetadata,
    },
    user: {
        requestsMetadata: UserRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithCluster_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithCluster_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithCluster_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCluster_GetResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: WithCluster_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithCluster_PutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCluster_update,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
