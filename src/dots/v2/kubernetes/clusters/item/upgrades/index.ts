/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createKubernetes_versionFromDiscriminatorValue, serializeKubernetes_version, type ErrorEscaped, type Kubernetes_version } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpgradesGetResponse}
 */
// @ts-ignore
export function createUpgradesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpgradesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpgradesGetResponse(upgradesGetResponse: Partial<UpgradesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "available_upgrade_versions": n => { upgradesGetResponse.availableUpgradeVersions = n.getCollectionOfObjectValues<Kubernetes_version>(createKubernetes_versionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpgradesGetResponse(writer: SerializationWriter, upgradesGetResponse: Partial<UpgradesGetResponse> | undefined | null = {}) : void {
    if (upgradesGetResponse) {
        writer.writeCollectionOfObjectValues<Kubernetes_version>("available_upgrade_versions", upgradesGetResponse.availableUpgradeVersions, serializeKubernetes_version);
    }
}
export interface UpgradesGetResponse extends Parsable {
    /**
     * The available_upgrade_versions property
     */
    availableUpgradeVersions?: Kubernetes_version[] | null;
}
/**
 * Builds and executes requests for operations under /v2/kubernetes/clusters/{cluster_id}/upgrades
 */
export interface UpgradesRequestBuilder extends BaseRequestBuilder<UpgradesRequestBuilder> {
    /**
     * To determine whether a cluster can be upgraded, and the versions to which itcan be upgraded, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrades`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UpgradesGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UpgradesGetResponse | undefined>;
    /**
     * To determine whether a cluster can be upgraded, and the versions to which itcan be upgraded, send a GET request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrades`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UpgradesRequestBuilderUriTemplate = "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/upgrades";
/**
 * Metadata for all the requests in the request builder.
 */
export const UpgradesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UpgradesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUpgradesGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
