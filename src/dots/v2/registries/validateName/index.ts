/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, serializeValidate_registry, type ErrorEscaped, type Validate_registry } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/registries/validate-name
 */
export interface ValidateNameRequestBuilder extends BaseRequestBuilder<ValidateNameRequestBuilder> {
    /**
     * To validate that a container registry name is available for use, send a POSTrequest to `/v2/registries/validate-name`.If the name is both formatted correctly and available, the response code willbe 204 and contain no body. If the name is already in use, the response willbe a 409 Conflict. It is similar to `/v2/registry/validate-name` and exists for backward compatibility.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 409 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Validate_registry, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To validate that a container registry name is available for use, send a POSTrequest to `/v2/registries/validate-name`.If the name is both formatted correctly and available, the response code willbe 204 and contain no body. If the name is already in use, the response willbe a 409 Conflict. It is similar to `/v2/registry/validate-name` and exists for backward compatibility.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Validate_registry, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ValidateNameRequestBuilderUriTemplate = "{+baseurl}/v2/registries/validate-name";
/**
 * Metadata for all the requests in the request builder.
 */
export const ValidateNameRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ValidateNameRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeValidate_registry,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
