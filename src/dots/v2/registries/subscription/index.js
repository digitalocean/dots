/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createSubscriptionFromDiscriminatorValue, serializeSubscription } from '../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionGetResponse}
 */
// @ts-ignore
export function createSubscriptionGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoSubscriptionGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPostRequestBody}
 */
// @ts-ignore
export function createSubscriptionPostRequestBodyFromDiscriminatorValue(parseNode) {
    return deserializeIntoSubscriptionPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionPostResponse}
 */
// @ts-ignore
export function createSubscriptionPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoSubscriptionPostResponse;
}
/**
 * The deserialization information for the current model
 * @param SubscriptionGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionGetResponse(subscriptionGetResponse = {}) {
    return {
        "subscription": n => { subscriptionGetResponse.subscription = n.getObjectValue(createSubscriptionFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param SubscriptionPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPostRequestBody(subscriptionPostRequestBody = {}) {
    return {
        "tier_slug": n => { subscriptionPostRequestBody.tierSlug = n.getEnumValue(SubscriptionPostRequestBody_tier_slugObject); },
    };
}
/**
 * The deserialization information for the current model
 * @param SubscriptionPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionPostResponse(subscriptionPostResponse = {}) {
    return {
        "subscription": n => { subscriptionPostResponse.subscription = n.getObjectValue(createSubscriptionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionGetResponse(writer, subscriptionGetResponse = {}, isSerializingDerivedType = false) {
    if (!subscriptionGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("subscription", subscriptionGetResponse.subscription, serializeSubscription);
    writer.writeAdditionalData(subscriptionGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPostRequestBody(writer, subscriptionPostRequestBody = {}, isSerializingDerivedType = false) {
    if (!subscriptionPostRequestBody || isSerializingDerivedType) {
        return;
    }
    writer.writeEnumValue("tier_slug", subscriptionPostRequestBody.tierSlug);
    writer.writeAdditionalData(subscriptionPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionPostResponse(writer, subscriptionPostResponse = {}, isSerializingDerivedType = false) {
    if (!subscriptionPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("subscription", subscriptionPostResponse.subscription, serializeSubscription);
    writer.writeAdditionalData(subscriptionPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionRequestBuilderUriTemplate = "{+baseurl}/v2/registries/subscription";
/**
 * The slug of the subscription tier to sign up for.
 */
export const SubscriptionPostRequestBody_tier_slugObject = {
    Starter: "starter",
    Basic: "basic",
    Professional: "professional",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: SubscriptionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createSubscriptionGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: SubscriptionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createSubscriptionPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSubscriptionPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
