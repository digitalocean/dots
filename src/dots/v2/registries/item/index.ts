/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMultiregistryFromDiscriminatorValue, serializeMultiregistry, type ErrorEscaped, type Multiregistry } from '../../../models/index.js';
// @ts-ignore
import { DockerCredentialsRequestBuilderRequestsMetadata, type DockerCredentialsRequestBuilder } from './dockerCredentials/index.js';
// @ts-ignore
import { GarbageCollectionRequestBuilderNavigationMetadata, GarbageCollectionRequestBuilderRequestsMetadata, type GarbageCollectionRequestBuilder } from './garbageCollection/index.js';
// @ts-ignore
import { GarbageCollectionsRequestBuilderRequestsMetadata, type GarbageCollectionsRequestBuilder } from './garbageCollections/index.js';
// @ts-ignore
import { RepositoriesRequestBuilderNavigationMetadata, type RepositoriesRequestBuilder } from './repositories/index.js';
// @ts-ignore
import { RepositoriesV2RequestBuilderRequestsMetadata, type RepositoriesV2RequestBuilder } from './repositoriesV2/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithRegistry_nameGetResponse}
 */
// @ts-ignore
export function createWithRegistry_nameGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithRegistry_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithRegistry_nameGetResponse(withRegistry_nameGetResponse: Partial<WithRegistry_nameGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "registry": n => { withRegistry_nameGetResponse.registry = n.getObjectValue<Multiregistry>(createMultiregistryFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithRegistry_nameGetResponse(writer: SerializationWriter, withRegistry_nameGetResponse: Partial<WithRegistry_nameGetResponse> | undefined | null = {}) : void {
    if (withRegistry_nameGetResponse) {
        writer.writeObjectValue<Multiregistry>("registry", withRegistry_nameGetResponse.registry, serializeMultiregistry);
    }
}
export interface WithRegistry_nameGetResponse extends Parsable {
    /**
     * The registry property
     */
    registry?: Multiregistry | null;
}
/**
 * Builds and executes requests for operations under /v2/registries/{registry_name}
 */
export interface WithRegistry_nameItemRequestBuilder extends BaseRequestBuilder<WithRegistry_nameItemRequestBuilder> {
    /**
     * The dockerCredentials property
     */
    get dockerCredentials(): DockerCredentialsRequestBuilder;
    /**
     * The garbageCollection property
     */
    get garbageCollection(): GarbageCollectionRequestBuilder;
    /**
     * The garbageCollections property
     */
    get garbageCollections(): GarbageCollectionsRequestBuilder;
    /**
     * The repositories property
     */
    get repositories(): RepositoriesRequestBuilder;
    /**
     * The repositoriesV2 property
     */
    get repositoriesV2(): RepositoriesV2RequestBuilder;
    /**
     * To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registries/{registry_name}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * To get information about any container registry in your account, send a GET request to `/v2/registries/{registry_name}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithRegistry_nameGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithRegistry_nameGetResponse | undefined>;
    /**
     * To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registries/{registry_name}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * To get information about any container registry in your account, send a GET request to `/v2/registries/{registry_name}`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithRegistry_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithRegistry_nameItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithRegistry_nameItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    dockerCredentials: {
        requestsMetadata: DockerCredentialsRequestBuilderRequestsMetadata,
    },
    garbageCollection: {
        requestsMetadata: GarbageCollectionRequestBuilderRequestsMetadata,
        navigationMetadata: GarbageCollectionRequestBuilderNavigationMetadata,
    },
    garbageCollections: {
        requestsMetadata: GarbageCollectionsRequestBuilderRequestsMetadata,
    },
    repositories: {
        navigationMetadata: RepositoriesRequestBuilderNavigationMetadata,
    },
    repositoriesV2: {
        requestsMetadata: RepositoriesV2RequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithRegistry_nameItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithRegistry_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithRegistry_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithRegistry_nameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
