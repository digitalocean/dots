/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createGarbage_collectionFromDiscriminatorValue, serializeGarbage_collection } from '../../../../models/index.js';
// @ts-ignore
import { WithGarbage_collection_uuItemRequestBuilderRequestsMetadata } from './item/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GarbageCollectionGetResponse}
 */
// @ts-ignore
export function createGarbageCollectionGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoGarbageCollectionGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GarbageCollectionPostResponse}
 */
// @ts-ignore
export function createGarbageCollectionPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoGarbageCollectionPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGarbageCollectionGetResponse(garbageCollectionGetResponse = {}) {
    return {
        "garbage_collection": n => { garbageCollectionGetResponse.garbageCollection = n.getObjectValue(createGarbage_collectionFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGarbageCollectionPostResponse(garbageCollectionPostResponse = {}) {
    return {
        "garbage_collection": n => { garbageCollectionPostResponse.garbageCollection = n.getObjectValue(createGarbage_collectionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGarbageCollectionGetResponse(writer, garbageCollectionGetResponse = {}) {
    if (garbageCollectionGetResponse) {
        writer.writeObjectValue("garbage_collection", garbageCollectionGetResponse.garbageCollection, serializeGarbage_collection);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGarbageCollectionPostResponse(writer, garbageCollectionPostResponse = {}) {
    if (garbageCollectionPostResponse) {
        writer.writeObjectValue("garbage_collection", garbageCollectionPostResponse.garbageCollection, serializeGarbage_collection);
    }
}
/**
 * Uri template for the request builder.
 */
export const GarbageCollectionRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/garbage-collection";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GarbageCollectionRequestBuilderNavigationMetadata = {
    byGarbage_collection_uuid: {
        requestsMetadata: WithGarbage_collection_uuItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["garbage_collection_uuid"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GarbageCollectionRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: GarbageCollectionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createGarbageCollectionGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: GarbageCollectionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createGarbageCollectionPostResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
