/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createGarbage_collectionFromDiscriminatorValue, serializeGarbage_collection, serializeUpdate_registry } from '../../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithGarbage_collection_uuPutResponse}
 */
// @ts-ignore
export function createWithGarbage_collection_uuPutResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithGarbage_collection_uuPutResponse;
}
/**
 * The deserialization information for the current model
 * @param WithGarbage_collection_uuPutResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithGarbage_collection_uuPutResponse(withGarbage_collection_uuPutResponse = {}) {
    return {
        "garbage_collection": n => { withGarbage_collection_uuPutResponse.garbageCollection = n.getObjectValue(createGarbage_collectionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param WithGarbage_collection_uuPutResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithGarbage_collection_uuPutResponse(writer, withGarbage_collection_uuPutResponse = {}, isSerializingDerivedType = false) {
    if (!withGarbage_collection_uuPutResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("garbage_collection", withGarbage_collection_uuPutResponse.garbageCollection, serializeGarbage_collection);
    writer.writeAdditionalData(withGarbage_collection_uuPutResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const WithGarbage_collection_uuItemRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/garbage-collection/{garbage_collection_uuid}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithGarbage_collection_uuItemRequestBuilderRequestsMetadata = {
    put: {
        uriTemplate: WithGarbage_collection_uuItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithGarbage_collection_uuPutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdate_registry,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
