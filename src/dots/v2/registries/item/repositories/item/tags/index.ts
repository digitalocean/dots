/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createRepository_tagFromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeRepository_tag, type ErrorEscaped, type Meta_properties, type Page_links, type Repository_tag } from '../../../../../../models/index.js';
// @ts-ignore
import { type WithRepository_tagItemRequestBuilder, WithRepository_tagItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagsGetResponse}
 */
// @ts-ignore
export function createTagsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTagsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagsGetResponse(tagsGetResponse: Partial<TagsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "links": n => { tagsGetResponse.links = n.getObjectValue<Page_links>(createPage_linksFromDiscriminatorValue); },
        "meta": n => { tagsGetResponse.meta = n.getObjectValue<Meta_properties>(createMeta_propertiesFromDiscriminatorValue); },
        "tags": n => { tagsGetResponse.tags = n.getCollectionOfObjectValues<Repository_tag>(createRepository_tagFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagsGetResponse(writer: SerializationWriter, tagsGetResponse: Partial<TagsGetResponse> | undefined | null = {}) : void {
    if (tagsGetResponse) {
        writer.writeObjectValue<Page_links>("links", tagsGetResponse.links, serializePage_links);
        writer.writeObjectValue<Meta_properties>("meta", tagsGetResponse.meta, serializeMeta_properties);
        writer.writeCollectionOfObjectValues<Repository_tag>("tags", tagsGetResponse.tags, serializeRepository_tag);
        writer.writeAdditionalData(tagsGetResponse.additionalData);
    }
}
export interface TagsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The links property
     */
    links?: Page_links | null;
    /**
     * The meta property
     */
    meta?: Meta_properties | null;
    /**
     * The tags property
     */
    tags?: Repository_tag[] | null;
}
/**
 * Builds and executes requests for operations under /v2/registries/{registry_name}/repositories/{repository_name}/tags
 */
export interface TagsRequestBuilder extends BaseRequestBuilder<TagsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.registries.item.repositories.item.tags.item collection
     * @param repository_tag The name of a container registry repository tag.
     * @returns {WithRepository_tagItemRequestBuilder}
     */
     byRepository_tag(repository_tag: string) : WithRepository_tagItemRequestBuilder;
    /**
     * To list all tags in one of your container registry's repository, send a GETrequest to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.Note that if your repository name contains `/` characters, it must beURL-encoded in the request URL. For example, to list tags for`registry.digitalocean.com/example/my/repo`, the path would be`/v2/registry/example/repositories/my%2Frepo/tags`. It is similar to GET `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags` and exists for backward compatibility.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TagsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TagsRequestBuilderGetQueryParameters> | undefined) : Promise<TagsGetResponse | undefined>;
    /**
     * To list all tags in one of your container registry's repository, send a GETrequest to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.Note that if your repository name contains `/` characters, it must beURL-encoded in the request URL. For example, to list tags for`registry.digitalocean.com/example/my/repo`, the path would be`/v2/registry/example/repositories/my%2Frepo/tags`. It is similar to GET `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags` and exists for backward compatibility.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TagsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To list all tags in one of your container registry's repository, send a GETrequest to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.Note that if your repository name contains `/` characters, it must beURL-encoded in the request URL. For example, to list tags for`registry.digitalocean.com/example/my/repo`, the path would be`/v2/registry/example/repositories/my%2Frepo/tags`. It is similar to GET `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags` and exists for backward compatibility.
 */
export interface TagsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const TagsRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/repositories/{repository_name}/tags{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TagsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TagsRequestBuilderNavigationMetadata: Record<Exclude<keyof TagsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRepository_tag: {
        requestsMetadata: WithRepository_tagItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["repository_tag"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TagsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TagsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTagsGetResponseFromDiscriminatorValue,
        queryParametersMapper: TagsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
