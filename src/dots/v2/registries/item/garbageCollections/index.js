/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createGarbage_collectionFromDiscriminatorValue, serializeGarbage_collection } from '../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GarbageCollectionsGetResponse}
 */
// @ts-ignore
export function createGarbageCollectionsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoGarbageCollectionsGetResponse;
}
/**
 * The deserialization information for the current model
 * @param GarbageCollectionsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGarbageCollectionsGetResponse(garbageCollectionsGetResponse = {}) {
    return {
        "garbage_collections": n => { garbageCollectionsGetResponse.garbageCollections = n.getCollectionOfObjectValues(createGarbage_collectionFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param GarbageCollectionsGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGarbageCollectionsGetResponse(writer, garbageCollectionsGetResponse = {}, isSerializingDerivedType = false) {
    if (!garbageCollectionsGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeCollectionOfObjectValues("garbage_collections", garbageCollectionsGetResponse.garbageCollections, serializeGarbage_collection);
    writer.writeAdditionalData(garbageCollectionsGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const GarbageCollectionsRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/garbage-collections{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GarbageCollectionsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GarbageCollectionsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: GarbageCollectionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createGarbageCollectionsGetResponseFromDiscriminatorValue,
        queryParametersMapper: GarbageCollectionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
