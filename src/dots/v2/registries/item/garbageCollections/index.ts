/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createGarbage_collectionFromDiscriminatorValue, serializeGarbage_collection, type ErrorEscaped, type Garbage_collection } from '../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GarbageCollectionsGetResponse}
 */
// @ts-ignore
export function createGarbageCollectionsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGarbageCollectionsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGarbageCollectionsGetResponse(garbageCollectionsGetResponse: Partial<GarbageCollectionsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "garbage_collections": n => { garbageCollectionsGetResponse.garbageCollections = n.getCollectionOfObjectValues<Garbage_collection>(createGarbage_collectionFromDiscriminatorValue); },
    }
}
export interface GarbageCollectionsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The garbage_collections property
     */
    garbageCollections?: Garbage_collection[] | null;
}
/**
 * Builds and executes requests for operations under /v2/registries/{registry_name}/garbage-collections
 */
export interface GarbageCollectionsRequestBuilder extends BaseRequestBuilder<GarbageCollectionsRequestBuilder> {
    /**
     * To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GarbageCollectionsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GarbageCollectionsRequestBuilderGetQueryParameters> | undefined) : Promise<GarbageCollectionsGetResponse | undefined>;
    /**
     * To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GarbageCollectionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.
 */
export interface GarbageCollectionsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGarbageCollectionsGetResponse(writer: SerializationWriter, garbageCollectionsGetResponse: Partial<GarbageCollectionsGetResponse> | undefined | null = {}) : void {
    if (garbageCollectionsGetResponse) {
        writer.writeCollectionOfObjectValues<Garbage_collection>("garbage_collections", garbageCollectionsGetResponse.garbageCollections, serializeGarbage_collection);
        writer.writeAdditionalData(garbageCollectionsGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const GarbageCollectionsRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/garbage-collections{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GarbageCollectionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GarbageCollectionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GarbageCollectionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGarbageCollectionsGetResponseFromDiscriminatorValue,
        queryParametersMapper: GarbageCollectionsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
