/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMultiregistryFromDiscriminatorValue, serializeMultiregistry } from '../../../models/index.js';
// @ts-ignore
import { DockerCredentialsRequestBuilderRequestsMetadata } from './dockerCredentials/index.js';
// @ts-ignore
import { GarbageCollectionRequestBuilderNavigationMetadata, GarbageCollectionRequestBuilderRequestsMetadata } from './garbageCollection/index.js';
// @ts-ignore
import { GarbageCollectionsRequestBuilderRequestsMetadata } from './garbageCollections/index.js';
// @ts-ignore
import { RepositoriesRequestBuilderNavigationMetadata } from './repositories/index.js';
// @ts-ignore
import { RepositoriesV2RequestBuilderRequestsMetadata } from './repositoriesV2/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithRegistry_nameGetResponse}
 */
// @ts-ignore
export function createWithRegistry_nameGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoWithRegistry_nameGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithRegistry_nameGetResponse(withRegistry_nameGetResponse = {}) {
    return {
        "registry": n => { withRegistry_nameGetResponse.registry = n.getObjectValue(createMultiregistryFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithRegistry_nameGetResponse(writer, withRegistry_nameGetResponse = {}) {
    if (withRegistry_nameGetResponse) {
        writer.writeObjectValue("registry", withRegistry_nameGetResponse.registry, serializeMultiregistry);
        writer.writeAdditionalData(withRegistry_nameGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const WithRegistry_nameItemRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithRegistry_nameItemRequestBuilderNavigationMetadata = {
    dockerCredentials: {
        requestsMetadata: DockerCredentialsRequestBuilderRequestsMetadata,
    },
    garbageCollection: {
        requestsMetadata: GarbageCollectionRequestBuilderRequestsMetadata,
        navigationMetadata: GarbageCollectionRequestBuilderNavigationMetadata,
    },
    garbageCollections: {
        requestsMetadata: GarbageCollectionsRequestBuilderRequestsMetadata,
    },
    repositories: {
        navigationMetadata: RepositoriesRequestBuilderNavigationMetadata,
    },
    repositoriesV2: {
        requestsMetadata: RepositoriesV2RequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithRegistry_nameItemRequestBuilderRequestsMetadata = {
    delete: {
        uriTemplate: WithRegistry_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithRegistry_nameItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createWithRegistry_nameGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
