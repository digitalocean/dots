/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDocker_credentialsFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type Docker_credentials, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/registries/{registry_name}/docker-credentials
 */
export interface DockerCredentialsRequestBuilder extends BaseRequestBuilder<DockerCredentialsRequestBuilder> {
    /**
     * In order to access your container registry with the Docker client or from aKubernetes cluster, you will need to configure authentication. The necessaryJSON configuration can be retrieved by sending a GET request to`/v2/registries/{registry_name}/docker-credentials`.The response will be in the format of a Docker `config.json` file. To use theconfig in your Kubernetes cluster, create a Secret with:    kubectl create secret generic docr /      --from-file=.dockerconfigjson=config.json /      --type=kubernetes.io/dockerconfigjsonBy default, the returned credentials have read-only access to your registryand cannot be used to push images. This is appropriate for most Kubernetesclusters. To retrieve read/write credentials, suitable for use with the Dockerclient or in a CI system, read_write may be provided as query parameter. Forexample: `/v2/registries/{registry_name}/docker-credentials?read_write=true`By default, the returned credentials will not expire. To retrieve credentialswith an expiry set, expiry_seconds may be provided as a query parameter. Forexample: `/v2/registries/{registry_name}/docker-credentials?expiry_seconds=3600` will returncredentials that expire after one hour.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Docker_credentials>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Docker_credentials | undefined>;
    /**
     * In order to access your container registry with the Docker client or from aKubernetes cluster, you will need to configure authentication. The necessaryJSON configuration can be retrieved by sending a GET request to`/v2/registries/{registry_name}/docker-credentials`.The response will be in the format of a Docker `config.json` file. To use theconfig in your Kubernetes cluster, create a Secret with:    kubectl create secret generic docr /      --from-file=.dockerconfigjson=config.json /      --type=kubernetes.io/dockerconfigjsonBy default, the returned credentials have read-only access to your registryand cannot be used to push images. This is appropriate for most Kubernetesclusters. To retrieve read/write credentials, suitable for use with the Dockerclient or in a CI system, read_write may be provided as query parameter. Forexample: `/v2/registries/{registry_name}/docker-credentials?read_write=true`By default, the returned credentials will not expire. To retrieve credentialswith an expiry set, expiry_seconds may be provided as a query parameter. Forexample: `/v2/registries/{registry_name}/docker-credentials?expiry_seconds=3600` will returncredentials that expire after one hour.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const DockerCredentialsRequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/docker-credentials";
/**
 * Metadata for all the requests in the request builder.
 */
export const DockerCredentialsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DockerCredentialsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDocker_credentialsFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
