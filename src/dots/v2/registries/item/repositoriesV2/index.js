/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, createRepository_v2FromDiscriminatorValue, serializeMeta_properties, serializePage_links, serializeRepository_v2 } from '../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RepositoriesV2GetResponse}
 */
// @ts-ignore
export function createRepositoriesV2GetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRepositoriesV2GetResponse;
}
/**
 * The deserialization information for the current model
 * @param RepositoriesV2GetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRepositoriesV2GetResponse(repositoriesV2GetResponse = {}) {
    return {
        "links": n => { repositoriesV2GetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { repositoriesV2GetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
        "repositories": n => { repositoriesV2GetResponse.repositories = n.getCollectionOfObjectValues(createRepository_v2FromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RepositoriesV2GetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRepositoriesV2GetResponse(writer, repositoriesV2GetResponse = {}, isSerializingDerivedType = false) {
    if (!repositoriesV2GetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("links", repositoriesV2GetResponse.links, serializePage_links);
    writer.writeObjectValue("meta", repositoriesV2GetResponse.meta, serializeMeta_properties);
    writer.writeCollectionOfObjectValues("repositories", repositoriesV2GetResponse.repositories, serializeRepository_v2);
    writer.writeAdditionalData(repositoriesV2GetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const RepositoriesV2RequestBuilderUriTemplate = "{+baseurl}/v2/registries/{registry_name}/repositoriesV2{?page*,page_token*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RepositoriesV2RequestBuilderGetQueryParametersMapper = {
    "pageToken": "page_token",
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RepositoriesV2RequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: RepositoriesV2RequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createErrorEscapedFromDiscriminatorValue,
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRepositoriesV2GetResponseFromDiscriminatorValue,
        queryParametersMapper: RepositoriesV2RequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
