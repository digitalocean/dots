/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, createMultiregistryFromDiscriminatorValue, createRegistryFromDiscriminatorValue, serializeMultiregistry, serializeMultiregistry_create, serializeRegistry } from '../../models/index.js';
// @ts-ignore
import { WithRegistry_nameItemRequestBuilderNavigationMetadata, WithRegistry_nameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { OptionsRequestBuilderRequestsMetadata } from './options/index.js';
// @ts-ignore
import { SubscriptionRequestBuilderRequestsMetadata } from './subscription/index.js';
// @ts-ignore
import { ValidateNameRequestBuilderRequestsMetadata } from './validateName/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegistriesGetResponse}
 */
// @ts-ignore
export function createRegistriesGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRegistriesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegistriesPostResponse}
 */
// @ts-ignore
export function createRegistriesPostResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoRegistriesPostResponse;
}
/**
 * The deserialization information for the current model
 * @param RegistriesGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegistriesGetResponse(registriesGetResponse = {}) {
    return {
        "registries": n => { registriesGetResponse.registries = n.getCollectionOfObjectValues(createRegistryFromDiscriminatorValue); },
    };
}
/**
 * The deserialization information for the current model
 * @param RegistriesPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegistriesPostResponse(registriesPostResponse = {}) {
    return {
        "registry": n => { registriesPostResponse.registry = n.getObjectValue(createMultiregistryFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RegistriesGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegistriesGetResponse(writer, registriesGetResponse = {}, isSerializingDerivedType = false) {
    if (!registriesGetResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeCollectionOfObjectValues("registries", registriesGetResponse.registries, serializeRegistry);
    writer.writeAdditionalData(registriesGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RegistriesPostResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegistriesPostResponse(writer, registriesPostResponse = {}, isSerializingDerivedType = false) {
    if (!registriesPostResponse || isSerializingDerivedType) {
        return;
    }
    writer.writeObjectValue("registry", registriesPostResponse.registry, serializeMultiregistry);
    writer.writeAdditionalData(registriesPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const RegistriesRequestBuilderUriTemplate = "{+baseurl}/v2/registries";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RegistriesRequestBuilderNavigationMetadata = {
    byRegistry_name: {
        requestsMetadata: WithRegistry_nameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithRegistry_nameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["registry_name"],
    },
    optionsPath: {
        requestsMetadata: OptionsRequestBuilderRequestsMetadata,
    },
    subscription: {
        requestsMetadata: SubscriptionRequestBuilderRequestsMetadata,
    },
    validateName: {
        requestsMetadata: ValidateNameRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RegistriesRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: RegistriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRegistriesGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: RegistriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createRegistriesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMultiregistry_create,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
