/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createErrorEscapedFromDiscriminatorValue, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OptionsGetResponse_options_subscription_tiers}
 */
// @ts-ignore
export function createOptionsGetResponse_options_subscription_tiersFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOptionsGetResponse_options_subscription_tiers;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OptionsGetResponse_options}
 */
// @ts-ignore
export function createOptionsGetResponse_optionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOptionsGetResponse_options;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OptionsGetResponse}
 */
// @ts-ignore
export function createOptionsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOptionsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOptionsGetResponse(optionsGetResponse: Partial<OptionsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "options": n => { optionsGetResponse.options = n.getObjectValue<OptionsGetResponse_options>(createOptionsGetResponse_optionsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOptionsGetResponse_options(optionsGetResponse_options: Partial<OptionsGetResponse_options> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "available_regions": n => { optionsGetResponse_options.availableRegions = n.getCollectionOfPrimitiveValues<string>(); },
        "subscription_tiers": n => { optionsGetResponse_options.subscriptionTiers = n.getCollectionOfObjectValues<OptionsGetResponse_options_subscription_tiers>(createOptionsGetResponse_options_subscription_tiersFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOptionsGetResponse_options_subscription_tiers(optionsGetResponse_options_subscription_tiers: Partial<OptionsGetResponse_options_subscription_tiers> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allow_storage_overage": n => { optionsGetResponse_options_subscription_tiers.allowStorageOverage = n.getBooleanValue(); },
        "eligibility_reasons": n => { optionsGetResponse_options_subscription_tiers.eligibilityReasons = n.getCollectionOfEnumValues<OptionsGetResponse_options_subscription_tiers_eligibility_reasons>(OptionsGetResponse_options_subscription_tiers_eligibility_reasonsObject); },
        "eligible": n => { optionsGetResponse_options_subscription_tiers.eligible = n.getBooleanValue(); },
        "included_bandwidth_bytes": n => { optionsGetResponse_options_subscription_tiers.includedBandwidthBytes = n.getNumberValue(); },
        "included_repositories": n => { optionsGetResponse_options_subscription_tiers.includedRepositories = n.getNumberValue(); },
        "included_storage_bytes": n => { optionsGetResponse_options_subscription_tiers.includedStorageBytes = n.getNumberValue(); },
        "monthly_price_in_cents": n => { optionsGetResponse_options_subscription_tiers.monthlyPriceInCents = n.getNumberValue(); },
        "name": n => { optionsGetResponse_options_subscription_tiers.name = n.getStringValue(); },
        "slug": n => { optionsGetResponse_options_subscription_tiers.slug = n.getStringValue(); },
        "storage_overage_price_in_cents": n => { optionsGetResponse_options_subscription_tiers.storageOveragePriceInCents = n.getNumberValue(); },
    }
}
export interface OptionsGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The options property
     */
    options?: OptionsGetResponse_options | null;
}
export interface OptionsGetResponse_options extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The available_regions property
     */
    availableRegions?: string[] | null;
    /**
     * The subscription_tiers property
     */
    subscriptionTiers?: OptionsGetResponse_options_subscription_tiers[] | null;
}
export interface OptionsGetResponse_options_subscription_tiers extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.
     */
    allowStorageOverage?: boolean | null;
    /**
     * If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier.
     */
    eligibilityReasons?: OptionsGetResponse_options_subscription_tiers_eligibility_reasons[] | null;
    /**
     * A boolean indicating whether your account it eligible to use a certain subscription tier.
     */
    eligible?: boolean | null;
    /**
     * The amount of outbound data transfer included in the subscription tier in bytes.
     */
    includedBandwidthBytes?: number | null;
    /**
     * The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.
     */
    includedRepositories?: number | null;
    /**
     * The amount of storage included in the subscription tier in bytes.
     */
    includedStorageBytes?: number | null;
    /**
     * The monthly cost of the subscription tier in cents.
     */
    monthlyPriceInCents?: number | null;
    /**
     * The name of the subscription tier.
     */
    name?: string | null;
    /**
     * The slug identifier of the subscription tier.
     */
    slug?: string | null;
    /**
     * The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.
     */
    storageOveragePriceInCents?: number | null;
}
export type OptionsGetResponse_options_subscription_tiers_eligibility_reasons = (typeof OptionsGetResponse_options_subscription_tiers_eligibility_reasonsObject)[keyof typeof OptionsGetResponse_options_subscription_tiers_eligibility_reasonsObject];
/**
 * Builds and executes requests for operations under /v2/registries/options
 */
export interface OptionsRequestBuilder extends BaseRequestBuilder<OptionsRequestBuilder> {
    /**
     * This endpoint serves to provide additional information as to which option values are available when creating a container registry.There are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.There are multiple regions available for container registry and controls where your data is stored.To list the available options, send a GET request to `/v2/registries/options`. This is similar to GET `/v2/registry/options` and exists for backward compatibility.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OptionsGetResponse>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OptionsGetResponse | undefined>;
    /**
     * This endpoint serves to provide additional information as to which option values are available when creating a container registry.There are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.There are multiple regions available for container registry and controls where your data is stored.To list the available options, send a GET request to `/v2/registries/options`. This is similar to GET `/v2/registry/options` and exists for backward compatibility.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOptionsGetResponse(writer: SerializationWriter, optionsGetResponse: Partial<OptionsGetResponse> | undefined | null = {}) : void {
    if (optionsGetResponse) {
        writer.writeObjectValue<OptionsGetResponse_options>("options", optionsGetResponse.options, serializeOptionsGetResponse_options);
        writer.writeAdditionalData(optionsGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOptionsGetResponse_options(writer: SerializationWriter, optionsGetResponse_options: Partial<OptionsGetResponse_options> | undefined | null = {}) : void {
    if (optionsGetResponse_options) {
        writer.writeCollectionOfPrimitiveValues<string>("available_regions", optionsGetResponse_options.availableRegions);
        writer.writeCollectionOfObjectValues<OptionsGetResponse_options_subscription_tiers>("subscription_tiers", optionsGetResponse_options.subscriptionTiers, serializeOptionsGetResponse_options_subscription_tiers);
        writer.writeAdditionalData(optionsGetResponse_options.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOptionsGetResponse_options_subscription_tiers(writer: SerializationWriter, optionsGetResponse_options_subscription_tiers: Partial<OptionsGetResponse_options_subscription_tiers> | undefined | null = {}) : void {
    if (optionsGetResponse_options_subscription_tiers) {
        writer.writeBooleanValue("allow_storage_overage", optionsGetResponse_options_subscription_tiers.allowStorageOverage);
        if(optionsGetResponse_options_subscription_tiers.eligibilityReasons)
        writer.writeCollectionOfEnumValues<OptionsGetResponse_options_subscription_tiers_eligibility_reasons>("eligibility_reasons", optionsGetResponse_options_subscription_tiers.eligibilityReasons);
        writer.writeBooleanValue("eligible", optionsGetResponse_options_subscription_tiers.eligible);
        writer.writeNumberValue("included_bandwidth_bytes", optionsGetResponse_options_subscription_tiers.includedBandwidthBytes);
        writer.writeNumberValue("included_repositories", optionsGetResponse_options_subscription_tiers.includedRepositories);
        writer.writeNumberValue("included_storage_bytes", optionsGetResponse_options_subscription_tiers.includedStorageBytes);
        writer.writeNumberValue("monthly_price_in_cents", optionsGetResponse_options_subscription_tiers.monthlyPriceInCents);
        writer.writeStringValue("name", optionsGetResponse_options_subscription_tiers.name);
        writer.writeStringValue("slug", optionsGetResponse_options_subscription_tiers.slug);
        writer.writeNumberValue("storage_overage_price_in_cents", optionsGetResponse_options_subscription_tiers.storageOveragePriceInCents);
        writer.writeAdditionalData(optionsGetResponse_options_subscription_tiers.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const OptionsRequestBuilderUriTemplate = "{+baseurl}/v2/registries/options";
export const OptionsGetResponse_options_subscription_tiers_eligibility_reasonsObject = {
    OverRepositoryLimit: "OverRepositoryLimit",
    OverStorageLimit: "OverStorageLimit",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const OptionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: OptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOptionsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
