/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApp_responseFromDiscriminatorValue, createApps_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApp_response, serializeApps_create_app_request, type App_response, type Apps_create_app_request, type Apps_response, type ErrorEscaped } from '../../models/index.js';
// @ts-ignore
import { App_ItemRequestBuilderNavigationMetadata, App_ItemRequestBuilderRequestsMetadata, type App_ItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { MetricsRequestBuilderNavigationMetadata, type MetricsRequestBuilder } from './metrics/index.js';
// @ts-ignore
import { ProposeRequestBuilderRequestsMetadata, type ProposeRequestBuilder } from './propose/index.js';
// @ts-ignore
import { RegionsRequestBuilderRequestsMetadata, type RegionsRequestBuilder } from './regions/index.js';
// @ts-ignore
import { TiersRequestBuilderNavigationMetadata, type TiersRequestBuilder } from './tiers/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps
 */
export interface AppsRequestBuilder extends BaseRequestBuilder<AppsRequestBuilder> {
    /**
     * The metrics property
     */
    get metrics(): MetricsRequestBuilder;
    /**
     * The propose property
     */
    get propose(): ProposeRequestBuilder;
    /**
     * The regions property
     */
    get regions(): RegionsRequestBuilder;
    /**
     * The tiers property
     */
    get tiers(): TiersRequestBuilder;
    /**
     * Gets an item from the dots.v2.apps.item collection
     * @param app_Id The ID of the app
     * @returns {App_ItemRequestBuilder}
     */
     byApp_Id(app_Id: string) : App_ItemRequestBuilder;
    /**
     * List all apps on your account. Information about the current active deployment as well as any in progress ones will also be included for each app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AppsRequestBuilderGetQueryParameters> | undefined) : Promise<Apps_response | undefined>;
    /**
     * Create a new app by submitting an app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<App_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Apps_create_app_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<App_response | undefined>;
    /**
     * List all apps on your account. Information about the current active deployment as well as any in progress ones will also be included for each app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AppsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new app by submitting an app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Apps_create_app_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List all apps on your account. Information about the current active deployment as well as any in progress ones will also be included for each app.
 */
export interface AppsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
    /**
     * Whether the project_id of listed apps should be fetched and included.
     */
    withProjects?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const AppsRequestBuilderUriTemplate = "{+baseurl}/v2/apps{?page*,per_page*,with_projects*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AppsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
    "withProjects": "with_projects",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppsRequestBuilderNavigationMetadata: Record<Exclude<keyof AppsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byApp_Id: {
        requestsMetadata: App_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: App_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["app_%2Did"],
    },
    metrics: {
        navigationMetadata: MetricsRequestBuilderNavigationMetadata,
    },
    propose: {
        requestsMetadata: ProposeRequestBuilderRequestsMetadata,
    },
    regions: {
        requestsMetadata: RegionsRequestBuilderRequestsMetadata,
    },
    tiers: {
        navigationMetadata: TiersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AppsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_responseFromDiscriminatorValue,
        queryParametersMapper: AppsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AppsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApp_responseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApps_create_app_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
