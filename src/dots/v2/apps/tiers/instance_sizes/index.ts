/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApps_list_instance_sizes_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type Apps_list_instance_sizes_response, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithSlugItemRequestBuilder, WithSlugItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps/tiers/instance_sizes
 */
export interface Instance_sizesRequestBuilder extends BaseRequestBuilder<Instance_sizesRequestBuilder> {
    /**
     * Gets an item from the dots.v2.apps.tiers.instance_sizes.item collection
     * @param slug The slug of the instance size
     * @returns {WithSlugItemRequestBuilder}
     */
     bySlug(slug: string) : WithSlugItemRequestBuilder;
    /**
     * List all instance sizes for `service`, `worker`, and `job` components.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_list_instance_sizes_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Apps_list_instance_sizes_response | undefined>;
    /**
     * List all instance sizes for `service`, `worker`, and `job` components.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const Instance_sizesRequestBuilderUriTemplate = "{+baseurl}/v2/apps/tiers/instance_sizes";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const Instance_sizesRequestBuilderNavigationMetadata: Record<Exclude<keyof Instance_sizesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySlug: {
        requestsMetadata: WithSlugItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["slug"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Instance_sizesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Instance_sizesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_list_instance_sizes_responseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
