/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApps_deployment_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApps_deployment_response, serializeApps_rollback_app_request, type Apps_deployment_response, type Apps_rollback_app_request, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { CommitRequestBuilderRequestsMetadata, type CommitRequestBuilder } from './commit/index.js';
// @ts-ignore
import { RevertRequestBuilderRequestsMetadata, type RevertRequestBuilder } from './revert/index.js';
// @ts-ignore
import { type ValidateRequestBuilder, ValidateRequestBuilderRequestsMetadata } from './validate/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps/{app_-id}/rollback
 */
export interface RollbackRequestBuilder extends BaseRequestBuilder<RollbackRequestBuilder> {
    /**
     * The commit property
     */
    get commit(): CommitRequestBuilder;
    /**
     * The revert property
     */
    get revert(): RevertRequestBuilder;
    /**
     * The validate property
     */
    get validate(): ValidateRequestBuilder;
    /**
     * Rollback an app to a previous deployment. A new deployment will be created to perform the rollback.The app will be pinned to the rollback deployment preventing any new deployments from being created,either manually or through Auto Deploy on Push webhooks. To resume deployments, the rollback must beeither committed or reverted.It is recommended to use the Validate App Rollback endpoint to double check if the rollback isvalid and if there are any warnings.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_deployment_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Apps_rollback_app_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Apps_deployment_response | undefined>;
    /**
     * Rollback an app to a previous deployment. A new deployment will be created to perform the rollback.The app will be pinned to the rollback deployment preventing any new deployments from being created,either manually or through Auto Deploy on Push webhooks. To resume deployments, the rollback must beeither committed or reverted.It is recommended to use the Validate App Rollback endpoint to double check if the rollback isvalid and if there are any warnings.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Apps_rollback_app_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const RollbackRequestBuilderUriTemplate = "{+baseurl}/v2/apps/{app_%2Did}/rollback";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RollbackRequestBuilderNavigationMetadata: Record<Exclude<keyof RollbackRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    commit: {
        requestsMetadata: CommitRequestBuilderRequestsMetadata,
    },
    revert: {
        requestsMetadata: RevertRequestBuilderRequestsMetadata,
    },
    validate: {
        requestsMetadata: ValidateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RollbackRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: RollbackRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_deployment_responseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApps_rollback_app_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
