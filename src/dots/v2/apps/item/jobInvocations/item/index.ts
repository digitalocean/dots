/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApp_job_invocationFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type App_job_invocation, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps/{app_-id}/job-invocations/{job_invocation_id}
 */
export interface WithJob_invocation_ItemRequestBuilder extends BaseRequestBuilder<WithJob_invocation_ItemRequestBuilder> {
    /**
     * Get a specific job invocation for an app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<App_job_invocation>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<WithJob_invocation_ItemRequestBuilderGetQueryParameters> | undefined) : Promise<App_job_invocation | undefined>;
    /**
     * Get a specific job invocation for an app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithJob_invocation_ItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get a specific job invocation for an app.
 */
export interface WithJob_invocation_ItemRequestBuilderGetQueryParameters {
    /**
     * The job name to list job invocations for.
     */
    jobName?: string;
}
/**
 * Uri template for the request builder.
 */
export const WithJob_invocation_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/apps/{app_%2Did}/job-invocations/{job_invocation_id}{?job_name*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithJob_invocation_ItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "jobName": "job_name",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithJob_invocation_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithJob_invocation_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApp_job_invocationFromDiscriminatorValue,
        queryParametersMapper: WithJob_invocation_ItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
