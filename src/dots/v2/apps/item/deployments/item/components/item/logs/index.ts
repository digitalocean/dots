/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApps_get_logs_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type Apps_get_logs_response, type ErrorEscaped } from '../../../../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetTypeQueryParameterType = (typeof GetTypeQueryParameterTypeObject)[keyof typeof GetTypeQueryParameterTypeObject];
/**
 * Builds and executes requests for operations under /v2/apps/{app_-id}/deployments/{deployment_id}/components/{component_name}/logs
 */
export interface LogsRequestBuilder extends BaseRequestBuilder<LogsRequestBuilder> {
    /**
     * Retrieve the logs of a past, in-progress, or active deployment. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_get_logs_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<LogsRequestBuilderGetQueryParameters> | undefined) : Promise<Apps_get_logs_response | undefined>;
    /**
     * Retrieve the logs of a past, in-progress, or active deployment. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<LogsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieve the logs of a past, in-progress, or active deployment. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.
 */
export interface LogsRequestBuilderGetQueryParameters {
    /**
     * Whether the logs should follow live updates.
     */
    follow?: boolean;
    /**
     * An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`.
     */
    podConnectionTimeout?: string;
    /**
     * The type of logs to retrieve- BUILD: Build-time logs- DEPLOY: Deploy-time logs- RUN: Live run-time logs- RUN_RESTARTED: Logs of crashed/restarted instances during runtime
     */
    type?: GetTypeQueryParameterType;
}
/**
 * Uri template for the request builder.
 */
export const LogsRequestBuilderUriTemplate = "{+baseurl}/v2/apps/{app_%2Did}/deployments/{deployment_id}/components/{component_name}/logs?type={type}{&follow*,pod_connection_timeout*}";
export const GetTypeQueryParameterTypeObject = {
    UNSPECIFIED: "UNSPECIFIED",
    BUILD: "BUILD",
    DEPLOY: "DEPLOY",
    RUN: "RUN",
    RUN_RESTARTED: "RUN_RESTARTED",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const LogsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "podConnectionTimeout": "pod_connection_timeout",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LogsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: LogsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_get_logs_responseFromDiscriminatorValue,
        queryParametersMapper: LogsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
