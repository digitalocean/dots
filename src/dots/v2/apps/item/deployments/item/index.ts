/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApps_deployment_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, type Apps_deployment_response, type ErrorEscaped } from '../../../../../models/index.js';
// @ts-ignore
import { CancelRequestBuilderRequestsMetadata, type CancelRequestBuilder } from './cancel/index.js';
// @ts-ignore
import { ComponentsRequestBuilderNavigationMetadata, type ComponentsRequestBuilder } from './components/index.js';
// @ts-ignore
import { LogsRequestBuilderRequestsMetadata, type LogsRequestBuilder } from './logs/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps/{app_-id}/deployments/{deployment_id}
 */
export interface WithDeployment_ItemRequestBuilder extends BaseRequestBuilder<WithDeployment_ItemRequestBuilder> {
    /**
     * The cancel property
     */
    get cancel(): CancelRequestBuilder;
    /**
     * The components property
     */
    get components(): ComponentsRequestBuilder;
    /**
     * The logs property
     */
    get logs(): LogsRequestBuilder;
    /**
     * Retrieve information about an app deployment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_deployment_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Apps_deployment_response | undefined>;
    /**
     * Retrieve information about an app deployment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithDeployment_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/apps/{app_%2Did}/deployments/{deployment_id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithDeployment_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithDeployment_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cancel: {
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    components: {
        navigationMetadata: ComponentsRequestBuilderNavigationMetadata,
    },
    logs: {
        requestsMetadata: LogsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithDeployment_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WithDeployment_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_deployment_responseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
