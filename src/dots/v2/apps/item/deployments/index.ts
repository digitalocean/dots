/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApps_deployment_responseFromDiscriminatorValue, createApps_deployments_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApps_create_deployment_request, serializeApps_deployment_response, type Apps_create_deployment_request, type Apps_deployment_response, type Apps_deployments_response, type ErrorEscaped } from '../../../../models/index.js';
// @ts-ignore
import { type WithDeployment_ItemRequestBuilder, WithDeployment_ItemRequestBuilderNavigationMetadata, WithDeployment_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps/{app_-id}/deployments
 */
export interface DeploymentsRequestBuilder extends BaseRequestBuilder<DeploymentsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v2.apps.item.deployments.item collection
     * @param deployment_id The deployment ID
     * @returns {WithDeployment_ItemRequestBuilder}
     */
     byDeployment_id(deployment_id: string) : WithDeployment_ItemRequestBuilder;
    /**
     * List all deployments of an app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_deployments_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeploymentsRequestBuilderGetQueryParameters> | undefined) : Promise<Apps_deployments_response | undefined>;
    /**
     * Creating an app deployment will pull the latest changes from your repository and schedule a new deployment for your app.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_deployment_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     post(body: Apps_create_deployment_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Apps_deployment_response | undefined>;
    /**
     * List all deployments of an app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeploymentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Creating an app deployment will pull the latest changes from your repository and schedule a new deployment for your app.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Apps_create_deployment_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List all deployments of an app.
 */
export interface DeploymentsRequestBuilderGetQueryParameters {
    /**
     * Which 'page' of paginated results to return.
     */
    page?: number;
    /**
     * Number of items returned per page
     */
    perPage?: number;
}
/**
 * Uri template for the request builder.
 */
export const DeploymentsRequestBuilderUriTemplate = "{+baseurl}/v2/apps/{app_%2Did}/deployments{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeploymentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "perPage": "per_page",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeploymentsRequestBuilderNavigationMetadata: Record<Exclude<keyof DeploymentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDeployment_id: {
        requestsMetadata: WithDeployment_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithDeployment_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["deployment_id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeploymentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeploymentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_deployments_responseFromDiscriminatorValue,
        queryParametersMapper: DeploymentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DeploymentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_deployment_responseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApps_create_deployment_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
