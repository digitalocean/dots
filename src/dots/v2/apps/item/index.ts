/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApp_responseFromDiscriminatorValue, createApps_delete_app_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApp_response, serializeApps_update_app_request, type App_response, type Apps_delete_app_response, type Apps_update_app_request, type ErrorEscaped } from '../../../models/index.js';
// @ts-ignore
import { AlertsRequestBuilderNavigationMetadata, AlertsRequestBuilderRequestsMetadata, type AlertsRequestBuilder } from './alerts/index.js';
// @ts-ignore
import { ComponentsRequestBuilderNavigationMetadata, type ComponentsRequestBuilder } from './components/index.js';
// @ts-ignore
import { DeploymentsRequestBuilderNavigationMetadata, DeploymentsRequestBuilderRequestsMetadata, type DeploymentsRequestBuilder } from './deployments/index.js';
// @ts-ignore
import { LogsRequestBuilderRequestsMetadata, type LogsRequestBuilder } from './logs/index.js';
// @ts-ignore
import { MetricsRequestBuilderNavigationMetadata, type MetricsRequestBuilder } from './metrics/index.js';
// @ts-ignore
import { RestartRequestBuilderRequestsMetadata, type RestartRequestBuilder } from './restart/index.js';
// @ts-ignore
import { RollbackRequestBuilderNavigationMetadata, RollbackRequestBuilderRequestsMetadata, type RollbackRequestBuilder } from './rollback/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v2/apps/{app_-id}
 */
export interface App_ItemRequestBuilder extends BaseRequestBuilder<App_ItemRequestBuilder> {
    /**
     * The alerts property
     */
    get alerts(): AlertsRequestBuilder;
    /**
     * The components property
     */
    get components(): ComponentsRequestBuilder;
    /**
     * The deployments property
     */
    get deployments(): DeploymentsRequestBuilder;
    /**
     * The logs property
     */
    get logs(): LogsRequestBuilder;
    /**
     * The metrics property
     */
    get metrics(): MetricsRequestBuilder;
    /**
     * The restart property
     */
    get restart(): RestartRequestBuilder;
    /**
     * The rollback property
     */
    get rollback(): RollbackRequestBuilder;
    /**
     * Delete an existing app. Once deleted, all active deployments will be permanently shut down and the app deleted. If needed, be sure to back up your app specification so that you may re-create it at a later time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Apps_delete_app_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Apps_delete_app_response | undefined>;
    /**
     * Retrieve details about an existing app by either its ID or name. To retrieve an app by its name, do not include an ID in the request path. Information about the current active deployment as well as any in progress ones will also be included in the response.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<App_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<App_ItemRequestBuilderGetQueryParameters> | undefined) : Promise<App_response | undefined>;
    /**
     * Update an existing app by submitting a new app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<App_response>}
     * @throws {ErrorEscaped} error when the service returns a 401 status code
     * @throws {ErrorEscaped} error when the service returns a 404 status code
     * @throws {ErrorEscaped} error when the service returns a 429 status code
     * @throws {ErrorEscaped} error when the service returns a 500 status code
     * @throws {ErrorEscaped} error when the service returns a 4XX or 5XX status code
     */
     put(body: Apps_update_app_request, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<App_response | undefined>;
    /**
     * Delete an existing app. Once deleted, all active deployments will be permanently shut down and the app deleted. If needed, be sure to back up your app specification so that you may re-create it at a later time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve details about an existing app by either its ID or name. To retrieve an app by its name, do not include an ID in the request path. Information about the current active deployment as well as any in progress ones will also be included in the response.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<App_ItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update an existing app by submitting a new app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Apps_update_app_request, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve details about an existing app by either its ID or name. To retrieve an app by its name, do not include an ID in the request path. Information about the current active deployment as well as any in progress ones will also be included in the response.
 */
export interface App_ItemRequestBuilderGetQueryParameters {
    /**
     * The name of the app to retrieve.
     */
    name?: string;
}
/**
 * Uri template for the request builder.
 */
export const App_ItemRequestBuilderUriTemplate = "{+baseurl}/v2/apps/{app_%2Did}{?name*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const App_ItemRequestBuilderNavigationMetadata: Record<Exclude<keyof App_ItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    alerts: {
        requestsMetadata: AlertsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertsRequestBuilderNavigationMetadata,
    },
    components: {
        navigationMetadata: ComponentsRequestBuilderNavigationMetadata,
    },
    deployments: {
        requestsMetadata: DeploymentsRequestBuilderRequestsMetadata,
        navigationMetadata: DeploymentsRequestBuilderNavigationMetadata,
    },
    logs: {
        requestsMetadata: LogsRequestBuilderRequestsMetadata,
    },
    metrics: {
        navigationMetadata: MetricsRequestBuilderNavigationMetadata,
    },
    restart: {
        requestsMetadata: RestartRequestBuilderRequestsMetadata,
    },
    rollback: {
        requestsMetadata: RollbackRequestBuilderRequestsMetadata,
        navigationMetadata: RollbackRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const App_ItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: App_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApps_delete_app_responseFromDiscriminatorValue,
    },
    get: {
        uriTemplate: App_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApp_responseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: App_ItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            429: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
            XXX: createErrorEscapedFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApp_responseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApps_update_app_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
