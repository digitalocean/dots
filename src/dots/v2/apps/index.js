/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApp_responseFromDiscriminatorValue, createApps_responseFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, serializeApps_create_app_request } from '../../models/index.js';
// @ts-ignore
import { App_ItemRequestBuilderNavigationMetadata, App_ItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { MetricsRequestBuilderNavigationMetadata } from './metrics/index.js';
// @ts-ignore
import { ProposeRequestBuilderRequestsMetadata } from './propose/index.js';
// @ts-ignore
import { RegionsRequestBuilderRequestsMetadata } from './regions/index.js';
// @ts-ignore
import { TiersRequestBuilderNavigationMetadata } from './tiers/index.js';
/**
 * Uri template for the request builder.
 */
export const AppsRequestBuilderUriTemplate = "{+baseurl}/v2/apps{?page*,per_page*,with_projects*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AppsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
    "withProjects": "with_projects",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppsRequestBuilderNavigationMetadata = {
    byApp_Id: {
        requestsMetadata: App_ItemRequestBuilderRequestsMetadata,
        navigationMetadata: App_ItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["app_%2Did"],
    },
    metrics: {
        navigationMetadata: MetricsRequestBuilderNavigationMetadata,
    },
    propose: {
        requestsMetadata: ProposeRequestBuilderRequestsMetadata,
    },
    regions: {
        requestsMetadata: RegionsRequestBuilderRequestsMetadata,
    },
    tiers: {
        navigationMetadata: TiersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: AppsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createApps_responseFromDiscriminatorValue,
        queryParametersMapper: AppsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AppsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createApp_responseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApps_create_app_request,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
