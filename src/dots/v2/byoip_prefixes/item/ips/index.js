/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createByoip_prefix_resourceFromDiscriminatorValue, createErrorEscapedFromDiscriminatorValue, createMeta_propertiesFromDiscriminatorValue, createPage_linksFromDiscriminatorValue, serializeByoip_prefix_resource, serializeMeta_properties, serializePage_links } from '../../../../models/index.js';
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IpsGetResponse}
 */
// @ts-ignore
export function createIpsGetResponseFromDiscriminatorValue(parseNode) {
    return deserializeIntoIpsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIpsGetResponse(ipsGetResponse = {}) {
    return {
        "ips": n => { ipsGetResponse.ips = n.getCollectionOfObjectValues(createByoip_prefix_resourceFromDiscriminatorValue); },
        "links": n => { ipsGetResponse.links = n.getObjectValue(createPage_linksFromDiscriminatorValue); },
        "meta": n => { ipsGetResponse.meta = n.getObjectValue(createMeta_propertiesFromDiscriminatorValue); },
    };
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIpsGetResponse(writer, ipsGetResponse = {}) {
    if (ipsGetResponse) {
        writer.writeCollectionOfObjectValues("ips", ipsGetResponse.ips, serializeByoip_prefix_resource);
        writer.writeObjectValue("links", ipsGetResponse.links, serializePage_links);
        writer.writeObjectValue("meta", ipsGetResponse.meta, serializeMeta_properties);
        writer.writeAdditionalData(ipsGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const IpsRequestBuilderUriTemplate = "{+baseurl}/v2/byoip_prefixes/{byoip_prefix_uuid}/ips{?page*,per_page*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const IpsRequestBuilderGetQueryParametersMapper = {
    "perPage": "per_page",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IpsRequestBuilderRequestsMetadata = {
    get: {
        uriTemplate: IpsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createErrorEscapedFromDiscriminatorValue,
            404: createErrorEscapedFromDiscriminatorValue,
            429: createErrorEscapedFromDiscriminatorValue,
            500: createErrorEscapedFromDiscriminatorValue,
            XXX: createErrorEscapedFromDiscriminatorValue,
        },
        adapterMethodName: "send",
        responseBodyFactory: createIpsGetResponseFromDiscriminatorValue,
        queryParametersMapper: IpsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
